# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - master

jobs:
  - job: Linux_npm_install
    pool:
      vmImage: ubuntu-16.04

    steps:
      # - task: NodeTool@0
      #   inputs:
      #     versionSpec: "10.x"
      #   displayName: "Install Node.js"

      - bash: |
          BS_TRAVIS_CI=1
          OCAMLRUNPARAM="b"
          echo "##vso[task.setvariable variable=BS_TRAVIS_CI]$BS_TRAVIS_CI"
          echo "##vso[task.setvariable variable=OCAMLRUNPARAM]$OCAMLRUNPARAM"
        displayName: "Set BS_TRAVIS_CI and OCAMLRUNPARAM"

      - bash: env
        displayName: "Print environment"

      - script: |
          git submodule init
          git submodule update
        displayName: "Pull Submodules"

      - script: |
          npm install
        displayName: "npm install"

      - bash: |
          export BS_TRAVIS_CI=1
          npm test
        displayName: "test"

  - job: macOS_npm_install
    pool:
      vmImage: macOS-10.13

    steps:
      # - task: NodeTool@0
      #   inputs:
      #     versionSpec: "10.x"
      #   displayName: "Install Node.js"

      - bash: |
          BS_TRAVIS_CI=1
          OCAMLRUNPARAM="b"
          echo "##vso[task.setvariable variable=BS_TRAVIS_CI]$BS_TRAVIS_CI"
          echo "##vso[task.setvariable variable=OCAMLRUNPARAM]$OCAMLRUNPARAM"
        displayName: "Set BS_TRAVIS_CI and OCAMLRUNPARAM"

      - bash: env
        displayName: "Print environment"

      - script: |
          git submodule init
          git submodule update
        displayName: "Pull Submodules"

      - script: |
          npm install
        displayName: "npm install"

      - bash: |
          export BS_TRAVIS_CI=1
          npm test
        displayName: "test"

  - job: Windows_esy_build
    pool:
      vmImage: vs2017-win2016

    steps:
      # - bash: |
      #     echo "which x86_64-w64-mingw32-gcc"
      #     which x86_64-w64-mingw32-gcc
      #     "echo ls -l /c/ProgramData/Chocolatey/bin"
      #     ls -l /c/ProgramData/Chocolatey/bin
      #     echo "int main() { return 0; }" >test.c
      #     echo "x86_64-w64-mingw32-gcc -v test.c"
      #     x86_64-w64-mingw32-gcc -v test.c
      #     # echo "esy b which x86_64-w64-mingw32-as"
      #     # esy b which x86_64-w64-mingw32-as

      #   displayName: "find mingw"

      # - task: NodeTool@0
      #   inputs:
      #     versionSpec: "10.x"
      #   displayName: "Install Node.js"

      - bash: |
          BS_TRAVIS_CI=1
          OCAMLRUNPARAM="b"
          echo "##vso[task.setvariable variable=BS_TRAVIS_CI]$BS_TRAVIS_CI"
          echo "##vso[task.setvariable variable=OCAMLRUNPARAM]$OCAMLRUNPARAM"
        displayName: "Set BS_TRAVIS_CI and OCAMLRUNPARAM"

      - bash: env
        displayName: "Print environment"

      # - script: |
      #     git submodule init
      #     git submodule update
      #   displayName: "Pull Submodules"

      - script: npm install -g esy
        displayName: "install esy"
      - script: esy install
        displayName: "esy install"
      - script: esy build
        displayName: "esy build"

      # - bash: |
      #     OCAMLOPT=`esy b which ocamlopt`
      #     OCAMLBIN_UNIX=$(dirname "${OCAMLOPT}")
      #     OCAMLBIN=$( cygpath --windows "$OCAMLBIN_UNIX")
      #     echo "OCAMLBIN: $OCAMLBIN"
      #     echo "##vso[task.setvariable variable=OCAMLBIN]$OCAMLBIN"
      #     echo "##vso[task.prependpath]$OCAMLBIN"
      #   displayName: "Set OCAMLBIN"

      # - bash: env
      #   displayName: "Print environment"

      # - bash: ls -lR "$OCAMLBIN"
      #   displayName: "ls -lR $OCAMLBIN"

      # - bash: ls -lR "$OCAMLBIN/.."
      #   displayName: "ls -lR $OCAMLBIN/.."

      # - bash: |
      #     echo "PATH"
      #     echo $PATH
      #     echo "ocamlopt -version"
      #     ocamlopt -version
      #     echo "looking for x86_64-w64-mingw32-as"
      #     find ~/.esy -name "x86_64-w64-mingw32-as*"
      #     echo "print_int 42;; print_newline();;" >testOcaml.ml
      #     echo "build with esy"
      #     esy b ocamlopt.opt -verbose testOcaml.ml -o testOcaml
      #     ./testOcaml
      #     echo "build without esy"
      #     ocamlopt.opt testOcaml.ml -o testOcaml
      #     node scripts/prebuilt.js
      #   displayName: "try node scripts/prebuilt.js"
