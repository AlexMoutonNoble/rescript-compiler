module Misc : sig 
#1 "misc.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* Miscellaneous useful types and functions *)


val fatal_error: string -> 'a
val fatal_errorf: ('a, Format.formatter, unit, 'b) format4 -> 'a
exception Fatal_error

val try_finally : (unit -> 'a) -> (unit -> unit) -> 'a;;

val map_end: ('a -> 'b) -> 'a list -> 'b list -> 'b list
        (* [map_end f l t] is [map f l @ t], just more efficient. *)
val map_left_right: ('a -> 'b) -> 'a list -> 'b list
        (* Like [List.map], with guaranteed left-to-right evaluation order *)
val for_all2: ('a -> 'b -> bool) -> 'a list -> 'b list -> bool
        (* Same as [List.for_all] but for a binary predicate.
           In addition, this [for_all2] never fails: given two lists
           with different lengths, it returns false. *)
val replicate_list: 'a -> int -> 'a list
        (* [replicate_list elem n] is the list with [n] elements
           all identical to [elem]. *)
val list_remove: 'a -> 'a list -> 'a list
        (* [list_remove x l] returns a copy of [l] with the first
           element equal to [x] removed. *)
val split_last: 'a list -> 'a list * 'a
        (* Return the last element and the other elements of the given list. *)
val may: ('a -> unit) -> 'a option -> unit
val may_map: ('a -> 'b) -> 'a option -> 'b option

type ref_and_value = R : 'a ref * 'a -> ref_and_value

val protect_refs : ref_and_value list -> (unit -> 'a) -> 'a
(** [protect_refs l f] temporarily sets [r] to [v] for each [R (r, v)] in [l]
    while executing [f]. The previous contents of the references is restored
    even if [f] raises an exception. *)

module Stdlib : sig
  module List : sig
    type 'a t = 'a list

    val compare : ('a -> 'a -> int) -> 'a t -> 'a t -> int
    (** The lexicographic order supported by the provided order.
        There is no constraint on the relative lengths of the lists. *)

    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool
    (** Returns [true] iff the given lists have the same length and content
        with respect to the given equality function. *)

    val filter_map : ('a -> 'b option) -> 'a t -> 'b t
    (** [filter_map f l] applies [f] to every element of [l], filters
        out the [None] elements and returns the list of the arguments of
        the [Some] elements. *)

    val some_if_all_elements_are_some : 'a option t -> 'a t option
    (** If all elements of the given list are [Some _] then [Some xs]
        is returned with the [xs] being the contents of those [Some]s, with
        order preserved.  Otherwise return [None]. *)

    val map2_prefix : ('a -> 'b -> 'c) -> 'a t -> 'b t -> ('c t * 'b t)
    (** [let r1, r2 = map2_prefix f l1 l2]
        If [l1] is of length n and [l2 = h2 @ t2] with h2 of length n,
        r1 is [List.map2 f l1 h1] and r2 is t2. *)

    val split_at : int -> 'a t -> 'a t * 'a t
    (** [split_at n l] returns the pair [before, after] where [before] is
        the [n] first elements of [l] and [after] the remaining ones.
        If [l] has less than [n] elements, raises Invalid_argument. *)
  end

  module Option : sig
    type 'a t = 'a option

    val equal : ('a -> 'a -> bool) -> 'a t -> 'a t -> bool

    val iter : ('a -> unit) -> 'a t -> unit
    val map : ('a -> 'b) -> 'a t -> 'b t
    val fold : ('a -> 'b -> 'b) -> 'a t -> 'b -> 'b
    val value_default : ('a -> 'b) -> default:'b -> 'a t -> 'b
  end

  module Array : sig
    val exists2 : ('a -> 'b -> bool) -> 'a array -> 'b array -> bool
    (* Same as [Array.exists], but for a two-argument predicate. Raise
       Invalid_argument if the two arrays are determined to have
       different lengths. *)
  end
end

val find_in_path: string list -> string -> string
        (* Search a file in a list of directories. *)
val find_in_path_rel: string list -> string -> string
        (* Search a relative file in a list of directories. *)
val find_in_path_uncap: string list -> string -> string
        (* Same, but search also for uncapitalized name, i.e.
           if name is Foo.ml, allow /path/Foo.ml and /path/foo.ml
           to match. *)
val remove_file: string -> unit
        (* Delete the given file if it exists. Never raise an error. *)
val expand_directory: string -> string -> string
        (* [expand_directory alt file] eventually expands a [+] at the
           beginning of file into [alt] (an alternate root directory) *)

val create_hashtable: int -> ('a * 'b) list -> ('a, 'b) Hashtbl.t
        (* Create a hashtable of the given size and fills it with the
           given bindings. *)

val copy_file: in_channel -> out_channel -> unit
        (* [copy_file ic oc] reads the contents of file [ic] and copies
           them to [oc]. It stops when encountering EOF on [ic]. *)
val copy_file_chunk: in_channel -> out_channel -> int -> unit
        (* [copy_file_chunk ic oc n] reads [n] bytes from [ic] and copies
           them to [oc]. It raises [End_of_file] when encountering
           EOF on [ic]. *)
val string_of_file: in_channel -> string
        (* [string_of_file ic] reads the contents of file [ic] and copies
           them to a string. It stops when encountering EOF on [ic]. *)
           
val output_to_bin_file_directly: string -> (string -> out_channel -> 'a) -> 'a

val output_to_file_via_temporary:
      ?mode:open_flag list -> string -> (string -> out_channel -> 'a) -> 'a
        (* Produce output in temporary file, then rename it
           (as atomically as possible) to the desired output file name.
           [output_to_file_via_temporary filename fn] opens a temporary file
           which is passed to [fn] (name + output channel).  When [fn] returns,
           the channel is closed and the temporary file is renamed to
           [filename]. *)

val log2: int -> int
        (* [log2 n] returns [s] such that [n = 1 lsl s]
           if [n] is a power of 2*)
val align: int -> int -> int
        (* [align n a] rounds [n] upwards to a multiple of [a]
           (a power of 2). *)
val no_overflow_add: int -> int -> bool
        (* [no_overflow_add n1 n2] returns [true] if the computation of
           [n1 + n2] does not overflow. *)
val no_overflow_sub: int -> int -> bool
        (* [no_overflow_sub n1 n2] returns [true] if the computation of
           [n1 - n2] does not overflow. *)
val no_overflow_mul: int -> int -> bool
        (* [no_overflow_mul n1 n2] returns [true] if the computation of
           [n1 * n2] does not overflow. *)
val no_overflow_lsl: int -> int -> bool
        (* [no_overflow_lsl n k] returns [true] if the computation of
           [n lsl k] does not overflow. *)

module Int_literal_converter : sig
  val int : string -> int
  val int32 : string -> int32
  val int64 : string -> int64
  val nativeint : string -> nativeint
end

val chop_extensions: string -> string
        (* Return the given file name without its extensions. The extensions
           is the longest suffix starting with a period and not including
           a directory separator, [.xyz.uvw] for instance.

           Return the given name if it does not contain an extension. *)

val search_substring: string -> string -> int -> int
        (* [search_substring pat str start] returns the position of the first
           occurrence of string [pat] in string [str].  Search starts
           at offset [start] in [str].  Raise [Not_found] if [pat]
           does not occur. *)

val replace_substring: before:string -> after:string -> string -> string
        (* [replace_substring ~before ~after str] replaces all
           occurrences of [before] with [after] in [str] and returns
           the resulting string. *)

val rev_split_words: string -> string list
        (* [rev_split_words s] splits [s] in blank-separated words, and returns
           the list of words in reverse order. *)

val get_ref: 'a list ref -> 'a list
        (* [get_ref lr] returns the content of the list reference [lr] and reset
           its content to the empty list. *)


val fst3: 'a * 'b * 'c -> 'a
val snd3: 'a * 'b * 'c -> 'b
val thd3: 'a * 'b * 'c -> 'c

val fst4: 'a * 'b * 'c * 'd -> 'a
val snd4: 'a * 'b * 'c * 'd -> 'b
val thd4: 'a * 'b * 'c * 'd -> 'c
val for4: 'a * 'b * 'c * 'd -> 'd

module LongString :
  sig
    type t = bytes array
    val create : int -> t
    val length : t -> int
    val get : t -> int -> char
    val set : t -> int -> char -> unit
    val blit : t -> int -> t -> int -> int -> unit
    val output : out_channel -> t -> int -> int -> unit
    val unsafe_blit_to_bytes : t -> int -> bytes -> int -> int -> unit
    val input_bytes : in_channel -> int -> t
  end

val edit_distance : string -> string -> int -> int option
(** [edit_distance a b cutoff] computes the edit distance between
    strings [a] and [b]. To help efficiency, it uses a cutoff: if the
    distance [d] is smaller than [cutoff], it returns [Some d], else
    [None].

    The distance algorithm currently used is Damerau-Levenshtein: it
    computes the number of insertion, deletion, substitution of
    letters, or swapping of adjacent letters to go from one word to the
    other. The particular algorithm may change in the future.
*)

val spellcheck : string list -> string -> string list
(** [spellcheck env name] takes a list of names [env] that exist in
    the current environment and an erroneous [name], and returns a
    list of suggestions taken from [env], that are close enough to
    [name] that it may be a typo for one of them. *)

val did_you_mean : Format.formatter -> (unit -> string list) -> unit
(** [did_you_mean ppf get_choices] hints that the user may have meant
    one of the option returned by calling [get_choices]. It does nothing
    if the returned list is empty.

    The [unit -> ...] thunking is meant to delay any potentially-slow
    computation (typically computing edit-distance with many things
    from the current environment) to when the hint message is to be
    printed. You should print an understandable error message before
    calling [did_you_mean], so that users get a clear notification of
    the failure even if producing the hint is slow.
*)

val cut_at : string -> char -> string * string
(** [String.cut_at s c] returns a pair containing the sub-string before
   the first occurrence of [c] in [s], and the sub-string after the
   first occurrence of [c] in [s].
   [let (before, after) = String.cut_at s c in
    before ^ String.make 1 c ^ after] is the identity if [s] contains [c].

   Raise [Not_found] if the character does not appear in the string
   @since 4.01
*)


module StringSet: Set.S with type elt = string
module StringMap: Map.S with type key = string
(* TODO: replace all custom instantiations of StringSet/StringMap in various
   compiler modules with this one. *)

(* Color handling *)
module Color : sig
  type color =
    | Black
    | Red
    | Green
    | Yellow
    | Blue
    | Magenta
    | Cyan
    | White
  ;;

  type style =
    | FG of color (* foreground *)
    | BG of color (* background *)
    | Bold
    | Reset

    | Dim


  val ansi_of_style_l : style list -> string
  (* ANSI escape sequence for the given style *)

  type styles = {
    error: style list;
    warning: style list;
    loc: style list;
  }

  val default_styles: styles
  val get_styles: unit -> styles
  val set_styles: styles -> unit

  type setting = Auto | Always | Never

  val setup : setting option -> unit
  (* [setup opt] will enable or disable color handling on standard formatters
     according to the value of color setting [opt].
     Only the first call to this function has an effect. *)

  val set_color_tag_handling : Format.formatter -> unit
  (* adds functions to support color tags to the given formatter. *)
end

val normalise_eol : string -> string
(** [normalise_eol s] returns a fresh copy of [s] with any '\r' characters
   removed. Intended for pre-processing text which will subsequently be printed
   on a channel which performs EOL transformations (i.e. Windows) *)

val delete_eol_spaces : string -> string
(** [delete_eol_spaces s] returns a fresh copy of [s] with any end of
   line spaces removed. Intended to normalize the output of the
   toplevel for tests. *)



(** {1 Hook machinery}

    Hooks machinery:
   [add_hook name f] will register a function that will be called on the
    argument of a later call to [apply_hooks]. Hooks are applied in the
    lexicographical order of their names.
*)

type hook_info = {
  sourcefile : string;
}

exception HookExnWrapper of
    {
      error: exn;
      hook_name: string;
      hook_info: hook_info;
    }
    (** An exception raised by a hook will be wrapped into a
        [HookExnWrapper] constructor by the hook machinery.  *)


val raise_direct_hook_exn: exn -> 'a
  (** A hook can use [raise_unwrapped_hook_exn] to raise an exception that will
      not be wrapped into a {!HookExnWrapper}. *)

module type HookSig = sig
  type t
  val add_hook : string -> (hook_info -> t -> t) -> unit
  val apply_hooks : hook_info -> t -> t
end

module MakeHooks : functor (M : sig type t end) -> HookSig with type t = M.t

end = struct
#1 "misc.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* Errors *)

exception Fatal_error



let fatal_error msg =
  prerr_string ">> Fatal error: "; prerr_endline msg; raise Fatal_error

let fatal_errorf fmt = Format.kasprintf fatal_error fmt

(* Exceptions *)

let try_finally work cleanup =
  let result = (try work () with e -> cleanup (); raise e) in
  cleanup ();
  result
;;

type ref_and_value = R : 'a ref * 'a -> ref_and_value

let protect_refs =
  let set_refs l = List.iter (fun (R (r, v)) -> r := v) l in
  fun refs f ->
    let backup = List.map (fun (R (r, _)) -> R (r, !r)) refs in
    set_refs refs;
    match f () with
    | x           -> set_refs backup; x
    | exception e -> set_refs backup; raise e

(* List functions *)

let rec map_end f l1 l2 =
  match l1 with
    [] -> l2
  | hd::tl -> f hd :: map_end f tl l2

let rec map_left_right f = function
    [] -> []
  | hd::tl -> let res = f hd in res :: map_left_right f tl

let rec for_all2 pred l1 l2 =
  match (l1, l2) with
    ([], []) -> true
  | (hd1::tl1, hd2::tl2) -> pred hd1 hd2 && for_all2 pred tl1 tl2
  | (_, _) -> false

let rec replicate_list elem n =
  if n <= 0 then [] else elem :: replicate_list elem (n-1)

let rec list_remove x = function
    [] -> []
  | hd :: tl ->
      if hd = x then tl else hd :: list_remove x tl

let rec split_last = function
    [] -> assert false
  | [x] -> ([], x)
  | hd :: tl ->
      let (lst, last) = split_last tl in
      (hd :: lst, last)

module Stdlib = struct
  module List = struct
    type 'a t = 'a list

    let rec compare cmp l1 l2 =
      match l1, l2 with
      | [], [] -> 0
      | [], _::_ -> -1
      | _::_, [] -> 1
      | h1::t1, h2::t2 ->
        let c = cmp h1 h2 in
        if c <> 0 then c
        else compare cmp t1 t2

    let rec equal eq l1 l2 =
      match l1, l2 with
      | ([], []) -> true
      | (hd1 :: tl1, hd2 :: tl2) -> eq hd1 hd2 && equal eq tl1 tl2
      | (_, _) -> false

    let filter_map f l =
      let rec aux acc l =
        match l with
        | [] -> List.rev acc
        | h :: t ->
          match f h with
          | None -> aux acc t
          | Some v -> aux (v :: acc) t
      in
      aux [] l

    let map2_prefix f l1 l2 =
      let rec aux acc l1 l2 =
        match l1, l2 with
        | [], _ -> (List.rev acc, l2)
        | _ :: _, [] -> raise (Invalid_argument "map2_prefix")
        | h1::t1, h2::t2 ->
          let h = f h1 h2 in
          aux (h :: acc) t1 t2
      in
      aux [] l1 l2

    let some_if_all_elements_are_some l =
      let rec aux acc l =
        match l with
        | [] -> Some (List.rev acc)
        | None :: _ -> None
        | Some h :: t -> aux (h :: acc) t
      in
      aux [] l

    let split_at n l =
      let rec aux n acc l =
        if n = 0
        then List.rev acc, l
        else
          match l with
          | [] -> raise (Invalid_argument "split_at")
          | t::q -> aux (n-1) (t::acc) q
      in
      aux n [] l
  end

  module Option = struct
    type 'a t = 'a option

    let equal eq o1 o2 =
      match o1, o2 with
      | None, None -> true
      | Some e1, Some e2 -> eq e1 e2
      | _, _ -> false

    let iter f = function
      | Some x -> f x
      | None -> ()

    let map f = function
      | Some x -> Some (f x)
      | None -> None

    let fold f a b =
      match a with
      | None -> b
      | Some a -> f a b

    let value_default f ~default a =
      match a with
      | None -> default
      | Some a -> f a
  end

  module Array = struct
    let exists2 p a1 a2 =
      let n = Array.length a1 in
      if Array.length a2 <> n then invalid_arg "Misc.Stdlib.Array.exists2";
      let rec loop i =
        if i = n then false
        else if p (Array.unsafe_get a1 i) (Array.unsafe_get a2 i) then true
        else loop (succ i) in
      loop 0
  end
end

let may = Stdlib.Option.iter
let may_map = Stdlib.Option.map

(* File functions *)

let find_in_path path name =
  if not (Filename.is_implicit name) then
    if Sys.file_exists name then name else raise Not_found
  else begin
    let rec try_dir = function
      [] -> raise Not_found
    | dir::rem ->
        let fullname = Filename.concat dir name in
        if Sys.file_exists fullname then fullname else try_dir rem
    in try_dir path
  end

let find_in_path_rel path name =
  let rec simplify s =
    let open Filename in
    let base = basename s in
    let dir = dirname s in
    if dir = s then dir
    else if base = current_dir_name then simplify dir
    else concat (simplify dir) base
  in
  let rec try_dir = function
    [] -> raise Not_found
  | dir::rem ->
      let fullname = simplify (Filename.concat dir name) in
      if Sys.file_exists fullname then fullname else try_dir rem
  in try_dir path

let find_in_path_uncap path name =
  let uname = String.uncapitalize_ascii name in
  let rec try_dir = function
    [] -> raise Not_found
  | dir::rem ->
      let fullname = Filename.concat dir name
      and ufullname = Filename.concat dir uname in
      if Sys.file_exists ufullname then ufullname
      else if Sys.file_exists fullname then fullname
      else try_dir rem
  in try_dir path

let remove_file filename =
  try
    if Sys.file_exists filename
    then Sys.remove filename
  with Sys_error _msg ->
    ()

(* Expand a -I option: if it starts with +, make it relative to the standard
   library directory *)

let expand_directory alt s =
  if String.length s > 0 && s.[0] = '+'
  then Filename.concat alt
                       (String.sub s 1 (String.length s - 1))
  else s

(* Hashtable functions *)

let create_hashtable size init =
  let tbl = Hashtbl.create size in
  List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
  tbl

(* File copy *)

let copy_file ic oc =
  let buff = Bytes.create 0x1000 in
  let rec copy () =
    let n = input ic buff 0 0x1000 in
    if n = 0 then () else (output oc buff 0 n; copy())
  in copy()

let copy_file_chunk ic oc len =
  let buff = Bytes.create 0x1000 in
  let rec copy n =
    if n <= 0 then () else begin
      let r = input ic buff 0 (min n 0x1000) in
      if r = 0 then raise End_of_file else (output oc buff 0 r; copy(n-r))
    end
  in copy len

let string_of_file ic =
  let b = Buffer.create 0x10000 in
  let buff = Bytes.create 0x1000 in
  let rec copy () =
    let n = input ic buff 0 0x1000 in
    if n = 0 then Buffer.contents b else
      (Buffer.add_subbytes b buff 0 n; copy())
  in copy()

let output_to_bin_file_directly filename fn =  
  let oc = Pervasives.open_out_bin filename in 
  match fn filename oc with 
  | v -> close_out oc ; v 
  | exception e -> close_out oc ; raise e

let output_to_file_via_temporary ?(mode = [Open_text]) filename fn =
  let (temp_filename, oc) =
    Filename.open_temp_file
       ~mode ~perms:0o666 ~temp_dir:(Filename.dirname filename)
       (Filename.basename filename) ".tmp" in
    (* The 0o666 permissions will be modified by the umask.  It's just
       like what [open_out] and [open_out_bin] do.
       With temp_dir = dirname filename, we ensure that the returned
       temp file is in the same directory as filename itself, making
       it safe to rename temp_filename to filename later.
       With prefix = basename filename, we are almost certain that
       the first generated name will be unique.  A fixed prefix
       would work too but might generate more collisions if many
       files are being produced simultaneously in the same directory. *)
  match fn temp_filename oc with
  | res ->
      close_out oc;
      begin try
        Sys.rename temp_filename filename; res
      with exn ->
        remove_file temp_filename; raise exn
      end
  | exception exn ->
      close_out oc; remove_file temp_filename; raise exn

(* Integer operations *)

let rec log2 n =
  if n <= 1 then 0 else 1 + log2(n asr 1)

let align n a =
  if n >= 0 then (n + a - 1) land (-a) else n land (-a)

let no_overflow_add a b = (a lxor b) lor (a lxor (lnot (a+b))) < 0

let no_overflow_sub a b = (a lxor (lnot b)) lor (b lxor (a-b)) < 0

let no_overflow_mul a b = b <> 0 && (a * b) / b = a

let no_overflow_lsl a k =
  0 <= k && k < Sys.word_size && min_int asr k <= a && a <= max_int asr k

module Int_literal_converter = struct
  (* To convert integer literals, allowing max_int + 1 (PR#4210) *)
  let cvt_int_aux str neg of_string =
    if String.length str = 0 || str.[0]= '-'
    then of_string str
    else neg (of_string ("-" ^ str))
  let int s = cvt_int_aux s (~-) int_of_string
  let int32 s = cvt_int_aux s Int32.neg Int32.of_string
  let int64 s = cvt_int_aux s Int64.neg Int64.of_string
  let nativeint s = cvt_int_aux s Nativeint.neg Nativeint.of_string
end

(* String operations *)

let chop_extensions file =
  let dirname = Filename.dirname file and basename = Filename.basename file in
  try
    let pos = String.index basename '.' in
    let basename = String.sub basename 0 pos in
    if Filename.is_implicit file && dirname = Filename.current_dir_name then
      basename
    else
      Filename.concat dirname basename
  with Not_found -> file

let search_substring pat str start =
  let rec search i j =
    if j >= String.length pat then i
    else if i + j >= String.length str then raise Not_found
    else if str.[i + j] = pat.[j] then search i (j+1)
    else search (i+1) 0
  in search start 0

let replace_substring ~before ~after str =
  let rec search acc curr =
    match search_substring before str curr with
      | next ->
         let prefix = String.sub str curr (next - curr) in
         search (prefix :: acc) (next + String.length before)
      | exception Not_found ->
        let suffix = String.sub str curr (String.length str - curr) in
        List.rev (suffix :: acc)
  in String.concat after (search [] 0)

let rev_split_words s =
  let rec split1 res i =
    if i >= String.length s then res else begin
      match s.[i] with
        ' ' | '\t' | '\r' | '\n' -> split1 res (i+1)
      | _ -> split2 res i (i+1)
    end
  and split2 res i j =
    if j >= String.length s then String.sub s i (j-i) :: res else begin
      match s.[j] with
        ' ' | '\t' | '\r' | '\n' -> split1 (String.sub s i (j-i) :: res) (j+1)
      | _ -> split2 res i (j+1)
    end
  in split1 [] 0

let get_ref r =
  let v = !r in
  r := []; v

let fst3 (x, _, _) = x
let snd3 (_,x,_) = x
let thd3 (_,_,x) = x

let fst4 (x, _, _, _) = x
let snd4 (_,x,_, _) = x
let thd4 (_,_,x,_) = x
let for4 (_,_,_,x) = x


module LongString = struct
  type t = bytes array

  let create str_size =
    let tbl_size = str_size / Sys.max_string_length + 1 in
    let tbl = Array.make tbl_size Bytes.empty in
    for i = 0 to tbl_size - 2 do
      tbl.(i) <- Bytes.create Sys.max_string_length;
    done;
    tbl.(tbl_size - 1) <- Bytes.create (str_size mod Sys.max_string_length);
    tbl

  let length tbl =
    let tbl_size = Array.length tbl in
    Sys.max_string_length * (tbl_size - 1) + Bytes.length tbl.(tbl_size - 1)

  let get tbl ind =
    Bytes.get tbl.(ind / Sys.max_string_length) (ind mod Sys.max_string_length)

  let set tbl ind c =
    Bytes.set tbl.(ind / Sys.max_string_length) (ind mod Sys.max_string_length)
              c

  let blit src srcoff dst dstoff len =
    for i = 0 to len - 1 do
      set dst (dstoff + i) (get src (srcoff + i))
    done

  let output oc tbl pos len =
    for i = pos to pos + len - 1 do
      output_char oc (get tbl i)
    done

  let unsafe_blit_to_bytes src srcoff dst dstoff len =
    for i = 0 to len - 1 do
      Bytes.unsafe_set dst (dstoff + i) (get src (srcoff + i))
    done

  let input_bytes ic len =
    let tbl = create len in
    Array.iter (fun str -> really_input ic str 0 (Bytes.length str)) tbl;
    tbl
end


let edit_distance a b cutoff =
  let la, lb = String.length a, String.length b in
  let cutoff =
    (* using max_int for cutoff would cause overflows in (i + cutoff + 1);
       we bring it back to the (max la lb) worstcase *)
    min (max la lb) cutoff in
  if abs (la - lb) > cutoff then None
  else begin
    (* initialize with 'cutoff + 1' so that not-yet-written-to cases have
       the worst possible cost; this is useful when computing the cost of
       a case just at the boundary of the cutoff diagonal. *)
    let m = Array.make_matrix (la + 1) (lb + 1) (cutoff + 1) in
    m.(0).(0) <- 0;
    for i = 1 to la do
      m.(i).(0) <- i;
    done;
    for j = 1 to lb do
      m.(0).(j) <- j;
    done;
    for i = 1 to la do
      for j = max 1 (i - cutoff - 1) to min lb (i + cutoff + 1) do
        let cost = if a.[i-1] = b.[j-1] then 0 else 1 in
        let best =
          (* insert, delete or substitute *)
          min (1 + min m.(i-1).(j) m.(i).(j-1)) (m.(i-1).(j-1) + cost)
        in
        let best =
          (* swap two adjacent letters; we use "cost" again in case of
             a swap between two identical letters; this is slightly
             redundant as this is a double-substitution case, but it
             was done this way in most online implementations and
             imitation has its virtues *)
          if not (i > 1 && j > 1 && a.[i-1] = b.[j-2] && a.[i-2] = b.[j-1])
          then best
          else min best (m.(i-2).(j-2) + cost)
        in
        m.(i).(j) <- best
      done;
    done;
    let result = m.(la).(lb) in
    if result > cutoff
    then None
    else Some result
  end

let spellcheck env name =
  let cutoff =
    match String.length name with
      | 1 | 2 -> 0
      | 3 | 4 -> 1
      | 5 | 6 -> 2
      | _ -> 3
  in
  let compare target acc head =
    match edit_distance target head cutoff with
      | None -> acc
      | Some dist ->
         let (best_choice, best_dist) = acc in
         if dist < best_dist then ([head], dist)
         else if dist = best_dist then (head :: best_choice, dist)
         else acc
  in
  fst (List.fold_left (compare name) ([], max_int) env)

let did_you_mean ppf get_choices =
  (* flush now to get the error report early, in the (unheard of) case
     where the search in the get_choices function would take a bit of
     time; in the worst case, the user has seen the error, she can
     interrupt the process before the spell-checking terminates. *)
  Format.fprintf ppf "@?";
  match get_choices () with
  | [] -> ()
  | choices ->
     let rest, last = split_last choices in
     Format.fprintf ppf "@\nHint: Did you mean %s%s%s?@?"
       (String.concat ", " rest)
       (if rest = [] then "" else " or ")
       last

let cut_at s c =
  let pos = String.index s c in
  String.sub s 0 pos, String.sub s (pos+1) (String.length s - pos - 1)


module StringSet = Set.Make(struct type t = string let compare = compare end)
module StringMap = Map.Make(struct type t = string let compare = compare end)

(* Color handling *)
module Color = struct
  (* use ANSI color codes, see https://en.wikipedia.org/wiki/ANSI_escape_code *)
  type color =
    | Black
    | Red
    | Green
    | Yellow
    | Blue
    | Magenta
    | Cyan
    | White
  ;;

  type style =
    | FG of color (* foreground *)
    | BG of color (* background *)
    | Bold
    | Reset

    | Dim


  let ansi_of_color = function
    | Black -> "0"
    | Red -> "1"
    | Green -> "2"
    | Yellow -> "3"
    | Blue -> "4"
    | Magenta -> "5"
    | Cyan -> "6"
    | White -> "7"

  let code_of_style = function
    | FG c -> "3" ^ ansi_of_color c
    | BG c -> "4" ^ ansi_of_color c
    | Bold -> "1"
    | Reset -> "0"

    | Dim -> "2"


  let ansi_of_style_l l =
    let s = match l with
      | [] -> code_of_style Reset
      | [s] -> code_of_style s
      | _ -> String.concat ";" (List.map code_of_style l)
    in
    "\x1b[" ^ s ^ "m"

  type styles = {
    error: style list;
    warning: style list;
    loc: style list;
  }

  let default_styles = {
    warning = [Bold; FG Magenta];
    error = [Bold; FG Red];
    loc = [Bold];
  }

  let cur_styles = ref default_styles
  let get_styles () = !cur_styles
  let set_styles s = cur_styles := s

  (* map a tag to a style, if the tag is known.
     @raise Not_found otherwise *)
  let style_of_tag s = match s with
    | "error" -> (!cur_styles).error
    | "warning" -> (!cur_styles).warning
    | "loc" -> (!cur_styles).loc

    | "info" -> [Bold; FG Yellow]
    | "dim" -> [Dim]
    | "filename" -> [FG Cyan]
                 
    | _ -> raise Not_found

  let color_enabled = ref true

  (* either prints the tag of [s] or delegates to [or_else] *)
  let mark_open_tag ~or_else s =
    try
      let style = style_of_tag s in
      if !color_enabled then ansi_of_style_l style else ""
    with Not_found -> or_else s

  let mark_close_tag ~or_else s =
    try
      let _ = style_of_tag s in
      if !color_enabled then ansi_of_style_l [Reset] else ""
    with Not_found -> or_else s

  (* add color handling to formatter [ppf] *)
  let set_color_tag_handling ppf =
    let open Format in
    let functions = pp_get_formatter_tag_functions ppf () in
    let functions' = {functions with
      mark_open_tag=(mark_open_tag ~or_else:functions.mark_open_tag);
      mark_close_tag=(mark_close_tag ~or_else:functions.mark_close_tag);
    } in
    pp_set_mark_tags ppf true; (* enable tags *)
    pp_set_formatter_tag_functions ppf functions';
    (* also setup margins *)
    pp_set_margin ppf (pp_get_margin std_formatter());
    ()

  external isatty : out_channel -> bool = "caml_sys_isatty"

  (* reasonable heuristic on whether colors should be enabled *)
  let should_enable_color () =
    let term = try Sys.getenv "TERM" with Not_found -> "" in
    term <> "dumb"
    && term <> ""
    && isatty stderr

  type setting = Auto | Always | Never

  let setup =
    let first = ref true in (* initialize only once *)
    let formatter_l =
      [Format.std_formatter; Format.err_formatter; Format.str_formatter]
    in
    fun o ->
      if !first then (
        first := false;
        Format.set_mark_tags true;
        List.iter set_color_tag_handling formatter_l;
        color_enabled := (match o with
            | Some Always -> true
            | Some Auto -> should_enable_color ()
            | Some Never -> false
            | None -> should_enable_color ())
      );
      ()
end

let normalise_eol s =
  let b = Buffer.create 80 in
    for i = 0 to String.length s - 1 do
      if s.[i] <> '\r' then Buffer.add_char b s.[i]
    done;
    Buffer.contents b

let delete_eol_spaces src =
  let len_src = String.length src in
  let dst = Bytes.create len_src in
  let rec loop i_src i_dst =
    if i_src = len_src then
      i_dst
    else
      match src.[i_src] with
      | ' ' | '\t' ->
        loop_spaces 1 (i_src + 1) i_dst
      | c ->
        Bytes.set dst i_dst c;
        loop (i_src + 1) (i_dst + 1)
  and loop_spaces spaces i_src i_dst =
    if i_src = len_src then
      i_dst
    else
      match src.[i_src] with
      | ' ' | '\t' ->
        loop_spaces (spaces + 1) (i_src + 1) i_dst
      | '\n' ->
        Bytes.set dst i_dst '\n';
        loop (i_src + 1) (i_dst + 1)
      | _ ->
        for n = 0 to spaces do
          Bytes.set dst (i_dst + n) src.[i_src - spaces + n]
        done;
        loop (i_src + 1) (i_dst + spaces + 1)
  in
  let stop = loop 0 0 in
  Bytes.sub_string dst 0 stop

type hook_info = {
  sourcefile : string;
}

exception HookExnWrapper of
    {
      error: exn;
      hook_name: string;
      hook_info: hook_info;
    }

exception HookExn of exn

let raise_direct_hook_exn e = raise (HookExn e)

let fold_hooks list hook_info ast =
  List.fold_left (fun ast (hook_name,f) ->
    try
      f hook_info ast
    with
    | HookExn e -> raise e
    | error -> raise (HookExnWrapper {error; hook_name; hook_info})
       (* when explicit reraise with backtrace will be available,
          it should be used here *)

  ) ast (List.sort compare list)

module type HookSig = sig
  type t

  val add_hook : string -> (hook_info -> t -> t) -> unit
  val apply_hooks : hook_info -> t -> t
end

module MakeHooks(M: sig
    type t
  end) : HookSig with type t = M.t
= struct

  type t = M.t

  let hooks = ref []
  let add_hook name f = hooks := (name, f) :: !hooks
  let apply_hooks sourcefile intf =
    fold_hooks !hooks sourcefile intf
end

end
module Clflags : sig 
#1 "clflags.mli"
val output_name : string option ref
val include_dirs : string list ref

val debug : bool ref
val fast : bool ref

val nopervasives : bool ref
val open_modules : string list ref
val preprocessor : string option ref
val all_ppx : string list ref
val annotations : bool ref
val binary_annotations : bool ref
val noassert : bool ref
val verbose : bool ref
val principal : bool ref
val real_paths : bool ref
val applicative_functors : bool ref
val error_size : int ref
val transparent_modules : bool ref
val dump_source : bool ref
val dump_parsetree : bool ref
val dump_typedtree : bool ref
val dump_rawlambda : bool ref
val dump_lambda : bool ref
val dont_write_files : bool ref
val keep_docs : bool ref
val keep_locs : bool ref


val parse_color_setting : string -> Misc.Color.setting option
val color : Misc.Color.setting option ref

val unboxed_types : bool ref

val reset_dump_state: unit -> unit 


type mli_status =  Mli_exists | Mli_non_exists
val assume_no_mli : mli_status ref
val bs_vscode : bool
val dont_record_crc_unit : string option ref
val bs_gentype : string option ref
val no_assert_false : bool ref
val dump_location : bool ref


end = struct
#1 "clflags.ml"




let  output_name = ref (None : string option) (* -o *)
and include_dirs = ref ([] : string list)(* -I *)
and debug = ref false                   (* -g *)
and fast = ref false                    (* -unsafe *)

and nopervasives = ref false            (* -nopervasives *)
and preprocessor = ref(None : string option) (* -pp *)
and all_ppx = ref ([] : string list)        (* -ppx *)
let annotations = ref false             (* -annot *)
let binary_annotations = ref false      (* -annot *)
and noassert = ref false                (* -noassert *)
and verbose = ref false                 (* -verbose *)
and open_modules = ref []               (* -open *)
and principal = ref false               (* -principal *)
and real_paths = ref true               (* -short-paths *)
and applicative_functors = ref true     (* -no-app-funct *)
and error_size = ref 500                (* -error-size *)
and transparent_modules = ref false     (* -trans-mod *)
let dump_source = ref false             (* -dsource *)
let dump_parsetree = ref false          (* -dparsetree *)
and dump_typedtree = ref false          (* -dtypedtree *)
and dump_rawlambda = ref false          (* -drawlambda *)
and dump_lambda = ref false             (* -dlambda *)


let dont_write_files = ref false        (* set to true under ocamldoc *)


let reset_dump_state () = begin 
  dump_source := false;
  dump_parsetree := false;
  dump_typedtree := false;
  dump_rawlambda := false
end




let keep_docs = ref false              (* -keep-docs *)
let keep_locs = ref true               (* -keep-locs *)




let parse_color_setting = function
  | "auto" -> Some Misc.Color.Auto
  | "always" -> Some Misc.Color.Always
  | "never" -> Some Misc.Color.Never
  | _ -> None
let color = ref None ;; (* -color *)

let unboxed_types = ref false




type mli_status =  Mli_exists | Mli_non_exists
let assume_no_mli = ref Mli_non_exists
let bs_vscode =
    try ignore @@ Sys.getenv "BS_VSCODE" ; true with _ -> false
    (* We get it from environment variable mostly due to
       we don't want to rebuild when flip on or off
    *)
let dont_record_crc_unit : string option ref = ref None
let bs_gentype = ref None
let no_assert_false = ref false
let dump_location = ref true

end
module Bsc_warnings
= struct
#1 "bsc_warnings.ml"
(* Copyright (C) 2020- Hongbo Zhang, Authors of ReScript 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)



(**
   See the meanings of the warning codes here: https://caml.inria.fr/pub/docs/manual-ocaml/comp.html#sec281

   - 30 Two labels or constructors of the same name are defined in two mutually recursive types.
   - 40 Constructor or label name used out of scope.

   - 6 Label omitted in function application.
   - 7 Method overridden.
   - 9 Missing fields in a record pattern. (*Not always desired, in some cases need [@@@warning "+9"] *)
   - 27 Innocuous unused variable: unused variable that is not bound with let nor as, and doesn’t start with an underscore (_) character.
   - 29 Unescaped end-of-line in a string constant (non-portable code).
   - 32 .. 39 Unused blabla
   - 44 Open statement shadows an already defined identifier.
   - 45 Open statement shadows an already defined label or constructor.
   - 48 Implicit elimination of optional arguments. https://caml.inria.fr/mantis/view.php?id=6352
   - 101 (bsb-specific) unsafe polymorphic comparison.
*) 


(*
  The purpose of default warning set is to make it strict while
  not annoy user too much

  -4 Fragile pattern matching: matching that will remain complete even if additional con- structors are added to one of the variant types matched.
  We turn it off since common pattern
   {[
     match x with | A -> .. |  _ -> false
   ]}

   -9 Missing fields in a record pattern.
   only in some special cases that we need all fields being listed

   We encourage people to write code based on type based disambigution
   40,41,42 are enabled for compatiblity reasons  
   -40 Constructor or label name used out of scope
   This is intentional, we should never warn it
   - 41 Ambiguous constructor or label name.
     It is turned off since it prevents such cases below:
   {[
     type a = A |B 
     type b = A | B | C
   ]}
   - 42 Disambiguated constructor or label name (compatibility warning).

   - 50 Unexpected documentation comment.

   - 102 Bs_polymorphic_comparison
*)
let defaults_w = "+a-4-9-20-40-41-42-50-61-102"
let defaults_warn_error = "-a+5+6+101+109";;
(*TODO: add +10*)

end
module Config : sig 
#1 "config.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* System configuration *)

val version: string
        (* The current version number of the system *)

val standard_library: string
        (* The directory containing the standard libraries *)

val syntax_kind : [ `ml | `reason | `rescript ] ref       

val bs_only : bool ref 

val unsafe_empty_array: bool ref 


val load_path: string list ref
        (* Directories in the search path for .cmi and .cmo files *)

val interface_suffix: string ref
        (* Suffix for interface file names *)

val cmi_magic_number: string
        (* Magic number for compiled interface files *)
val ast_intf_magic_number: string
        (* Magic number for file holding an interface syntax tree *)
val ast_impl_magic_number: string
        (* Magic number for file holding an implementation syntax tree *)
val cmt_magic_number: string
        (* Magic number for compiled interface files *)


val default_uncurry : bool ref 
val print_config : out_channel -> unit;;



end = struct
#1 "config.ml"
let version = "4.06.1+BS"
let standard_library =
  let (//) = Filename.concat in   
  Filename.dirname Sys.executable_name // Filename.parent_dir_name //  "lib" // "ocaml"
let standard_library_default = standard_library
let syntax_kind = ref `ml
let bs_only = ref true
let unsafe_empty_array = ref true


and cmi_magic_number = "Caml1999I022"

and ast_impl_magic_number = "Caml1999M022"
and ast_intf_magic_number = "Caml1999N022"
and cmt_magic_number = "Caml1999T022"

let load_path = ref ([] : string list)

let interface_suffix = ref ".mli"


(* This is normally the same as in obj.ml, but we have to define it
   separately because it can differ when we're in the middle of a
   bootstrapping phase. *)



let default_uncurry = ref false

let print_config oc =
  let p name valu = Printf.fprintf oc "%s: %s\n" name valu in
  p "version" version;
  p "standard_library_default" standard_library_default;
  p "standard_library" standard_library;
  (* print the magic number *)

  p "cmi_magic_number" cmi_magic_number;
  p "ast_impl_magic_number" ast_impl_magic_number;
  p "ast_intf_magic_number" ast_intf_magic_number;
  p "cmt_magic_number" cmt_magic_number;
  flush oc;
;;

end
module Warnings : sig 
#1 "warnings.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Pierre Weis && Damien Doligez, INRIA Rocquencourt          *)
(*                                                                        *)
(*   Copyright 1998 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

type loc = {
  loc_start: Lexing.position;
  loc_end: Lexing.position;
  loc_ghost: bool;
}

type t =
  | Comment_start                           (*  1 *)
  | Comment_not_end                         (*  2 *)
  | Deprecated of string * loc * loc        (*  3 *)
  | Fragile_match of string                 (*  4 *)
  | Partial_application                     (*  5 *)
  | Method_override of string list          (*  7 *)
  | Partial_match of string                 (*  8 *)
  | Non_closed_record_pattern of string     (*  9 *)
  | Statement_type                          (* 10 *)
  | Unused_match                            (* 11 *)
  | Unused_pat                              (* 12 *)
  | Instance_variable_override of string list (* 13 *)
  | Illegal_backslash                       (* 14 *)
  | Implicit_public_methods of string list  (* 15 *)
  | Unerasable_optional_argument            (* 16 *)
  | Unused_argument                         (* 20 *)
  | Nonreturning_statement                  (* 21 *)
  | Preprocessor of string                  (* 22 *)
  | Useless_record_with                     (* 23 *)
  | Bad_module_name of string               (* 24 *)
  | All_clauses_guarded                     (* 8, used to be 25 *)
  | Unused_var of string                    (* 26 *)
  | Unused_var_strict of string             (* 27 *)
  | Wildcard_arg_to_constant_constr         (* 28 *)
  | Eol_in_string                           (* 29 *)
  | Duplicate_definitions of string * string * string * string (* 30 *)
  | Unused_value_declaration of string      (* 32 *)
  | Unused_open of string                   (* 33 *)
  | Unused_type_declaration of string       (* 34 *)
  | Unused_for_index of string              (* 35 *)
  | Unused_constructor of string * bool * bool (* 37 *)
  | Unused_extension of string * bool * bool * bool (* 38 *)
  | Unused_rec_flag                         (* 39 *)
  | Ambiguous_name of string list * string list * bool (* 41 *)
  | Nonoptional_label of string             (* 43 *)
  | Open_shadow_identifier of string * string (* 44 *)
  | Open_shadow_label_constructor of string * string (* 45 *)
  | Attribute_payload of string * string    (* 47 *)
  | Eliminated_optional_arguments of string list (* 48 *)
  | No_cmi_file of string * string option   (* 49 *)
  | Bad_docstring of bool                   (* 50 *)
  | Fragile_literal_pattern                 (* 52 *)
  | Misplaced_attribute of string           (* 53 *)
  | Duplicated_attribute of string          (* 54 *)
  | Unreachable_case                        (* 56 *)
  | Ambiguous_pattern of string list        (* 57 *)
  | Unused_module of string                 (* 60 *)
  | Constraint_on_gadt                      (* 62 *)
  | Bs_unused_attribute of string           (* 101 *)
  | Bs_polymorphic_comparison               (* 102 *)
  | Bs_ffi_warning of string                (* 103 *)
  | Bs_derive_warning of string             (* 104 *)
  | Bs_fragile_external of string           (* 105 *)
  | Bs_unimplemented_primitive of string    (* 106 *)
  | Bs_integer_literal_overflow              (* 107 *)
  | Bs_uninterpreted_delimiters of string   (* 108 *)
  | Bs_toplevel_expression_unit             (* 109 *)
;;

val parse_options : bool -> string -> unit;;

val without_warnings : (unit -> 'a) -> 'a

val is_active : t -> bool;;
val is_error : t -> bool;;


type reporting_information =
  { number : int
  ; message : string
  ; is_error : bool
  ; sub_locs : (loc * string) list;
  }

val report : t -> [ `Active of reporting_information | `Inactive ]

exception Errors;;

val check_fatal : unit -> unit;;
val reset_fatal: unit -> unit

val help_warnings: unit -> unit

type state
val backup: unit -> state
val restore: state -> unit
val mk_lazy: (unit -> 'a) -> 'a Lazy.t
    (** Like [Lazy.of_fun], but the function is applied with
        the warning settings at the time [mk_lazy] is called. *)


val has_warnings : bool ref
val nerrors : int ref
val message : t -> string 
val number: t -> int

val reset : unit -> unit
end = struct
#1 "warnings.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Pierre Weis && Damien Doligez, INRIA Rocquencourt          *)
(*                                                                        *)
(*   Copyright 1998 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* When you change this, you need to update the documentation:
   - man/ocamlc.m
   - man/ocamlopt.m
   - manual/manual/cmds/comp.etex
   - manual/manual/cmds/native.etex
*)

type loc = {
  loc_start: Lexing.position;
  loc_end: Lexing.position;
  loc_ghost: bool;
}

type t =
  | Comment_start                           (*  1 *)
  | Comment_not_end                         (*  2 *)
  | Deprecated of string * loc * loc        (*  3 *)
  | Fragile_match of string                 (*  4 *)
  | Partial_application                     (*  5 *)
  | Method_override of string list          (*  7 *)
  | Partial_match of string                 (*  8 *)
  | Non_closed_record_pattern of string     (*  9 *)
  | Statement_type                          (* 10 *)
  | Unused_match                            (* 11 *)
  | Unused_pat                              (* 12 *)
  | Instance_variable_override of string list (* 13 *)
  | Illegal_backslash                       (* 14 *)
  | Implicit_public_methods of string list  (* 15 *)
  | Unerasable_optional_argument            (* 16 *)
  | Unused_argument                         (* 20 *)
  | Nonreturning_statement                  (* 21 *)
  | Preprocessor of string                  (* 22 *)
  | Useless_record_with                     (* 23 *)
  | Bad_module_name of string               (* 24 *)
  | All_clauses_guarded                     (* 8, used to be 25 *)
  | Unused_var of string                    (* 26 *)
  | Unused_var_strict of string             (* 27 *)
  | Wildcard_arg_to_constant_constr         (* 28 *)
  | Eol_in_string                           (* 29 *)
  | Duplicate_definitions of string * string * string * string (*30 *)
  | Unused_value_declaration of string      (* 32 *)
  | Unused_open of string                   (* 33 *)
  | Unused_type_declaration of string       (* 34 *)
  | Unused_for_index of string              (* 35 *)
  | Unused_constructor of string * bool * bool  (* 37 *)
  | Unused_extension of string * bool * bool * bool (* 38 *)
  | Unused_rec_flag                         (* 39 *)
  | Ambiguous_name of string list * string list *  bool    (* 41 *)
  | Nonoptional_label of string             (* 43 *)
  | Open_shadow_identifier of string * string (* 44 *)
  | Open_shadow_label_constructor of string * string (* 45 *)

  | Attribute_payload of string * string    (* 47 *)
  | Eliminated_optional_arguments of string list (* 48 *)
  | No_cmi_file of string * string option   (* 49 *)
  | Bad_docstring of bool                   (* 50 *)
  | Fragile_literal_pattern                 (* 52 *)
  | Misplaced_attribute of string           (* 53 *)
  | Duplicated_attribute of string          (* 54 *)
  
  | Unreachable_case                        (* 56 *)
  | Ambiguous_pattern of string list        (* 57 *)

  | Unused_module of string                 (* 60 *)

  | Constraint_on_gadt                      (* 62 *)
    

  | Bs_unused_attribute of string           (* 101 *)
  | Bs_polymorphic_comparison               (* 102 *)
  | Bs_ffi_warning of string                (* 103 *)
  | Bs_derive_warning of string             (* 104 *)
  | Bs_fragile_external of string           (* 105 *)
  | Bs_unimplemented_primitive of string    (* 106 *)
  | Bs_integer_literal_overflow              (* 107 *)
  | Bs_uninterpreted_delimiters of string   (* 108 *)
  | Bs_toplevel_expression_unit             (* 109 *)

;;

(* If you remove a warning, leave a hole in the numbering.  NEVER change
   the numbers of existing warnings.
   If you add a new warning, add it at the end with a new number;
   do NOT reuse one of the holes.
*)

let number = function
  | Comment_start -> 1
  | Comment_not_end -> 2
  | Deprecated _ -> 3
  | Fragile_match _ -> 4
  | Partial_application -> 5
  | Method_override _ -> 7
  | Partial_match _ -> 8
  | Non_closed_record_pattern _ -> 9
  | Statement_type -> 10
  | Unused_match -> 11
  | Unused_pat -> 12
  | Instance_variable_override _ -> 13
  | Illegal_backslash -> 14
  | Implicit_public_methods _ -> 15
  | Unerasable_optional_argument -> 16
  | Unused_argument -> 20
  | Nonreturning_statement -> 21
  | Preprocessor _ -> 22
  | Useless_record_with -> 23
  | Bad_module_name _ -> 24
  | All_clauses_guarded -> 8 (* used to be 25 *)
  | Unused_var _ -> 26
  | Unused_var_strict _ -> 27
  | Wildcard_arg_to_constant_constr -> 28
  | Eol_in_string -> 29
  | Duplicate_definitions _ -> 30
  | Unused_value_declaration _ -> 32
  | Unused_open _ -> 33
  | Unused_type_declaration _ -> 34
  | Unused_for_index _ -> 35
  | Unused_constructor _ -> 37
  | Unused_extension _ -> 38
  | Unused_rec_flag -> 39
  | Ambiguous_name _ -> 41
  | Nonoptional_label _ -> 43
  | Open_shadow_identifier _ -> 44
  | Open_shadow_label_constructor _ -> 45

  | Attribute_payload _ -> 47
  | Eliminated_optional_arguments _ -> 48
  | No_cmi_file _ -> 49
  | Bad_docstring _ -> 50
  | Fragile_literal_pattern -> 52
  | Misplaced_attribute _ -> 53
  | Duplicated_attribute _ -> 54
  | Unreachable_case -> 56
  | Ambiguous_pattern _ -> 57

  | Unused_module _ -> 60
  
  | Constraint_on_gadt -> 62
  | Bs_unused_attribute _ -> 101
  | Bs_polymorphic_comparison -> 102
  | Bs_ffi_warning _ -> 103
  | Bs_derive_warning _ -> 104
  | Bs_fragile_external _ -> 105
  | Bs_unimplemented_primitive _ -> 106
  | Bs_integer_literal_overflow -> 107
  | Bs_uninterpreted_delimiters _ -> 108
  | Bs_toplevel_expression_unit -> 109
;;

let last_warning_number = 109
let letter_all = 
  let rec loop i = if i = 0 then [] else i :: loop (i - 1) in
  loop last_warning_number

(* Must be the max number returned by the [number] function. *)

let letter = function
  | 'a' -> letter_all
  | 'b' -> []
  | 'c' -> [1; 2]
  | 'd' -> [3]
  | 'e' -> [4]
  | 'f' -> [5]
  | 'g' -> []
  | 'h' -> []
  | 'i' -> []
  | 'j' -> []
  | 'k' -> [32; 33; 34; 35; 36; 37; 38; 39]
  | 'l' -> [6]
  | 'm' -> [7]
  | 'n' -> []
  | 'o' -> []
  | 'p' -> [8]
  | 'q' -> []
  | 'r' -> [9]
  | 's' -> [10]
  | 't' -> []
  | 'u' -> [11; 12]
  | 'v' -> [13]
  | 'w' -> []
  | 'x' -> [14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 30]
  | 'y' -> [26]
  | 'z' -> [27]
  | _ -> assert false
;;

type state =
  {
    active: bool array;
    error: bool array;
  }

let current =
  ref
    {
      active = Array.make (last_warning_number + 1) true;
      error = Array.make (last_warning_number + 1) false;
    }

let disabled = ref false

let without_warnings f =
  Misc.protect_refs [Misc.R(disabled, true)] f

let backup () = !current

let restore x = current := x

let is_active x = not !disabled && (!current).active.(number x);;
let is_error x = not !disabled && (!current).error.(number x);;

let mk_lazy f =
  let state = backup () in
  lazy
    (
      let prev = backup () in
      restore state;
      try
        let r = f () in
        restore prev;
        r
      with exn ->
        restore prev;
        raise exn
    )

let parse_opt error active flags s =
  let set i = flags.(i) <- true in
  let clear i = flags.(i) <- false in
  let set_all i = active.(i) <- true; error.(i) <- true in
  let error () = raise (Arg.Bad "Ill-formed list of warnings") in
  let rec get_num n i =
    if i >= String.length s then i, n
    else match s.[i] with
    | '0'..'9' -> get_num (10 * n + Char.code s.[i] - Char.code '0') (i + 1)
    | _ -> i, n
  in
  let get_range i =
    let i, n1 = get_num 0 i in
    if i + 2 < String.length s && s.[i] = '.' && s.[i + 1] = '.' then
      let i, n2 = get_num 0 (i + 2) in
      if n2 < n1 then error ();
      i, n1, n2
    else
      i, n1, n1
  in
  let rec loop i =
    if i >= String.length s then () else
    match s.[i] with
    | 'A' .. 'Z' ->
       List.iter set (letter (Char.lowercase_ascii s.[i]));
       loop (i+1)
    | 'a' .. 'z' ->
       List.iter clear (letter s.[i]);
       loop (i+1)
    | '+' -> loop_letter_num set (i+1)
    | '-' -> loop_letter_num clear (i+1)
    | '@' -> loop_letter_num set_all (i+1)
    | _ -> error ()
  and loop_letter_num myset i =
    if i >= String.length s then error () else
    match s.[i] with
    | '0' .. '9' ->
        let i, n1, n2 = get_range i in
        for n = n1 to min n2 last_warning_number do myset n done;
        loop i
    | 'A' .. 'Z' ->
       List.iter myset (letter (Char.lowercase_ascii s.[i]));
       loop (i+1)
    | 'a' .. 'z' ->
       List.iter myset (letter s.[i]);
       loop (i+1)
    | _ -> error ()
  in
  loop 0
;;

let parse_options errflag s =
  let error = Array.copy (!current).error in
  let active = Array.copy (!current).active in
  parse_opt error active (if errflag then error else active) s;
  current := {error; active}



let reset () = 
  parse_options false Bsc_warnings.defaults_w;
  parse_options true Bsc_warnings.defaults_warn_error;;

let () = reset ()

let message = function
  | Comment_start -> "this is the start of a comment."
  | Comment_not_end -> "this is not the end of a comment."
  | Deprecated (s, _, _) ->
      (* Reduce \r\n to \n:
           - Prevents any \r characters being printed on Unix when processing
             Windows sources
           - Prevents \r\r\n being generated on Windows, which affects the
             testsuite
       *)
       "deprecated: " ^ Misc.normalise_eol s
  | Fragile_match "" ->
      "this pattern-matching is fragile."
  | Fragile_match s ->
      "this pattern-matching is fragile.\n\
       It will remain exhaustive when constructors are added to type " ^ s ^ "."
  | Partial_application ->
      "this function application is partial,\n\
       maybe some arguments are missing."
  | Method_override [lab] ->
      "the method " ^ lab ^ " is overridden."
  | Method_override (cname :: slist) ->
      String.concat " "
        ("the following methods are overridden by the class"
         :: cname  :: ":\n " :: slist)
  | Method_override [] -> assert false
  | Partial_match "" ->
      "You forgot to handle a possible case here, though we don't have more information on the value."
  | Partial_match s ->
      "You forgot to handle a possible case here, for example: \n  " ^ s
       
  | Non_closed_record_pattern s ->
      "the following labels are not bound in this record pattern: " ^ s ^
      "\nEither bind these labels explicitly or add '; _' to the pattern."
  | Statement_type -> 
    "This expression returns a value, but you're not doing anything with it. If this is on purpose, wrap it with `ignore`."      
      
  | Unused_match -> "this match case is unused."
  | Unused_pat   -> "this sub-pattern is unused."
  | Instance_variable_override [lab] ->
      "the instance variable " ^ lab ^ " is overridden.\n" ^
      "The behaviour changed in ocaml 3.10 (previous behaviour was hiding.)"
  | Instance_variable_override (cname :: slist) ->
      String.concat " "
        ("the following instance variables are overridden by the class"
         :: cname  :: ":\n " :: slist) ^
      "\nThe behaviour changed in ocaml 3.10 (previous behaviour was hiding.)"
  | Instance_variable_override [] -> assert false
  | Illegal_backslash -> "illegal backslash escape in string."
  | Implicit_public_methods l ->
      "the following private methods were made public implicitly:\n "
      ^ String.concat " " l ^ "."
  | Unerasable_optional_argument ->
      String.concat ""
        ["This optional parameter in final position will, in practice, not be optional.\n";
         "  Reorder the parameters so that at least one non-optional one is in final position or, if all parameters are optional, insert a final ().\n\n";
         "  Explanation: If the final parameter is optional, it'd be unclear whether a function application that omits it should be considered fully applied, or partially applied. Imagine writing `let title = display(\"hello!\")`, only to realize `title` isn't your desired result, but a curried call that takes a final optional argument, e.g. `~showDate`.\n\n";
         "  Formal rule: an optional argument is considered intentionally omitted when the 1st positional (i.e. neither labeled nor optional) argument defined after it is passed in."
        ]
  
  | Unused_argument -> "this argument will not be used by the function."
  | Nonreturning_statement ->
      "this statement never returns (or has an unsound type.)"
  | Preprocessor s -> s
  | Useless_record_with ->
     begin match !Config.syntax_kind with 
      | `ml ->
      "all the fields are explicitly listed in this record:\n\
       the 'with' clause is useless."
      | `reason | `rescript ->
        "All the fields are already explicitly listed in this record. You can remove the `...` spread."
     end   
       
  | Bad_module_name (modname) ->
    "This file's name is potentially invalid. The build systems conventionally turn a file name into a module name by upper-casing the first letter. " ^ modname ^ " isn't a valid module name.\n" ^
    "Note: some build systems might e.g. turn kebab-case into CamelCase module, which is why this isn't a hard error."
      
  | All_clauses_guarded ->
      "this pattern-matching is not exhaustive.\n\
       All clauses in this pattern-matching are guarded."
  | Unused_var v | Unused_var_strict v -> "unused variable " ^ v ^ "."
  | Wildcard_arg_to_constant_constr ->
     "wildcard pattern given as argument to a constant constructor"
  | Eol_in_string ->
     "unescaped end-of-line in a string constant (non-portable code)"
  | Duplicate_definitions (kind, cname, tc1, tc2) ->
      Printf.sprintf "the %s %s is defined in both types %s and %s."
        kind cname tc1 tc2
  | Unused_value_declaration v -> "unused value " ^ v ^ "."
  | Unused_open s -> "unused open " ^ s ^ "."
  | Unused_type_declaration s -> "unused type " ^ s ^ "."
  | Unused_for_index s -> "unused for-loop index " ^ s ^ "."
  | Unused_constructor (s, false, false) -> "unused constructor " ^ s ^ "."
  | Unused_constructor (s, true, _) ->
      "constructor " ^ s ^
      " is never used to build values.\n\
        (However, this constructor appears in patterns.)"
  | Unused_constructor (s, false, true) ->
      "constructor " ^ s ^
      " is never used to build values.\n\
        Its type is exported as a private type."
  | Unused_extension (s, is_exception, cu_pattern, cu_privatize) ->
     let kind =
       if is_exception then "exception" else "extension constructor" in
     let name = kind ^ " " ^ s in
     begin match cu_pattern, cu_privatize with
       | false, false -> "unused " ^ name
       | true, _ ->
          name ^
          " is never used to build values.\n\
           (However, this constructor appears in patterns.)"
       | false, true ->
          name ^
          " is never used to build values.\n\
            It is exported or rebound as a private extension."
     end
  | Unused_rec_flag ->
      "unused rec flag."
  | Ambiguous_name ([s], tl, false) ->
      s ^ " belongs to several types: " ^ String.concat " " tl ^
      "\nThe first one was selected. Please disambiguate if this is wrong."
  | Ambiguous_name (_, _, false) -> assert false
  | Ambiguous_name (_slist, tl, true) ->
      "these field labels belong to several types: " ^
      String.concat " " tl ^
      "\nThe first one was selected. Please disambiguate if this is wrong."
  | Nonoptional_label s ->
      "the label " ^ s ^ " is not optional."
  | Open_shadow_identifier (kind, s) ->
      Printf.sprintf
        "this open statement shadows the %s identifier %s (which is later used)"
        kind s
  | Open_shadow_label_constructor (kind, s) ->
      Printf.sprintf
        "this open statement shadows the %s %s (which is later used)"
        kind s
  | Attribute_payload (a, s) ->
      Printf.sprintf "illegal payload for attribute '%s'.\n%s" a s
  | Eliminated_optional_arguments sl ->
      Printf.sprintf "implicit elimination of optional argument%s %s"
        (if List.length sl = 1 then "" else "s")
        (String.concat ", " sl)
  | No_cmi_file(name, None) ->
      "no cmi file was found in path for module " ^ name
  | No_cmi_file(name, Some msg) ->
      Printf.sprintf
        "no valid cmi file was found in path for module %s. %s"
        name msg
  | Bad_docstring unattached ->
      if unattached then "unattached documentation comment (ignored)"
      else "ambiguous documentation comment"
  | Fragile_literal_pattern ->
      Printf.sprintf
        "Code should not depend on the actual values of\n\
         this constructor's arguments. They are only for information\n\
         and may change in future versions. (See manual section 8.5)"
  | Unreachable_case ->
      "this match case is unreachable.\n\
       Consider replacing it with a refutation case '<pat> -> .'"
  | Misplaced_attribute attr_name ->
      Printf.sprintf "the %S attribute cannot appear in this context" attr_name
  | Duplicated_attribute attr_name ->
      Printf.sprintf "the %S attribute is used more than once on this \
          expression"
        attr_name
  | Ambiguous_pattern vars ->
      let msg =
        let vars = List.sort String.compare vars in
        match vars with
        | [] -> assert false
        | [x] -> "variable " ^ x
        | _::_ ->
            "variables " ^ String.concat "," vars in
      Printf.sprintf
        "Ambiguous or-pattern variables under guard;\n\
         %s may match different arguments. (See manual section 8.5)"
        msg
  | Unused_module s -> "unused module " ^ s ^ "."
  | Constraint_on_gadt ->
      "Type constraints do not apply to GADT cases of variant types."


  | Bs_unused_attribute s ->
      "Unused attribute: " ^ s ^ "\n\
      This means such annotation is not annotated properly. \n\
      for example, some annotations is only meaningful in externals \n"
  | Bs_polymorphic_comparison ->
      "Polymorphic comparison introduced (maybe unsafe)"
  | Bs_ffi_warning s ->
      "FFI warning: " ^ s
  | Bs_derive_warning s ->
      "bs.deriving warning: " ^ s 
  | Bs_fragile_external s ->     
    s ^ " : using an empty string as a shorthand to infer the external's name from the value's name is dangerous when refactoring, and therefore deprecated"
  | Bs_unimplemented_primitive s -> 
      "Unimplemented primitive used:" ^ s
  | Bs_integer_literal_overflow -> 
      "Integer literal exceeds the range of representable integers of type int"
  | Bs_uninterpreted_delimiters s -> 
      "Uninterpreted delimiters " ^ s  
  | Bs_toplevel_expression_unit -> 
      "Toplevel expression is expected to have unit type."    
      
;;

let sub_locs = function
  | Deprecated (_, def, use) ->
      [
        def, "Definition";
        use, "Expected signature";
      ]
  | _ -> []

let has_warnings = ref false ;;  
let nerrors = ref 0;;

type reporting_information =
  { number : int
  ; message : string
  ; is_error : bool
  ; sub_locs : (loc * string) list;
  }

let report w =
  match is_active w with
  | false -> `Inactive
  | true ->
     has_warnings := true; 
     if is_error w then incr nerrors;
     `Active { number = number w; message = message w; is_error = is_error w;
               sub_locs = sub_locs w;
             }
;;


exception Errors;;

let reset_fatal () =
  nerrors := 0

let check_fatal () =
  if !nerrors > 0 then begin
    nerrors := 0;
    raise Errors;
  end;
;;

let descriptions =
  [
    1, "Suspicious-looking start-of-comment mark.";
    2, "Suspicious-looking end-of-comment mark.";
    3, "Deprecated feature.";
    4, "Fragile pattern matching: matching that will remain complete even\n\
   \    if additional constructors are added to one of the variant types\n\
   \    matched.";
    5, "Partially applied function: expression whose result has function\n\
   \    type and is ignored.";
    6, "Label omitted in function application.";
    7, "Method overridden.";
    8, "Partial match: missing cases in pattern-matching.";
    9, "Missing fields in a record pattern.";
   10, "Expression on the left-hand side of a sequence that doesn't have \
      type\n\
   \    \"unit\" (and that is not a function, see warning number 5).";
   11, "Redundant case in a pattern matching (unused match case).";
   12, "Redundant sub-pattern in a pattern-matching.";
   13, "Instance variable overridden.";
   14, "Illegal backslash escape in a string constant.";
   15, "Private method made public implicitly.";
   16, "Unerasable optional argument.";
   17, "Undeclared virtual method.";
   18, "Non-principal type.";
   19, "Type without principality.";
   20, "Unused function argument.";
   21, "Non-returning statement.";
   22, "Preprocessor warning.";
   23, "Useless record \"with\" clause.";
   24, "Bad module name: the source file name is not a valid OCaml module \
        name.";
   25, "Deprecated: now part of warning 8.";
   26, "Suspicious unused variable: unused variable that is bound\n\
   \    with \"let\" or \"as\", and doesn't start with an underscore (\"_\")\n\
   \    character.";
   27, "Innocuous unused variable: unused variable that is not bound with\n\
   \    \"let\" nor \"as\", and doesn't start with an underscore (\"_\")\n\
   \    character.";
   28, "Wildcard pattern given as argument to a constant constructor.";
   29, "Unescaped end-of-line in a string constant (non-portable code).";
   30, "Two labels or constructors of the same name are defined in two\n\
   \    mutually recursive types.";
   31, "A module is linked twice in the same executable.";
   32, "Unused value declaration.";
   33, "Unused open statement.";
   34, "Unused type declaration.";
   35, "Unused for-loop index.";
   36, "Unused ancestor variable.";
   37, "Unused constructor.";
   38, "Unused extension constructor.";
   39, "Unused rec flag.";
   40, "Constructor or label name used out of scope.";
   41, "Ambiguous constructor or label name.";
   42, "Disambiguated constructor or label name (compatibility warning).";
   43, "Nonoptional label applied as optional.";
   44, "Open statement shadows an already defined identifier.";
   45, "Open statement shadows an already defined label or constructor.";
   46, "Error in environment variable.";
   47, "Illegal attribute payload.";
   48, "Implicit elimination of optional arguments.";
   49, "Absent cmi file when looking up module alias.";
   50, "Unexpected documentation comment.";
   51, "Warning on non-tail calls if @tailcall present.";
   52, "Fragile constant pattern.";
   53, "Attribute cannot appear in this context";
   54, "Attribute used more than once on an expression";
   55, "Inlining impossible";
   56, "Unreachable case in a pattern-matching (based on type information).";
   57, "Ambiguous or-pattern variables under guard";
   58, "Missing cmx file";
   59, "Assignment to non-mutable value";
   60, "Unused module declaration";
   61, "Unboxable type in primitive declaration";
   62, "Type constraint on GADT type declaration";
    
    
   101, "Unused bs attributes";
   102, "Polymorphic comparison introduced (maybe unsafe)";
   103, "Fragile FFI definitions" ;
   104, "bs.deriving warning with customized message ";
   105, "External name is inferred from val name is unsafe from refactoring when changing value name";
   106, "Unimplemented primitive used:";
   107, "Integer literal exceeds the range of representable integers of type int";
   108, "Uninterpreted delimiters (for unicode)" ;
   109, "Toplevel expression has unit type"   
   
  ]
;;

let help_warnings () =
  List.iter (fun (i, s) -> Printf.printf "%3i %s\n" i s) descriptions;
  print_endline "  A all warnings";
  for i = Char.code 'b' to Char.code 'z' do
    let c = Char.chr i in
    match letter c with
    | [] -> ()
    | [n] ->
        Printf.printf "  %c Alias for warning %i.\n" (Char.uppercase_ascii c) n
    | l ->
        Printf.printf "  %c warnings %s.\n"
          (Char.uppercase_ascii c)
          (String.concat ", " (List.map string_of_int l))
  done;
  exit 0
;;

end
module Location : sig 
#1 "location.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Source code locations (ranges of positions), used in parsetree. *)

open Format

type t = Warnings.loc = {
  loc_start: Lexing.position;
  loc_end: Lexing.position;
  loc_ghost: bool;
}

(** Note on the use of Lexing.position in this module.
   If [pos_fname = ""], then use [!input_name] instead.
   If [pos_lnum = -1], then [pos_bol = 0]. Use [pos_cnum] and
     re-parse the file to get the line and character numbers.
   Else all fields are correct.
*)

val none : t
(** An arbitrary value of type [t]; describes an empty ghost range. *)

val in_file : string -> t
(** Return an empty ghost range located in a given file. *)

val init : Lexing.lexbuf -> string -> unit
(** Set the file name and line number of the [lexbuf] to be the start
    of the named file. *)

val curr : Lexing.lexbuf -> t
(** Get the location of the current token from the [lexbuf]. *)

val symbol_rloc: unit -> t
val symbol_gloc: unit -> t

(** [rhs_loc n] returns the location of the symbol at position [n], starting
  at 1, in the current parser rule. *)
val rhs_loc: int -> t

val input_name: string ref
val set_input_name: string -> unit 
val input_lexbuf: Lexing.lexbuf option ref

val get_pos_info: Lexing.position -> string * int * int (* file, line, char *)
val print_loc: formatter -> t -> unit
val print_error: formatter -> t -> unit
val print_error_cur_file: formatter -> unit -> unit

val prerr_warning: t -> Warnings.t -> unit
val echo_eof: unit -> unit
val reset: unit -> unit

val default_printer : formatter -> t -> unit
val printer : (formatter -> t -> unit) ref

val warning_printer : (t -> formatter -> Warnings.t -> unit) ref
(** Hook for intercepting warnings. *)

val default_warning_printer : t -> formatter -> Warnings.t -> unit
(** Original warning printer for use in hooks. *)

type 'a loc = {
  txt : 'a;
  loc : t;
}

val mknoloc : 'a -> 'a loc
val mkloc : 'a -> t -> 'a loc

val print: formatter -> t -> unit
val print_compact: formatter -> t -> unit
val print_filename: formatter -> string -> unit

val absolute_path: string -> string

val show_filename: string -> string
    (** In -absname mode, return the absolute path for this filename.
        Otherwise, returns the filename unchanged. *)


val absname: bool ref

(** Support for located errors *)

type error =
  {
    loc: t;
    msg: string;
    sub: error list;
    if_highlight: string; (* alternative message if locations are highlighted *)
  }

exception Already_displayed_error
exception Error of error

val error: ?loc:t -> ?sub:error list -> ?if_highlight:string -> string -> error


val print_error_prefix : Format.formatter -> unit
val pp_ksprintf : ?before:(formatter -> unit) -> (string -> 'a) -> ('b, formatter, unit, 'a) format4 -> 'b


val errorf: ?loc:t -> ?sub:error list -> ?if_highlight:string
            -> ('a, Format.formatter, unit, error) format4 -> 'a

val raise_errorf: ?loc:t -> ?sub:error list -> ?if_highlight:string
            -> ('a, Format.formatter, unit, 'b) format4 -> 'a

val error_of_printer: t -> (formatter -> 'a -> unit) -> 'a -> error

val error_of_printer_file: (formatter -> 'a -> unit) -> 'a -> error

val error_of_exn: exn -> [ `Ok of error | `Already_displayed ] option

val register_error_of_exn: (exn -> error option) -> unit
(** Each compiler module which defines a custom type of exception
    which can surface as a user-visible error should register
    a "printer" for this exception using [register_error_of_exn].
    The result of the printer is an [error] value containing
    a location, a message, and optionally sub-messages (each of them
    being located as well). *)

val report_error: formatter -> error -> unit

val error_reporter : (formatter -> error -> unit) ref
(** Hook for intercepting error reports. *)

val default_error_reporter : formatter -> error -> unit
(** Original error reporter for use in hooks. *)

val report_exception: formatter -> exn -> unit
(** Reraise the exception if it is unknown. *)

val deprecated: ?def:t -> ?use:t -> t -> string -> unit

end = struct
#1 "location.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

open Lexing

let absname = ref false
    (* This reference should be in Clflags, but it would create an additional
       dependency and make bootstrapping Camlp4 more difficult. *)

type t = Warnings.loc = { loc_start: position; loc_end: position; loc_ghost: bool };;

let in_file name =
  let loc = {
    pos_fname = name;
    pos_lnum = 1;
    pos_bol = 0;
    pos_cnum = -1;
  } in
  { loc_start = loc; loc_end = loc; loc_ghost = true }
;;

let none = in_file "_none_";;

let curr lexbuf = {
  loc_start = lexbuf.lex_start_p;
  loc_end = lexbuf.lex_curr_p;
  loc_ghost = false
};;

let init lexbuf fname =
  lexbuf.lex_curr_p <- {
    pos_fname = fname;
    pos_lnum = 1;
    pos_bol = 0;
    pos_cnum = 0;
  }
;;

let symbol_rloc () = {
  loc_start = Parsing.symbol_start_pos ();
  loc_end = Parsing.symbol_end_pos ();
  loc_ghost = false;
};;

let symbol_gloc () = {
  loc_start = Parsing.symbol_start_pos ();
  loc_end = Parsing.symbol_end_pos ();
  loc_ghost = true;
};;

let rhs_loc n = {
  loc_start = Parsing.rhs_start_pos n;
  loc_end = Parsing.rhs_end_pos n;
  loc_ghost = false;
};;

let input_name = ref "_none_"
let input_lexbuf = ref (None : lexbuf option)
let set_input_name name =
  if name <> "" then input_name := name
(* Terminal info *)



let num_loc_lines = ref 0 (* number of lines already printed after input *)

(* Print the location in some way or another *)

open Format

let absolute_path s = (* This function could go into Filename *)
  let open Filename in
  let s = if is_relative s then concat (Sys.getcwd ()) s else s in
  (* Now simplify . and .. components *)
  let rec aux s =
    let base = basename s in
    let dir = dirname s in
    if dir = s then dir
    else if base = current_dir_name then aux dir
    else if base = parent_dir_name then dirname (aux dir)
    else concat (aux dir) base
  in
  aux s

let show_filename file =
  let file = if file = "_none_"  then !input_name else file in 
  if !absname then absolute_path file else file

let print_filename ppf file =
  Format.fprintf ppf "%s" (show_filename file)

let reset () =
  num_loc_lines := 0

let (msg_file, msg_line, msg_chars, msg_to, msg_colon) =
  ("File \"", "\", line ", ", characters ", "-", ":")

(* return file, line, char from the given position *)
let get_pos_info pos =
  (pos.pos_fname, pos.pos_lnum, pos.pos_cnum - pos.pos_bol)
;;

let setup_colors () =
  Misc.Color.setup !Clflags.color

let print_loc ppf loc =
  setup_colors ();
  let (file, line, startchar) = get_pos_info loc.loc_start in
  let startchar =  startchar + 1 in 
      
  let endchar = loc.loc_end.pos_cnum - loc.loc_start.pos_cnum + startchar in
  if file = "//toplevel//" then begin
    
      fprintf ppf "Characters %i-%i"
              loc.loc_start.pos_cnum loc.loc_end.pos_cnum
  end else begin
    fprintf ppf "%s@{<loc>%a%s%i" msg_file print_filename file msg_line line;
    if startchar >= 0 then
      fprintf ppf "%s%i%s%i" msg_chars startchar msg_to endchar;
    fprintf ppf "@}"
  end
;;

let default_printer ppf loc =
  setup_colors ();
  
  fprintf ppf "@{<loc>%a@}%s@," print_loc loc msg_colon
;;

let printer = ref default_printer
let print ppf loc = !printer ppf loc

let error_prefix = "Error"
let warning_prefix = "Warning"

let print_error_prefix ppf =
  setup_colors ();
  fprintf ppf "@{<error>%s@}" error_prefix;
;;

let print_compact ppf loc =
  
  begin
    let (file, line, startchar) = get_pos_info loc.loc_start in
    let endchar = loc.loc_end.pos_cnum - loc.loc_start.pos_cnum + startchar in
    fprintf ppf "%a:%i" print_filename file line;
    if startchar >= 0 then fprintf ppf ",%i--%i" startchar endchar
  end
;;

let print_error ppf loc =
  fprintf ppf "%a%t:" print loc print_error_prefix;
;;

let print_error_cur_file ppf () = print_error ppf (in_file !input_name);;

let default_warning_printer loc ppf w =
  match Warnings.report w with
  | `Inactive -> ()
  | `Active { Warnings. number; message; is_error; sub_locs } ->
    setup_colors ();
    fprintf ppf "@[<v>";
    print ppf loc;
    if is_error
    then
      fprintf ppf "%t (%s %d): %s@," print_error_prefix
           (String.uncapitalize_ascii warning_prefix) number message
    else fprintf ppf "@{<warning>%s@} %d: %s@," warning_prefix number message;
    List.iter
      (fun (loc, msg) ->
         if loc <> none then fprintf ppf "  %a  %s@," print loc msg
      )
      sub_locs;
    fprintf ppf "@]"
;;

let warning_printer = ref default_warning_printer ;;

let print_warning loc ppf w = 
  !warning_printer loc ppf w  
;;

let formatter_for_warnings = ref err_formatter;;
let prerr_warning loc w = 
    print_warning loc !formatter_for_warnings w;;

let echo_eof () =
  print_newline ();
  incr num_loc_lines

type 'a loc = {
  txt : 'a;
  loc : t;
}

let mkloc txt loc = { txt ; loc }
let mknoloc txt = mkloc txt none


type error =
  {
    loc: t;
    msg: string;
    sub: error list;
    if_highlight: string; (* alternative message if locations are highlighted *)
  }

let pp_ksprintf ?before k fmt =
  let buf = Buffer.create 64 in
  let ppf = Format.formatter_of_buffer buf in
  Misc.Color.set_color_tag_handling ppf;
  begin match before with
    | None -> ()
    | Some f -> f ppf
  end;
  kfprintf
    (fun _ ->
      pp_print_flush ppf ();
      let msg = Buffer.contents buf in
      k msg)
    ppf fmt

(* Shift the formatter's offset by the length of the error prefix, which
   is always added by the compiler after the message has been formatted *)
let print_phanton_error_prefix ppf =
  Format.pp_print_as ppf (String.length error_prefix + 2 (* ": " *)) ""

let errorf ?(loc = none) ?(sub = []) ?(if_highlight = "") fmt =
  pp_ksprintf
    ~before:print_phanton_error_prefix
    (fun msg -> {loc; msg; sub; if_highlight})
    fmt

let error ?(loc = none) ?(sub = []) ?(if_highlight = "") msg =
  {loc; msg; sub; if_highlight}

let error_of_exn : (exn -> error option) list ref = ref []

let register_error_of_exn f = error_of_exn := f :: !error_of_exn

exception Already_displayed_error = Warnings.Errors

let error_of_exn exn =
  match exn with
  | Already_displayed_error -> Some `Already_displayed
  | _ ->
     let rec loop = function
       | [] -> None
       | f :: rest ->
          match f exn with
          | Some error -> Some (`Ok error)
          | None -> loop rest
     in
     loop !error_of_exn


let rec default_error_reporter ppf ({loc; msg; sub}) =
    fprintf ppf "@[<v>%a %s" print_error loc msg;
    List.iter (Format.fprintf ppf "@,@[<2>%a@]" default_error_reporter) sub;
    fprintf ppf "@]"
    
let error_reporter = ref default_error_reporter

let report_error ppf err =
   !error_reporter ppf err
;;

let error_of_printer loc print x =
  errorf ~loc "%a@?" print x

let error_of_printer_file print x =
  error_of_printer (in_file !input_name) print x

let () =
  register_error_of_exn
    (function
      | Sys_error msg ->
          Some (errorf ~loc:(in_file !input_name)
                "I/O error: %s" msg)

      | Misc.HookExnWrapper {error = e; hook_name;
                             hook_info={Misc.sourcefile}} ->
          let sub = match error_of_exn e with
            | None | Some `Already_displayed -> error (Printexc.to_string e)
            | Some (`Ok err) -> err
          in
          Some
            (errorf ~loc:(in_file sourcefile)
               "In hook %S:" hook_name
               ~sub:[sub])
      | _ -> None
    )

external reraise : exn -> 'a = "%reraise"

let rec report_exception_rec n ppf exn =
  try
    match error_of_exn exn with
    | None -> reraise exn
    | Some `Already_displayed -> ()
    | Some (`Ok err) -> fprintf ppf "@[%a@]@." report_error err
  with exn when n > 0 -> report_exception_rec (n-1) ppf exn

let report_exception ppf exn = report_exception_rec 5 ppf exn


exception Error of error

let () =
  register_error_of_exn
    (function
      | Error e -> Some e
      | _ -> None
    )

let raise_errorf ?(loc = none) ?(sub = []) ?(if_highlight = "") =
  pp_ksprintf
    ~before:print_phanton_error_prefix
    (fun msg -> raise (Error ({loc; msg; sub; if_highlight})))

let deprecated ?(def = none) ?(use = none) loc msg =
  prerr_warning loc (Warnings.Deprecated (msg, def, use))

end
module Asttypes
= struct
#1 "asttypes.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Auxiliary AST types used by parsetree and typedtree. *)

type constant =
    Const_int of int
  | Const_char of char
  | Const_string of string * string option
  | Const_float of string
  | Const_int32 of int32
  | Const_int64 of int64
  | Const_nativeint of nativeint

type rec_flag = Nonrecursive | Recursive

type direction_flag = Upto | Downto

(* Order matters, used in polymorphic comparison *)
type private_flag = Private | Public

type mutable_flag = Immutable | Mutable

type virtual_flag = Virtual | Concrete

type override_flag = Override | Fresh

type closed_flag = Closed | Open

type label = string

type arg_label =
    Nolabel
  | Labelled of string (*  label:T -> ... *)
  | Optional of string (* ?label:T -> ... *)

type 'a loc = 'a Location.loc = {
  txt : 'a;
  loc : Location.t;
}


type variance =
  | Covariant
  | Contravariant
  | Invariant


let same_arg_label (x : arg_label) y = 
  match x with 
  | Nolabel -> y = Nolabel
  | Labelled s ->
    begin match y with 
    | Labelled s0 -> s = s0 
    | _ -> false 
    end 
  | Optional s ->
      begin match y with 
      | Optional s0 -> s = s0
      | _ -> false  
      end  
end
module Longident : sig 
#1 "longident.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Long identifiers, used in parsetree. *)

type t =
    Lident of string
  | Ldot of t * string
  | Lapply of t * t

val flatten: t -> string list
val unflatten: string list -> t option
val last: t -> string
val parse: string -> t

end = struct
#1 "longident.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

type t =
    Lident of string
  | Ldot of t * string
  | Lapply of t * t

let rec flat accu = function
    Lident s -> s :: accu
  | Ldot(lid, s) -> flat (s :: accu) lid
  | Lapply(_, _) -> Misc.fatal_error "Longident.flat"

let flatten lid = flat [] lid

let last = function
    Lident s -> s
  | Ldot(_, s) -> s
  | Lapply(_, _) -> Misc.fatal_error "Longident.last"

let rec split_at_dots s pos =
  try
    let dot = String.index_from s pos '.' in
    String.sub s pos (dot - pos) :: split_at_dots s (dot + 1)
  with Not_found ->
    [String.sub s pos (String.length s - pos)]

let unflatten l =
  match l with
  | [] -> None
  | hd :: tl -> Some (List.fold_left (fun p s -> Ldot(p, s)) (Lident hd) tl)

let parse s =
  match unflatten (split_at_dots s 0) with
  | None -> Lident ""  (* should not happen, but don't put assert false
                          so as not to crash the toplevel (see Genprintval) *)
  | Some v -> v

end
(** Interface as module  *)
module Parsetree
= struct
#1 "parsetree.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Abstract syntax tree produced by parsing *)

open Asttypes

type constant =
    Pconst_integer of string * char option
  (* 3 3l 3L 3n

     Suffixes [g-z][G-Z] are accepted by the parser.
     Suffixes except 'l', 'L' and 'n' are rejected by the typechecker
  *)
  | Pconst_char of char
  (* 'c' *)
  | Pconst_string of string * string option
  (* "constant"
     {delim|other constant|delim}
  *)
  | Pconst_float of string * char option
  (* 3.4 2e5 1.4e-4

     Suffixes [g-z][G-Z] are accepted by the parser.
     Suffixes are rejected by the typechecker.
  *)

(** {1 Extension points} *)

type attribute = string loc * payload
       (* [@id ARG]
          [@@id ARG]

          Metadata containers passed around within the AST.
          The compiler ignores unknown attributes.
       *)

and extension = string loc * payload
      (* [%id ARG]
         [%%id ARG]

         Sub-language placeholder -- rejected by the typechecker.
      *)

and attributes = attribute list

and payload =
  | PStr of structure
  | PSig of signature (* : SIG *)
  | PTyp of core_type  (* : T *)
  | PPat of pattern * expression option  (* ? P  or  ? P when E *)

(** {1 Core language} *)

(* Type expressions *)

and core_type =
    {
     ptyp_desc: core_type_desc;
     ptyp_loc: Location.t;
     ptyp_attributes: attributes; (* ... [@id1] [@id2] *)
    }

and core_type_desc =
  | Ptyp_any
        (*  _ *)
  | Ptyp_var of string
        (* 'a *)
  | Ptyp_arrow of arg_label * core_type * core_type
        (* T1 -> T2       Simple
           ~l:T1 -> T2    Labelled
           ?l:T1 -> T2    Optional
         *)
  | Ptyp_tuple of core_type list
        (* T1 * ... * Tn

           Invariant: n >= 2
        *)
  | Ptyp_constr of Longident.t loc * core_type list
        (* tconstr
           T tconstr
           (T1, ..., Tn) tconstr
         *)
  | Ptyp_object of object_field list * closed_flag
        (* < l1:T1; ...; ln:Tn >     (flag = Closed)
           < l1:T1; ...; ln:Tn; .. > (flag = Open)
         *)
  | Ptyp_class of Longident.t loc * core_type list
        (* #tconstr
           T #tconstr
           (T1, ..., Tn) #tconstr
         *)
  | Ptyp_alias of core_type * string
        (* T as 'a *)
  | Ptyp_variant of row_field list * closed_flag * label list option
        (* [ `A|`B ]         (flag = Closed; labels = None)
           [> `A|`B ]        (flag = Open;   labels = None)
           [< `A|`B ]        (flag = Closed; labels = Some [])
           [< `A|`B > `X `Y ](flag = Closed; labels = Some ["X";"Y"])
         *)
  | Ptyp_poly of string loc list * core_type
        (* 'a1 ... 'an. T

           Can only appear in the following context:

           - As the core_type of a Ppat_constraint node corresponding
             to a constraint on a let-binding: let x : 'a1 ... 'an. T
             = e ...

           - Under Cfk_virtual for methods (not values).

           - As the core_type of a Pctf_method node.

           - As the core_type of a Pexp_poly node.

           - As the pld_type field of a label_declaration.

           - As a core_type of a Ptyp_object node.
         *)

  | Ptyp_package of package_type
        (* (module S) *)
  | Ptyp_extension of extension
        (* [%id] *)

and package_type = Longident.t loc * (Longident.t loc * core_type) list
      (*
        (module S)
        (module S with type t1 = T1 and ... and tn = Tn)
       *)

and row_field =
  | Rtag of label loc * attributes * bool * core_type list
        (* [`A]                   ( true,  [] )
           [`A of T]              ( false, [T] )
           [`A of T1 & .. & Tn]   ( false, [T1;...Tn] )
           [`A of & T1 & .. & Tn] ( true,  [T1;...Tn] )

          - The 2nd field is true if the tag contains a
            constant (empty) constructor.
          - '&' occurs when several types are used for the same constructor
            (see 4.2 in the manual)

          - TODO: switch to a record representation, and keep location
        *)
  | Rinherit of core_type
        (* [ T ] *)

and object_field =
  | Otag of label loc * attributes * core_type
  | Oinherit of core_type

(* Patterns *)

and pattern =
    {
     ppat_desc: pattern_desc;
     ppat_loc: Location.t;
     ppat_attributes: attributes; (* ... [@id1] [@id2] *)
    }

and pattern_desc =
  | Ppat_any
        (* _ *)
  | Ppat_var of string loc
        (* x *)
  | Ppat_alias of pattern * string loc
        (* P as 'a *)
  | Ppat_constant of constant
        (* 1, 'a', "true", 1.0, 1l, 1L, 1n *)
  | Ppat_interval of constant * constant
        (* 'a'..'z'

           Other forms of interval are recognized by the parser
           but rejected by the type-checker. *)
  | Ppat_tuple of pattern list
        (* (P1, ..., Pn)

           Invariant: n >= 2
        *)
  | Ppat_construct of Longident.t loc * pattern option
        (* C                None
           C P              Some P
           C (P1, ..., Pn)  Some (Ppat_tuple [P1; ...; Pn])
         *)
  | Ppat_variant of label * pattern option
        (* `A             (None)
           `A P           (Some P)
         *)
  | Ppat_record of (Longident.t loc * pattern) list * closed_flag
        (* { l1=P1; ...; ln=Pn }     (flag = Closed)
           { l1=P1; ...; ln=Pn; _}   (flag = Open)

           Invariant: n > 0
         *)
  | Ppat_array of pattern list
        (* [| P1; ...; Pn |] *)
  | Ppat_or of pattern * pattern
        (* P1 | P2 *)
  | Ppat_constraint of pattern * core_type
        (* (P : T) *)
  | Ppat_type of Longident.t loc
        (* #tconst *)
  | Ppat_lazy of pattern
        (* lazy P *)
  | Ppat_unpack of string loc
        (* (module P)
           Note: (module P : S) is represented as
           Ppat_constraint(Ppat_unpack, Ptyp_package)
         *)
  | Ppat_exception of pattern
        (* exception P *)
  | Ppat_extension of extension
        (* [%id] *)
  | Ppat_open of Longident.t loc * pattern
        (* M.(P) *)

(* Value expressions *)

and expression =
    {
     pexp_desc: expression_desc;
     pexp_loc: Location.t;
     pexp_attributes: attributes; (* ... [@id1] [@id2] *)
    }

and expression_desc =
  | Pexp_ident of Longident.t loc
        (* x
           M.x
         *)
  | Pexp_constant of constant
        (* 1, 'a', "true", 1.0, 1l, 1L, 1n *)
  | Pexp_let of rec_flag * value_binding list * expression
        (* let P1 = E1 and ... and Pn = EN in E       (flag = Nonrecursive)
           let rec P1 = E1 and ... and Pn = EN in E   (flag = Recursive)
         *)
  | Pexp_function of case list
        (* function P1 -> E1 | ... | Pn -> En *)
  | Pexp_fun of arg_label * expression option * pattern * expression
        (* fun P -> E1                          (Simple, None)
           fun ~l:P -> E1                       (Labelled l, None)
           fun ?l:P -> E1                       (Optional l, None)
           fun ?l:(P = E0) -> E1                (Optional l, Some E0)

           Notes:
           - If E0 is provided, only Optional is allowed.
           - "fun P1 P2 .. Pn -> E1" is represented as nested Pexp_fun.
           - "let f P = E" is represented using Pexp_fun.
         *)
  | Pexp_apply of expression * (arg_label * expression) list
        (* E0 ~l1:E1 ... ~ln:En
           li can be empty (non labeled argument) or start with '?'
           (optional argument).

           Invariant: n > 0
         *)
  | Pexp_match of expression * case list
        (* match E0 with P1 -> E1 | ... | Pn -> En *)
  | Pexp_try of expression * case list
        (* try E0 with P1 -> E1 | ... | Pn -> En *)
  | Pexp_tuple of expression list
        (* (E1, ..., En)

           Invariant: n >= 2
        *)
  | Pexp_construct of Longident.t loc * expression option
        (* C                None
           C E              Some E
           C (E1, ..., En)  Some (Pexp_tuple[E1;...;En])
        *)
  | Pexp_variant of label * expression option
        (* `A             (None)
           `A E           (Some E)
         *)
  | Pexp_record of (Longident.t loc * expression) list * expression option
        (* { l1=P1; ...; ln=Pn }     (None)
           { E0 with l1=P1; ...; ln=Pn }   (Some E0)

           Invariant: n > 0
         *)
  | Pexp_field of expression * Longident.t loc
        (* E.l *)
  | Pexp_setfield of expression * Longident.t loc * expression
        (* E1.l <- E2 *)
  | Pexp_array of expression list
        (* [| E1; ...; En |] *)
  | Pexp_ifthenelse of expression * expression * expression option
        (* if E1 then E2 else E3 *)
  | Pexp_sequence of expression * expression
        (* E1; E2 *)
  | Pexp_while of expression * expression
        (* while E1 do E2 done *)
  | Pexp_for of
      pattern *  expression * expression * direction_flag * expression
        (* for i = E1 to E2 do E3 done      (flag = Upto)
           for i = E1 downto E2 do E3 done  (flag = Downto)
         *)
  | Pexp_constraint of expression * core_type
        (* (E : T) *)
  | Pexp_coerce of expression * core_type option * core_type
        (* (E :> T)        (None, T)
           (E : T0 :> T)   (Some T0, T)
         *)
  | Pexp_send of expression * label loc
        (*  E # m *)
  | Pexp_new of Longident.t loc
        (* new M.c *)
  | Pexp_setinstvar of label loc * expression
        (* x <- 2 *)
  | Pexp_override of (label loc * expression) list
        (* {< x1 = E1; ...; Xn = En >} *)
  | Pexp_letmodule of string loc * module_expr * expression
        (* let module M = ME in E *)
  | Pexp_letexception of extension_constructor * expression
        (* let exception C in E *)
  | Pexp_assert of expression
        (* assert E
           Note: "assert false" is treated in a special way by the
           type-checker. *)
  | Pexp_lazy of expression
        (* lazy E *)
  | Pexp_poly of expression * core_type option
        (* Used for method bodies.

           Can only be used as the expression under Cfk_concrete
           for methods (not values). *)
  | Pexp_object of class_structure
        (* object ... end *)
  | Pexp_newtype of string loc * expression
        (* fun (type t) -> E *)
  | Pexp_pack of module_expr
        (* (module ME)

           (module ME : S) is represented as
           Pexp_constraint(Pexp_pack, Ptyp_package S) *)
  | Pexp_open of override_flag * Longident.t loc * expression
        (* M.(E)
           let open M in E
           let! open M in E *)
  | Pexp_extension of extension
        (* [%id] *)
  | Pexp_unreachable
        (* . *)

and case =   (* (P -> E) or (P when E0 -> E) *)
    {
     pc_lhs: pattern;
     pc_guard: expression option;
     pc_rhs: expression;
    }

(* Value descriptions *)

and value_description =
    {
     pval_name: string loc;
     pval_type: core_type;
     pval_prim: string list;
     pval_attributes: attributes;  (* ... [@@id1] [@@id2] *)
     pval_loc: Location.t;
    }

(*
  val x: T                            (prim = [])
  external x: T = "s1" ... "sn"       (prim = ["s1";..."sn"])
*)

(* Type declarations *)

and type_declaration =
    {
     ptype_name: string loc;
     ptype_params: (core_type * variance) list;
           (* ('a1,...'an) t; None represents  _*)
     ptype_cstrs: (core_type * core_type * Location.t) list;
           (* ... constraint T1=T1'  ... constraint Tn=Tn' *)
     ptype_kind: type_kind;
     ptype_private: private_flag;   (* = private ... *)
     ptype_manifest: core_type option;  (* = T *)
     ptype_attributes: attributes;   (* ... [@@id1] [@@id2] *)
     ptype_loc: Location.t;
    }

(*
  type t                     (abstract, no manifest)
  type t = T0                (abstract, manifest=T0)
  type t = C of T | ...      (variant,  no manifest)
  type t = T0 = C of T | ... (variant,  manifest=T0)
  type t = {l: T; ...}       (record,   no manifest)
  type t = T0 = {l : T; ...} (record,   manifest=T0)
  type t = ..                (open,     no manifest)
*)

and type_kind =
  | Ptype_abstract
  | Ptype_variant of constructor_declaration list
        (* Invariant: non-empty list *)
  | Ptype_record of label_declaration list
        (* Invariant: non-empty list *)
  | Ptype_open

and label_declaration =
    {
     pld_name: string loc;
     pld_mutable: mutable_flag;
     pld_type: core_type;
     pld_loc: Location.t;
     pld_attributes: attributes; (* l : T [@id1] [@id2] *)
    }

(*  { ...; l: T; ... }            (mutable=Immutable)
    { ...; mutable l: T; ... }    (mutable=Mutable)

    Note: T can be a Ptyp_poly.
*)

and constructor_declaration =
    {
     pcd_name: string loc;
     pcd_args: constructor_arguments;
     pcd_res: core_type option;
     pcd_loc: Location.t;
     pcd_attributes: attributes; (* C of ... [@id1] [@id2] *)
    }

and constructor_arguments =
  | Pcstr_tuple of core_type list
  | Pcstr_record of label_declaration list

(*
  | C of T1 * ... * Tn     (res = None,    args = Pcstr_tuple [])
  | C: T0                  (res = Some T0, args = [])
  | C: T1 * ... * Tn -> T0 (res = Some T0, args = Pcstr_tuple)
  | C of {...}             (res = None,    args = Pcstr_record)
  | C: {...} -> T0         (res = Some T0, args = Pcstr_record)
  | C of {...} as t        (res = None,    args = Pcstr_record)
*)

and type_extension =
    {
     ptyext_path: Longident.t loc;
     ptyext_params: (core_type * variance) list;
     ptyext_constructors: extension_constructor list;
     ptyext_private: private_flag;
     ptyext_attributes: attributes;   (* ... [@@id1] [@@id2] *)
    }
(*
  type t += ...
*)

and extension_constructor =
    {
     pext_name: string loc;
     pext_kind : extension_constructor_kind;
     pext_loc : Location.t;
     pext_attributes: attributes; (* C of ... [@id1] [@id2] *)
    }

and extension_constructor_kind =
    Pext_decl of constructor_arguments * core_type option
      (*
         | C of T1 * ... * Tn     ([T1; ...; Tn], None)
         | C: T0                  ([], Some T0)
         | C: T1 * ... * Tn -> T0 ([T1; ...; Tn], Some T0)
       *)
  | Pext_rebind of Longident.t loc
      (*
         | C = D
       *)

(** {1 Class language} *)

(* Type expressions for the class language *)

and class_type =
    {
     pcty_desc: class_type_desc;
     pcty_loc: Location.t;
     pcty_attributes: attributes; (* ... [@id1] [@id2] *)
    }

and class_type_desc =
  | Pcty_constr of Longident.t loc * core_type list
        (* c
           ['a1, ..., 'an] c *)
  | Pcty_signature of class_signature
        (* object ... end *)
  | Pcty_arrow of arg_label * core_type * class_type
        (* T -> CT       Simple
           ~l:T -> CT    Labelled l
           ?l:T -> CT    Optional l
         *)
  | Pcty_extension of extension
        (* [%id] *)
  | Pcty_open of override_flag * Longident.t loc * class_type
        (* let open M in CT *)

and class_signature =
    {
     pcsig_self: core_type;
     pcsig_fields: class_type_field list;
    }
(* object('selfpat) ... end
   object ... end             (self = Ptyp_any)
 *)

and class_type_field =
    {
     pctf_desc: class_type_field_desc;
     pctf_loc: Location.t;
     pctf_attributes: attributes; (* ... [@@id1] [@@id2] *)
    }

and class_type_field_desc =
  | Pctf_inherit of class_type
        (* inherit CT *)
  | Pctf_val of (label loc * mutable_flag * virtual_flag * core_type)
        (* val x: T *)
  | Pctf_method  of (label loc * private_flag * virtual_flag * core_type)
        (* method x: T

           Note: T can be a Ptyp_poly.
         *)
  | Pctf_constraint  of (core_type * core_type)
        (* constraint T1 = T2 *)
  | Pctf_attribute of attribute
        (* [@@@id] *)
  | Pctf_extension of extension
        (* [%%id] *)

and 'a class_infos =
    {
     pci_virt: virtual_flag;
     pci_params: (core_type * variance) list;
     pci_name: string loc;
     pci_expr: 'a;
     pci_loc: Location.t;
     pci_attributes: attributes;  (* ... [@@id1] [@@id2] *)
    }
(* class c = ...
   class ['a1,...,'an] c = ...
   class virtual c = ...

   Also used for "class type" declaration.
*)

and class_description = class_type class_infos

and class_type_declaration = class_type class_infos

(* Value expressions for the class language *)

and class_expr =
    {
     pcl_desc: class_expr_desc;
     pcl_loc: Location.t;
     pcl_attributes: attributes; (* ... [@id1] [@id2] *)
    }

and class_expr_desc =
  | Pcl_constr of Longident.t loc * core_type list
        (* c
           ['a1, ..., 'an] c *)
  | Pcl_structure of class_structure
        (* object ... end *)
  | Pcl_fun of arg_label * expression option * pattern * class_expr
        (* fun P -> CE                          (Simple, None)
           fun ~l:P -> CE                       (Labelled l, None)
           fun ?l:P -> CE                       (Optional l, None)
           fun ?l:(P = E0) -> CE                (Optional l, Some E0)
         *)
  | Pcl_apply of class_expr * (arg_label * expression) list
        (* CE ~l1:E1 ... ~ln:En
           li can be empty (non labeled argument) or start with '?'
           (optional argument).

           Invariant: n > 0
         *)
  | Pcl_let of rec_flag * value_binding list * class_expr
        (* let P1 = E1 and ... and Pn = EN in CE      (flag = Nonrecursive)
           let rec P1 = E1 and ... and Pn = EN in CE  (flag = Recursive)
         *)
  | Pcl_constraint of class_expr * class_type
        (* (CE : CT) *)
  | Pcl_extension of extension
  (* [%id] *)
  | Pcl_open of override_flag * Longident.t loc * class_expr
  (* let open M in CE *)


and class_structure =
    {
     pcstr_self: pattern;
     pcstr_fields: class_field list;
    }
(* object(selfpat) ... end
   object ... end           (self = Ppat_any)
 *)

and class_field =
    {
     pcf_desc: class_field_desc;
     pcf_loc: Location.t;
     pcf_attributes: attributes; (* ... [@@id1] [@@id2] *)
    }

and class_field_desc =
  | Pcf_inherit of unit
        (* inherit CE
           inherit CE as x
           inherit! CE
           inherit! CE as x
         *)
  | Pcf_val of (label loc * mutable_flag * class_field_kind)
        (* val x = E
           val virtual x: T
         *)
  | Pcf_method of (label loc * private_flag * class_field_kind)
        (* method x = E            (E can be a Pexp_poly)
           method virtual x: T     (T can be a Ptyp_poly)
         *)
  | Pcf_constraint of (core_type * core_type)
        (* constraint T1 = T2 *)
  | Pcf_initializer of expression
        (* initializer E *)
  | Pcf_attribute of attribute
        (* [@@@id] *)
  | Pcf_extension of extension
        (* [%%id] *)

and class_field_kind =
  | Cfk_virtual of core_type
  | Cfk_concrete of override_flag * expression



(** {1 Module language} *)

(* Type expressions for the module language *)

and module_type =
    {
     pmty_desc: module_type_desc;
     pmty_loc: Location.t;
     pmty_attributes: attributes; (* ... [@id1] [@id2] *)
    }

and module_type_desc =
  | Pmty_ident of Longident.t loc
        (* S *)
  | Pmty_signature of signature
        (* sig ... end *)
  | Pmty_functor of string loc * module_type option * module_type
        (* functor(X : MT1) -> MT2 *)
  | Pmty_with of module_type * with_constraint list
        (* MT with ... *)
  | Pmty_typeof of module_expr
        (* module type of ME *)
  | Pmty_extension of extension
        (* [%id] *)
  | Pmty_alias of Longident.t loc
        (* (module M) *)

and signature = signature_item list

and signature_item =
    {
     psig_desc: signature_item_desc;
     psig_loc: Location.t;
    }

and signature_item_desc =
  | Psig_value of value_description
        (*
          val x: T
          external x: T = "s1" ... "sn"
         *)
  | Psig_type of rec_flag * type_declaration list
        (* type t1 = ... and ... and tn = ... *)
  | Psig_typext of type_extension
        (* type t1 += ... *)
  | Psig_exception of extension_constructor
        (* exception C of T *)
  | Psig_module of module_declaration
        (* module X : MT *)
  | Psig_recmodule of module_declaration list
        (* module rec X1 : MT1 and ... and Xn : MTn *)
  | Psig_modtype of module_type_declaration
        (* module type S = MT
           module type S *)
  | Psig_open of open_description
        (* open X *)
  | Psig_include of include_description
        (* include MT *)
  | Psig_class of class_description list
        (* class c1 : ... and ... and cn : ... *)
  | Psig_class_type of class_type_declaration list
        (* class type ct1 = ... and ... and ctn = ... *)
  | Psig_attribute of attribute
        (* [@@@id] *)
  | Psig_extension of extension * attributes
        (* [%%id] *)

and module_declaration =
    {
     pmd_name: string loc;
     pmd_type: module_type;
     pmd_attributes: attributes; (* ... [@@id1] [@@id2] *)
     pmd_loc: Location.t;
    }
(* S : MT *)

and module_type_declaration =
    {
     pmtd_name: string loc;
     pmtd_type: module_type option;
     pmtd_attributes: attributes; (* ... [@@id1] [@@id2] *)
     pmtd_loc: Location.t;
    }
(* S = MT
   S       (abstract module type declaration, pmtd_type = None)
*)

and open_description =
    {
     popen_lid: Longident.t loc;
     popen_override: override_flag;
     popen_loc: Location.t;
     popen_attributes: attributes;
    }
(* open! X - popen_override = Override (silences the 'used identifier
                              shadowing' warning)
   open  X - popen_override = Fresh
 *)

and 'a include_infos =
    {
     pincl_mod: 'a;
     pincl_loc: Location.t;
     pincl_attributes: attributes;
    }

and include_description = module_type include_infos
(* include MT *)

and include_declaration = module_expr include_infos
(* include ME *)

and with_constraint =
  | Pwith_type of Longident.t loc * type_declaration
        (* with type X.t = ...

           Note: the last component of the longident must match
           the name of the type_declaration. *)
  | Pwith_module of Longident.t loc * Longident.t loc
        (* with module X.Y = Z *)
  | Pwith_typesubst of Longident.t loc * type_declaration
        (* with type X.t := ..., same format as [Pwith_type] *)
  | Pwith_modsubst of Longident.t loc * Longident.t loc
        (* with module X.Y := Z *)

(* Value expressions for the module language *)

and module_expr =
    {
     pmod_desc: module_expr_desc;
     pmod_loc: Location.t;
     pmod_attributes: attributes; (* ... [@id1] [@id2] *)
    }

and module_expr_desc =
  | Pmod_ident of Longident.t loc
        (* X *)
  | Pmod_structure of structure
        (* struct ... end *)
  | Pmod_functor of string loc * module_type option * module_expr
        (* functor(X : MT1) -> ME *)
  | Pmod_apply of module_expr * module_expr
        (* ME1(ME2) *)
  | Pmod_constraint of module_expr * module_type
        (* (ME : MT) *)
  | Pmod_unpack of expression
        (* (val E) *)
  | Pmod_extension of extension
        (* [%id] *)

and structure = structure_item list

and structure_item =
    {
     pstr_desc: structure_item_desc;
     pstr_loc: Location.t;
    }

and structure_item_desc =
  | Pstr_eval of expression * attributes
        (* E *)
  | Pstr_value of rec_flag * value_binding list
        (* let P1 = E1 and ... and Pn = EN       (flag = Nonrecursive)
           let rec P1 = E1 and ... and Pn = EN   (flag = Recursive)
         *)
  | Pstr_primitive of value_description
        (*  val x: T
            external x: T = "s1" ... "sn" *)
  | Pstr_type of rec_flag * type_declaration list
        (* type t1 = ... and ... and tn = ... *)
  | Pstr_typext of type_extension
        (* type t1 += ... *)
  | Pstr_exception of extension_constructor
        (* exception C of T
           exception C = M.X *)
  | Pstr_module of module_binding
        (* module X = ME *)
  | Pstr_recmodule of module_binding list
        (* module rec X1 = ME1 and ... and Xn = MEn *)
  | Pstr_modtype of module_type_declaration
        (* module type S = MT *)
  | Pstr_open of open_description
        (* open X *)
  | Pstr_class of unit
        (* Dummy AST node *)
  | Pstr_class_type of class_type_declaration list
        (* class type ct1 = ... and ... and ctn = ... *)
  | Pstr_include of include_declaration
        (* include ME *)
  | Pstr_attribute of attribute
        (* [@@@id] *)
  | Pstr_extension of extension * attributes
        (* [%%id] *)

and value_binding =
  {
    pvb_pat: pattern;
    pvb_expr: expression;
    pvb_attributes: attributes;
    pvb_loc: Location.t;
  }

and module_binding =
    {
     pmb_name: string loc;
     pmb_expr: module_expr;
     pmb_attributes: attributes;
     pmb_loc: Location.t;
    }
(* X = ME *)

(** {1 Toplevel} *)

(* Toplevel phrases *)

type toplevel_phrase =
  | Ptop_def of structure
  | Ptop_dir of string * directive_argument
     (* #use, #load ... *)

and directive_argument =
  | Pdir_none
  | Pdir_string of string
  | Pdir_int of string * char option
  | Pdir_ident of Longident.t
  | Pdir_bool of bool

end
module Builtin_attributes : sig 
#1 "builtin_attributes.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                         Alain Frisch, LexiFi                           *)
(*                                                                        *)
(*   Copyright 2012 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* Support for some of the builtin attributes:

   ocaml.deprecated
   ocaml.error
   ocaml.ppwarning
   ocaml.warning
   ocaml.warnerror
   ocaml.explicit_arity (for camlp4/camlp5)
   ocaml.warn_on_literal_pattern
   ocaml.deprecated_mutable
   ocaml.immediate
   ocaml.boxed / ocaml.unboxed
*)


val check_deprecated: Location.t -> Parsetree.attributes -> string -> unit
val check_deprecated_inclusion:
  def:Location.t -> use:Location.t -> Location.t -> Parsetree.attributes ->
  Parsetree.attributes -> string -> unit
val deprecated_of_attrs: Parsetree.attributes -> string option
val deprecated_of_sig: Parsetree.signature -> string option
val deprecated_of_str: Parsetree.structure -> string option

val check_deprecated_mutable:
    Location.t -> Parsetree.attributes -> string -> unit
val check_deprecated_mutable_inclusion:
  def:Location.t -> use:Location.t -> Location.t -> Parsetree.attributes ->
  Parsetree.attributes -> string -> unit

val check_bs_attributes_inclusion:
  (Parsetree.attributes ->
  Parsetree.attributes -> string -> (string*string) option ) ref

val check_duplicated_labels: 
  (Parsetree.label_declaration list ->
    string Asttypes.loc option
  ) ref    
val error_of_extension: Parsetree.extension -> Location.error

val warning_attribute: ?ppwarning:bool -> Parsetree.attribute -> unit
  (** Apply warning settings from the specified attribute.
      "ocaml.warning"/"ocaml.warnerror" (and variants without the prefix)
      are processed and other attributes are ignored.

      Also implement ocaml.ppwarning (unless ~ppwarning:false is
      passed).
  *)

val warning_scope:
  ?ppwarning:bool ->
  Parsetree.attributes -> (unit -> 'a) -> 'a
  (** Execute a function in a new scope for warning settings.  This
      means that the effect of any call to [warning_attribute] during
      the execution of this function will be discarded after
      execution.

      The function also takes a list of attributes which are processed
      with [warning_attribute] in the fresh scope before the function
      is executed.
  *)

val warn_on_literal_pattern: Parsetree.attributes -> bool
val explicit_arity: Parsetree.attributes -> bool


val immediate: Parsetree.attributes -> bool

val has_unboxed: Parsetree.attributes -> bool
val has_boxed: Parsetree.attributes -> bool

end = struct
#1 "builtin_attributes.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                         Alain Frisch, LexiFi                           *)
(*                                                                        *)
(*   Copyright 2012 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

open Asttypes
open Parsetree

let string_of_cst = function
  | Pconst_string(s, _) -> Some s
  | _ -> None

let string_of_payload = function
  | PStr[{pstr_desc=Pstr_eval({pexp_desc=Pexp_constant c},_)}] ->
      string_of_cst c
  | _ -> None

let string_of_opt_payload p =
  match string_of_payload p with
  | Some s -> s
  | None -> ""

let rec error_of_extension ext =
  match ext with
  | ({txt = ("ocaml.error"|"error") as txt; loc}, p) ->
    let rec sub_from inner =
      match inner with
      | {pstr_desc=Pstr_extension (ext, _)} :: rest ->
          error_of_extension ext :: sub_from rest
      | _ :: rest ->
          (Location.errorf ~loc
             "Invalid syntax for sub-error of extension '%s'." txt) ::
            sub_from rest
      | [] -> []
    in
    begin match p with
    | PStr [] -> raise Location.Already_displayed_error
    | PStr({pstr_desc=Pstr_eval
              ({pexp_desc=Pexp_constant(Pconst_string(msg,_))}, _)}::
           {pstr_desc=Pstr_eval
              ({pexp_desc=Pexp_constant(Pconst_string(if_highlight,_))}, _)}::
           inner) ->
        Location.error ~loc ~if_highlight ~sub:(sub_from inner) msg
    | PStr({pstr_desc=Pstr_eval
              ({pexp_desc=Pexp_constant(Pconst_string(msg,_))}, _)}::inner) ->
        Location.error ~loc ~sub:(sub_from inner) msg
    | _ -> Location.errorf ~loc "Invalid syntax for extension '%s'." txt
    end
  | ({txt; loc}, _) ->
      Location.errorf ~loc "Uninterpreted extension '%s'." txt

let cat s1 s2 =
  if s2 = "" then s1 else
 
    if Clflags.bs_vscode then s1 ^ " " ^ s2
    (* 2 spaces indentation for the next line *)
    else s1 ^ "\n  " ^ s2 
    

let rec deprecated_of_attrs = function
  | [] -> None
  | ({txt = "ocaml.deprecated"|"deprecated"; _}, p) :: _ ->
      Some (string_of_opt_payload p)
  | _ :: tl -> deprecated_of_attrs tl

let check_deprecated loc attrs s =
  match deprecated_of_attrs attrs with
  | None -> ()
  | Some txt -> Location.deprecated loc (cat s txt)

let check_deprecated_inclusion ~def ~use loc attrs1 attrs2 s =
  match deprecated_of_attrs attrs1, deprecated_of_attrs attrs2 with
  | None, _ | Some _, Some _ -> ()
  | Some txt, None -> Location.deprecated ~def ~use loc (cat s txt)

let rec deprecated_mutable_of_attrs = function
  | [] -> None
  | ({txt = "ocaml.deprecated_mutable"|"deprecated_mutable"; _}, p) :: _ ->
      Some (string_of_opt_payload p)
  | _ :: tl -> deprecated_mutable_of_attrs tl

let check_deprecated_mutable loc attrs s =
  match deprecated_mutable_of_attrs attrs with
  | None -> ()
  | Some txt ->
      Location.deprecated loc (Printf.sprintf "mutating field %s" (cat s txt))

let check_deprecated_mutable_inclusion ~def ~use loc attrs1 attrs2 s =
  match deprecated_mutable_of_attrs attrs1,
        deprecated_mutable_of_attrs attrs2
  with
  | None, _ | Some _, Some _ -> ()
  | Some txt, None ->
      Location.deprecated ~def ~use loc
        (Printf.sprintf "mutating field %s" (cat s txt))

let check_bs_attributes_inclusion = 
  ref (fun _attrs1 _attrs2 _s -> 
      None
    )  

let check_duplicated_labels : (_ -> _ option ) ref = ref (fun _lbls -> 
  None
)

let rec deprecated_of_sig = function
  | {psig_desc = Psig_attribute a} :: tl ->
      begin match deprecated_of_attrs [a] with
      | None -> deprecated_of_sig tl
      | Some _ as r -> r
      end
  | _ -> None


let rec deprecated_of_str = function
  | {pstr_desc = Pstr_attribute a} :: tl ->
      begin match deprecated_of_attrs [a] with
      | None -> deprecated_of_str tl
      | Some _ as r -> r
      end
  | _ -> None


let warning_attribute ?(ppwarning = true) =
  let process loc txt errflag payload =
    match string_of_payload payload with
    | Some s ->
        begin try Warnings.parse_options errflag s
        with Arg.Bad _ ->
          Location.prerr_warning loc
            (Warnings.Attribute_payload
               (txt, "Ill-formed list of warnings"))
        end
    | None ->
        Location.prerr_warning loc
          (Warnings.Attribute_payload
             (txt, "A single string literal is expected"))
  in
  function
  | ({txt = ("ocaml.warning"|"warning") as txt; loc}, payload) ->
      process loc txt false payload
  | ({txt = ("ocaml.warnerror"|"warnerror") as txt; loc}, payload) ->
      process loc txt true payload
  | {txt="ocaml.ppwarning"|"ppwarning"},
    PStr[{pstr_desc=Pstr_eval({pexp_desc=Pexp_constant
                                   (Pconst_string (s, _))},_);
          pstr_loc}] when ppwarning ->
      Location.prerr_warning pstr_loc (Warnings.Preprocessor s)
  | _ ->
      ()

let warning_scope ?ppwarning attrs f =
  let prev = Warnings.backup () in
  try
    List.iter (warning_attribute ?ppwarning) (List.rev attrs);
    let ret = f () in
    Warnings.restore prev;
    ret
  with exn ->
    Warnings.restore prev;
    raise exn


let warn_on_literal_pattern =
  List.exists
    (function
      | ({txt="ocaml.warn_on_literal_pattern"|"warn_on_literal_pattern"; _}, _)
        -> true
      | _ -> false
    )

let explicit_arity =
  List.exists
    (function
      | ({txt="ocaml.explicit_arity"|"explicit_arity"; _}, _) -> true
      | _ -> false
    )

let immediate =
  List.exists
    (function
      | ({txt="ocaml.immediate"|"immediate"; _}, _) -> true
      | _ -> false
    )

(* The "ocaml.boxed (default)" and "ocaml.unboxed (default)"
   attributes cannot be input by the user, they are added by the
   compiler when applying the default setting. This is done to record
   in the .cmi the default used by the compiler when compiling the
   source file because the default can change between compiler
   invocations. *)

let check l (x, _) = List.mem x.txt l

let has_unboxed attr =
  List.exists (check ["ocaml.unboxed"; "unboxed"])
    attr

let has_boxed attr =
  List.exists (check ["ocaml.boxed"; "boxed"]) attr

end
module Depend : sig 
#1 "depend.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1999 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Module dependencies. *)

module StringSet : Set.S with type elt = string
module StringMap : Map.S with type key = string

type map_tree = Node of StringSet.t * bound_map
and  bound_map = map_tree StringMap.t
val make_leaf : string -> map_tree
val make_node : bound_map -> map_tree
val weaken_map : StringSet.t -> map_tree -> map_tree

val free_structure_names : StringSet.t ref

(* dependencies found by preprocessing tools (plugins) *)
val pp_deps : string list ref

val open_module : bound_map -> Longident.t -> bound_map

val add_use_file : bound_map -> Parsetree.toplevel_phrase list -> unit

val add_signature : bound_map -> Parsetree.signature -> unit

val add_implementation : bound_map -> Parsetree.structure -> unit

val add_implementation_binding : bound_map -> Parsetree.structure -> bound_map
val add_signature_binding : bound_map -> Parsetree.signature -> bound_map

end = struct
#1 "depend.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1999 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

open Asttypes
open Location
open Longident
open Parsetree

let pp_deps = ref []

module StringSet = Set.Make(struct type t = string let compare = compare end)
module StringMap = Map.Make(String)

(* Module resolution map *)
(* Node (set of imports for this path, map for submodules) *)
type map_tree = Node of StringSet.t * bound_map
and  bound_map = map_tree StringMap.t
let bound = Node (StringSet.empty, StringMap.empty)

(*let get_free (Node (s, _m)) = s*)
let get_map (Node (_s, m)) = m
let make_leaf s = Node (StringSet.singleton s, StringMap.empty)
let make_node m =  Node (StringSet.empty, m)
let rec weaken_map s (Node(s0,m0)) =
  Node (StringSet.union s s0, StringMap.map (weaken_map s) m0)
let rec collect_free (Node (s, m)) =
  StringMap.fold (fun _ n -> StringSet.union (collect_free n)) m s

(* Returns the imports required to access the structure at path p *)
(* Only raises Not_found if the head of p is not in the toplevel map *)
let rec lookup_free p m =
  match p with
    [] -> raise Not_found
  | s::p ->
      let Node (f, m') = StringMap.find s m  in
      try lookup_free p m' with Not_found -> f

(* Returns the node corresponding to the structure at path p *)
let rec lookup_map lid m =
  match lid with
    Lident s    -> StringMap.find s m
  | Ldot (l, s) -> StringMap.find s (get_map (lookup_map l m))
  | Lapply _    -> raise Not_found

(* Collect free module identifiers in the a.s.t. *)

let free_structure_names = ref StringSet.empty

let add_names s =
  free_structure_names := StringSet.union s !free_structure_names

let rec add_path bv ?(p=[]) = function
  | Lident s ->
      let free =
        try lookup_free (s::p) bv with Not_found -> StringSet.singleton s
      in
      (*StringSet.iter (fun s -> Printf.eprintf "%s " s) free;
        prerr_endline "";*)
      add_names free
  | Ldot(l, s) -> add_path bv ~p:(s::p) l
  | Lapply(l1, l2) -> add_path bv l1; add_path bv l2

let open_module bv lid =
  match lookup_map lid bv with
  | Node (s, m) ->
      add_names s;
      StringMap.fold StringMap.add m bv
  | exception Not_found ->
      add_path bv lid; bv

let add_parent bv lid =
  match lid.txt with
    Ldot(l, _s) -> add_path bv l
  | _ -> ()

let add = add_parent

let addmodule bv lid = add_path bv lid.txt

let handle_extension ext =
  match (fst ext).txt with
  | "error" | "ocaml.error" ->
    raise (Location.Error
             (Builtin_attributes.error_of_extension ext))
  | _ ->
    ()

let rec add_type bv ty =
  match ty.ptyp_desc with
    Ptyp_any -> ()
  | Ptyp_var _ -> ()
  | Ptyp_arrow(_, t1, t2) -> add_type bv t1; add_type bv t2
  | Ptyp_tuple tl -> List.iter (add_type bv) tl
  | Ptyp_constr(c, tl) -> add bv c; List.iter (add_type bv) tl
  | Ptyp_object (fl, _) ->
      List.iter
       (function Otag (_, _, t) -> add_type bv t
         | Oinherit t -> add_type bv t) fl
  | Ptyp_class(c, tl) -> add bv c; List.iter (add_type bv) tl
  | Ptyp_alias(t, _) -> add_type bv t
  | Ptyp_variant(fl, _, _) ->
      List.iter
        (function Rtag(_,_,_,stl) -> List.iter (add_type bv) stl
          | Rinherit sty -> add_type bv sty)
        fl
  | Ptyp_poly(_, t) -> add_type bv t
  | Ptyp_package pt -> add_package_type bv pt
  | Ptyp_extension e -> handle_extension e

and add_package_type bv (lid, l) =
  add bv lid;
  List.iter (add_type bv) (List.map (fun (_, e) -> e) l)

let add_opt add_fn bv = function
    None -> ()
  | Some x -> add_fn bv x

let add_constructor_arguments bv = function
  | Pcstr_tuple l -> List.iter (add_type bv) l
  | Pcstr_record l -> List.iter (fun l -> add_type bv l.pld_type) l

let add_constructor_decl bv pcd =
  add_constructor_arguments bv pcd.pcd_args;
  Misc.may (add_type bv) pcd.pcd_res

let add_type_declaration bv td =
  List.iter
    (fun (ty1, ty2, _) -> add_type bv ty1; add_type bv ty2)
    td.ptype_cstrs;
  add_opt add_type bv td.ptype_manifest;
  let add_tkind = function
    Ptype_abstract -> ()
  | Ptype_variant cstrs ->
      List.iter (add_constructor_decl bv) cstrs
  | Ptype_record lbls ->
      List.iter (fun pld -> add_type bv pld.pld_type) lbls
  | Ptype_open -> () in
  add_tkind td.ptype_kind

let add_extension_constructor bv ext =
  match ext.pext_kind with
    Pext_decl(args, rty) ->
      add_constructor_arguments bv args;
      Misc.may (add_type bv) rty
  | Pext_rebind lid -> add bv lid

let add_type_extension bv te =
  add bv te.ptyext_path;
  List.iter (add_extension_constructor bv) te.ptyext_constructors

let rec add_class_type bv cty =
  match cty.pcty_desc with
    Pcty_constr(l, tyl) ->
      add bv l; List.iter (add_type bv) tyl
  | Pcty_signature { pcsig_self = ty; pcsig_fields = fieldl } ->
      add_type bv ty;
      List.iter (add_class_type_field bv) fieldl
  | Pcty_arrow(_, ty1, cty2) ->
      add_type bv ty1; add_class_type bv cty2
  | Pcty_extension e -> handle_extension e
  | Pcty_open (_ovf, m, e) ->
      let bv = open_module bv m.txt in add_class_type bv e

and add_class_type_field bv pctf =
  match pctf.pctf_desc with
    Pctf_inherit cty -> add_class_type bv cty
  | Pctf_val(_, _, _, ty) -> add_type bv ty
  | Pctf_method(_, _, _, ty) -> add_type bv ty
  | Pctf_constraint(ty1, ty2) -> add_type bv ty1; add_type bv ty2
  | Pctf_attribute _ -> ()
  | Pctf_extension e -> handle_extension e

let add_class_description bv infos =
  add_class_type bv infos.pci_expr

let add_class_type_declaration = add_class_description

let pattern_bv = ref StringMap.empty

let rec add_pattern bv pat =
  match pat.ppat_desc with
    Ppat_any -> ()
  | Ppat_var _ -> ()
  | Ppat_alias(p, _) -> add_pattern bv p
  | Ppat_interval _
  | Ppat_constant _ -> ()
  | Ppat_tuple pl -> List.iter (add_pattern bv) pl
  | Ppat_construct(c, op) -> add bv c; add_opt add_pattern bv op
  | Ppat_record(pl, _) ->
      List.iter (fun (lbl, p) -> add bv lbl; add_pattern bv p) pl
  | Ppat_array pl -> List.iter (add_pattern bv) pl
  | Ppat_or(p1, p2) -> add_pattern bv p1; add_pattern bv p2
  | Ppat_constraint(p, ty) -> add_pattern bv p; add_type bv ty
  | Ppat_variant(_, op) -> add_opt add_pattern bv op
  | Ppat_type li -> add bv li
  | Ppat_lazy p -> add_pattern bv p
  | Ppat_unpack id -> pattern_bv := StringMap.add id.txt bound !pattern_bv
  | Ppat_open ( m, p) -> let bv = open_module bv m.txt in add_pattern bv p
  | Ppat_exception p -> add_pattern bv p
  | Ppat_extension e -> handle_extension e

let add_pattern bv pat =
  pattern_bv := bv;
  add_pattern bv pat;
  !pattern_bv

let rec add_expr bv exp =
  match exp.pexp_desc with
    Pexp_ident l -> add bv l
  | Pexp_constant _ -> ()
  | Pexp_let(rf, pel, e) ->
      let bv = add_bindings rf bv pel in add_expr bv e
  | Pexp_fun (_, opte, p, e) ->
      add_opt add_expr bv opte; add_expr (add_pattern bv p) e
  | Pexp_function pel ->
      add_cases bv pel
  | Pexp_apply(e, el) ->
      add_expr bv e; List.iter (fun (_,e) -> add_expr bv e) el
  | Pexp_match(e, pel) -> add_expr bv e; add_cases bv pel
  | Pexp_try(e, pel) -> add_expr bv e; add_cases bv pel
  | Pexp_tuple el -> List.iter (add_expr bv) el
  | Pexp_construct(c, opte) -> add bv c; add_opt add_expr bv opte
  | Pexp_variant(_, opte) -> add_opt add_expr bv opte
  | Pexp_record(lblel, opte) ->
      List.iter (fun (lbl, e) -> add bv lbl; add_expr bv e) lblel;
      add_opt add_expr bv opte
  | Pexp_field(e, fld) -> add_expr bv e; add bv fld
  | Pexp_setfield(e1, fld, e2) -> add_expr bv e1; add bv fld; add_expr bv e2
  | Pexp_array el -> List.iter (add_expr bv) el
  | Pexp_ifthenelse(e1, e2, opte3) ->
      add_expr bv e1; add_expr bv e2; add_opt add_expr bv opte3
  | Pexp_sequence(e1, e2) -> add_expr bv e1; add_expr bv e2
  | Pexp_while(e1, e2) -> add_expr bv e1; add_expr bv e2
  | Pexp_for( _, e1, e2, _, e3) ->
      add_expr bv e1; add_expr bv e2; add_expr bv e3
  | Pexp_coerce(e1, oty2, ty3) ->
      add_expr bv e1;
      add_opt add_type bv oty2;
      add_type bv ty3
  | Pexp_constraint(e1, ty2) ->
      add_expr bv e1;
      add_type bv ty2
  | Pexp_send(e, _m) -> add_expr bv e
  | Pexp_new li -> add bv li
  | Pexp_setinstvar(_v, e) -> add_expr bv e
  | Pexp_override sel -> List.iter (fun (_s, e) -> add_expr bv e) sel
  | Pexp_letmodule(id, m, e) ->
      let b = add_module_binding bv m in
      add_expr (StringMap.add id.txt b bv) e
  | Pexp_letexception(_, e) -> add_expr bv e
  | Pexp_assert (e) -> add_expr bv e
  | Pexp_lazy (e) -> add_expr bv e
  | Pexp_poly (e, t) -> add_expr bv e; add_opt add_type bv t
  | Pexp_object { pcstr_self = pat; pcstr_fields = fieldl } ->
      let bv = add_pattern bv pat in List.iter (add_class_field bv) fieldl
  | Pexp_newtype (_, e) -> add_expr bv e
  | Pexp_pack m -> add_module bv m
  | Pexp_open (_ovf, m, e) ->
      let bv = open_module bv m.txt in add_expr bv e
  | Pexp_extension (({ txt = ("ocaml.extension_constructor"|
                              "extension_constructor"); _ },
                     PStr [item]) as e) ->
      begin match item.pstr_desc with
      | Pstr_eval ({ pexp_desc = Pexp_construct (c, None) }, _) -> add bv c
      | _ -> handle_extension e
      end
  | Pexp_extension e -> handle_extension e
  | Pexp_unreachable -> ()

and add_cases bv cases =
  List.iter (add_case bv) cases

and add_case bv {pc_lhs; pc_guard; pc_rhs} =
  let bv = add_pattern bv pc_lhs in
  add_opt add_expr bv pc_guard;
  add_expr bv pc_rhs

and add_bindings recf bv pel =
  let bv' = List.fold_left (fun bv x -> add_pattern bv x.pvb_pat) bv pel in
  let bv = if recf = Recursive then bv' else bv in
  List.iter (fun x -> add_expr bv x.pvb_expr) pel;
  bv'

and add_modtype bv mty =
  match mty.pmty_desc with
    Pmty_ident l -> add bv l
  | Pmty_alias l -> addmodule bv l
  | Pmty_signature s -> add_signature bv s
  | Pmty_functor(id, mty1, mty2) ->
      Misc.may (add_modtype bv) mty1;
      add_modtype (StringMap.add id.txt bound bv) mty2
  | Pmty_with(mty, cstrl) ->
      add_modtype bv mty;
      List.iter
        (function
          | Pwith_type (_, td) -> add_type_declaration bv td
          | Pwith_module (_, lid) -> addmodule bv lid
          | Pwith_typesubst (_, td) -> add_type_declaration bv td
          | Pwith_modsubst (_, lid) -> addmodule bv lid
        )
        cstrl
  | Pmty_typeof m -> add_module bv m
  | Pmty_extension e -> handle_extension e

and add_module_alias bv l =
  try
    add_parent bv l;
    lookup_map l.txt bv
  with Not_found ->
    match l.txt with
      Lident s -> make_leaf s
    | _ -> addmodule bv l; bound (* cannot delay *)

and add_modtype_binding bv mty =
  if not !Clflags.transparent_modules then add_modtype bv mty;
  match mty.pmty_desc with
    Pmty_alias l ->
      add_module_alias bv l
  | Pmty_signature s ->
      make_node (add_signature_binding bv s)
  | Pmty_typeof modl ->
      add_module_binding bv modl
  | _ ->
      if !Clflags.transparent_modules then add_modtype bv mty; bound

and add_signature bv sg =
  ignore (add_signature_binding bv sg)

and add_signature_binding bv sg =
  snd (List.fold_left add_sig_item (bv, StringMap.empty) sg)

and add_sig_item (bv, m) item =
  match item.psig_desc with
    Psig_value vd ->
      add_type bv vd.pval_type; (bv, m)
  | Psig_type (_, dcls) ->
      List.iter (add_type_declaration bv) dcls; (bv, m)
  | Psig_typext te ->
      add_type_extension bv te; (bv, m)
  | Psig_exception pext ->
      add_extension_constructor bv pext; (bv, m)
  | Psig_module pmd ->
      let m' = add_modtype_binding bv pmd.pmd_type in
      let add = StringMap.add pmd.pmd_name.txt m' in
      (add bv, add m)
  | Psig_recmodule decls ->
      let add =
        List.fold_right (fun pmd -> StringMap.add pmd.pmd_name.txt bound)
                        decls
      in
      let bv' = add bv and m' = add m in
      List.iter (fun pmd -> add_modtype bv' pmd.pmd_type) decls;
      (bv', m')
  | Psig_modtype x ->
      begin match x.pmtd_type with
        None -> ()
      | Some mty -> add_modtype bv mty
      end;
      (bv, m)
  | Psig_open od ->
      (open_module bv od.popen_lid.txt, m)
  | Psig_include incl ->
      let Node (s, m') = add_modtype_binding bv incl.pincl_mod in
      add_names s;
      let add = StringMap.fold StringMap.add m' in
      (add bv, add m)
  | Psig_class cdl ->
      List.iter (add_class_description bv) cdl; (bv, m)
  | Psig_class_type cdtl ->
      List.iter (add_class_type_declaration bv) cdtl; (bv, m)
  | Psig_attribute _ -> (bv, m)
  | Psig_extension (e, _) ->
      handle_extension e;
      (bv, m)

and add_module_binding bv modl =
  if not !Clflags.transparent_modules then add_module bv modl;
  match modl.pmod_desc with
    Pmod_ident l ->
      begin try
        add_parent bv l;
        lookup_map l.txt bv
      with Not_found ->
        match l.txt with
          Lident s -> make_leaf s
        | _ ->  addmodule bv l; bound
      end
  | Pmod_structure s ->
      make_node (snd (add_structure_binding bv s))
  | _ ->
      if !Clflags.transparent_modules then add_module bv modl; bound

and add_module bv modl =
  match modl.pmod_desc with
    Pmod_ident l -> addmodule bv l
  | Pmod_structure s -> ignore (add_structure bv s)
  | Pmod_functor(id, mty, modl) ->
      Misc.may (add_modtype bv) mty;
      add_module (StringMap.add id.txt bound bv) modl
  | Pmod_apply(mod1, mod2) ->
      add_module bv mod1; add_module bv mod2
  | Pmod_constraint(modl, mty) ->
      add_module bv modl; add_modtype bv mty
  | Pmod_unpack(e) ->
      add_expr bv e
  | Pmod_extension e ->
      handle_extension e

and add_structure bv item_list =
  let (bv, m) = add_structure_binding bv item_list in
  add_names (collect_free (make_node m));
  bv

and add_structure_binding bv item_list =
  List.fold_left add_struct_item (bv, StringMap.empty) item_list

and add_struct_item (bv, m) item : _ StringMap.t * _ StringMap.t =
  match item.pstr_desc with
    Pstr_eval (e, _attrs) ->
      add_expr bv e; (bv, m)
  | Pstr_value(rf, pel) ->
      let bv = add_bindings rf bv pel in (bv, m)
  | Pstr_primitive vd ->
      add_type bv vd.pval_type; (bv, m)
  | Pstr_type (_, dcls) ->
      List.iter (add_type_declaration bv) dcls; (bv, m)
  | Pstr_typext te ->
      add_type_extension bv te;
      (bv, m)
  | Pstr_exception pext ->
      add_extension_constructor bv pext; (bv, m)
  | Pstr_module x ->
      let b = add_module_binding bv x.pmb_expr in
      let add = StringMap.add x.pmb_name.txt b in
      (add bv, add m)
  | Pstr_recmodule bindings ->
      let add =
        List.fold_right (fun x -> StringMap.add x.pmb_name.txt bound) bindings
      in
      let bv' = add bv and m = add m in
      List.iter
        (fun x -> add_module bv' x.pmb_expr)
        bindings;
      (bv', m)
  | Pstr_modtype x ->
      begin match x.pmtd_type with
        None -> ()
      | Some mty -> add_modtype bv mty
      end;
      (bv, m)
  | Pstr_open od ->
      (open_module bv od.popen_lid.txt, m)
  | Pstr_class () ->
      (bv,m)
  | Pstr_class_type cdtl ->
      List.iter (add_class_type_declaration bv) cdtl; (bv, m)
  | Pstr_include incl ->
      let Node (s, m') = add_module_binding bv incl.pincl_mod in
      add_names s;
      let add = StringMap.fold StringMap.add m' in
      (add bv, add m)
  | Pstr_attribute _ -> (bv, m)
  | Pstr_extension (e, _) ->
      handle_extension e;
      (bv, m)

and add_use_file bv top_phrs =
  ignore (List.fold_left add_top_phrase bv top_phrs)

and add_implementation bv l =
  if !Clflags.transparent_modules then
    ignore (add_structure_binding bv l)
  else ignore (add_structure bv l)

and add_implementation_binding bv l =
  snd (add_structure_binding bv l)

and add_top_phrase bv = function
  | Ptop_def str -> add_structure bv str
  | Ptop_dir (_, _) -> bv


and add_class_field bv pcf =
  match pcf.pcf_desc with
    Pcf_inherit() -> ()
  | Pcf_val(_, _, Cfk_concrete (_, e))
  | Pcf_method(_, _, Cfk_concrete (_, e)) -> add_expr bv e
  | Pcf_val(_, _, Cfk_virtual ty)
  | Pcf_method(_, _, Cfk_virtual ty) -> add_type bv ty
  | Pcf_constraint(ty1, ty2) -> add_type bv ty1; add_type bv ty2
  | Pcf_initializer e -> add_expr bv e
  | Pcf_attribute _ -> ()
  | Pcf_extension e -> handle_extension e


end
module Ext_array : sig 
#1 "ext_array.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)






(** Some utilities for {!Array} operations *)
val reverse_range : 'a array -> int -> int -> unit
val reverse_in_place : 'a array -> unit
val reverse : 'a array -> 'a array 
val reverse_of_list : 'a list -> 'a array

val filter : 
  'a array -> 
  ('a -> bool) ->   
  'a array

val filter_map : 
  'a array -> 
  ('a -> 'b option) -> 
  'b array

val range : int -> int -> int array

val map2i : (int -> 'a -> 'b -> 'c ) -> 'a array -> 'b array -> 'c array

val to_list_f : 
  'a array -> 
  ('a -> 'b) -> 
  'b list 

val to_list_map : 
  'a array -> ('a -> 'b option) -> 'b list 

val to_list_map_acc : 
  'a array -> 
  'b list -> 
  ('a -> 'b option) -> 
  'b list 

val of_list_map : 
  'a list -> 
  ('a -> 'b) -> 
  'b array 

val rfind_with_index : 'a array -> ('a -> 'b -> bool) -> 'b -> int



type 'a split = No_split | Split of  'a array *  'a array 


val find_and_split : 
  'a array ->
  ('a -> 'b -> bool) ->
  'b -> 'a split

val exists : 
  'a array -> 
  ('a -> bool) ->  
  bool 

val is_empty : 'a array -> bool 

val for_all2_no_exn : 
  'a array ->
  'b array -> 
  ('a -> 'b -> bool) -> 
  bool

val for_alli : 
  'a array -> 
  (int -> 'a -> bool) -> 
  bool 

val map :   
  'a array -> 
  ('a -> 'b) -> 
  'b array

val iter :
  'a array -> 
  ('a -> unit) -> 
  unit

val fold_left :   
  'b array -> 
  'a -> 
  ('a -> 'b -> 'a) ->   
  'a

val get_or :   
  'a array -> 
  int -> 
  (unit -> 'a) -> 
  'a
end = struct
#1 "ext_array.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)



external (.!()) : 'a array -> int -> 'a = "%array_unsafe_get" 

external (.!()<-) : 'a array -> int -> 'a -> unit  = "%array_unsafe_set" 

let reverse_range a i len =
  if len = 0 then ()
  else
    for k = 0 to (len-1)/2 do
      let t = a.! (i+k) in
      a.!(i+k) <-   a.!(i+len-1-k);
      a.!(i+len-1-k) <- t;
    done


let reverse_in_place a =
  reverse_range a 0 (Array.length a)

let reverse a =
  let b_len = Array.length a in
  if b_len = 0 then [||] else  
    let b = Array.copy a in  
    for i = 0 to  b_len - 1 do
      Array.unsafe_set b i (Array.unsafe_get a (b_len - 1 -i )) 
    done;
    b  


let reverse_of_list = function
    [] -> [||]
  | hd::tl ->
      let len =  List.length tl in 
      let a = Array.make (len + 1) hd in
      let rec fill i = function
          [] -> a
        | hd::tl -> Array.unsafe_set a i hd; fill (i-1) tl in
      fill (len - 1) tl

let filter a f =
  let arr_len = Array.length a in
  let rec aux acc i =
    if i = arr_len 
    then reverse_of_list acc 
    else
      let v = Array.unsafe_get a i in
      if f  v then 
        aux (v::acc) (i+1)
      else aux acc (i + 1) 
  in aux [] 0


let filter_map a (f : _ -> _ option)  =
  let arr_len = Array.length a in
  let rec aux acc i =
    if i = arr_len 
    then reverse_of_list acc 
    else
      let v = Array.unsafe_get a i in
      match f  v with 
      | Some v -> 
        aux (v::acc) (i+1)
      | None -> 
        aux acc (i + 1) 
  in aux [] 0

let range from to_ =
  if from > to_ then invalid_arg "Ext_array.range"  
  else Array.init (to_ - from + 1) (fun i -> i + from)

let map2i f a b = 
  let len = Array.length a in 
  if len <> Array.length b then 
    invalid_arg "Ext_array.map2i"  
  else
    Array.mapi (fun i a -> f i  a ( Array.unsafe_get b i )) a 

let rec tolist_f_aux a f  i res =
  if i < 0 then res else
    let v = Array.unsafe_get a i in
    tolist_f_aux a f  (i - 1)
      (f v :: res)

let to_list_f a f = tolist_f_aux a f (Array.length a  - 1) []

let rec tolist_aux a f  i res =
  if i < 0 then res else
    tolist_aux a f  (i - 1)
      (match f a.!(i) with
       | Some v -> v :: res
       | None -> res) 

let to_list_map a f  = 
  tolist_aux a f (Array.length a - 1) []

let to_list_map_acc a acc f = 
  tolist_aux a f (Array.length a - 1) acc


let of_list_map a f = 
  match a with 
  | [] -> [||]
  | [a0] -> 
    let b0 = f a0 in
    [|b0|]
  | [a0;a1] -> 
    let b0 = f a0 in  
    let b1 = f a1 in 
    [|b0;b1|]
  | [a0;a1;a2] -> 
    let b0 = f a0 in  
    let b1 = f a1 in 
    let b2 = f a2 in  
    [|b0;b1;b2|]
  | [a0;a1;a2;a3] -> 
    let b0 = f a0 in  
    let b1 = f a1 in 
    let b2 = f a2 in  
    let b3 = f a3 in 
    [|b0;b1;b2;b3|]
  | [a0;a1;a2;a3;a4] -> 
    let b0 = f a0 in  
    let b1 = f a1 in 
    let b2 = f a2 in  
    let b3 = f a3 in 
    let b4 = f a4 in 
    [|b0;b1;b2;b3;b4|]

  | a0::a1::a2::a3::a4::tl -> 
    let b0 = f a0 in  
    let b1 = f a1 in 
    let b2 = f a2 in  
    let b3 = f a3 in 
    let b4 = f a4 in 
    let len = List.length tl + 5 in 
    let arr = Array.make len b0  in
    Array.unsafe_set arr 1 b1 ;  
    Array.unsafe_set arr 2 b2 ;
    Array.unsafe_set arr 3 b3 ; 
    Array.unsafe_set arr 4 b4 ; 
    let rec fill i = function
      | [] -> arr 
      | hd :: tl -> 
        Array.unsafe_set arr i (f hd); 
        fill (i + 1) tl in 
    fill 5 tl

(**
   {[
     # rfind_with_index [|1;2;3|] (=) 2;;
     - : int = 1
               # rfind_with_index [|1;2;3|] (=) 1;;
     - : int = 0
               # rfind_with_index [|1;2;3|] (=) 3;;
     - : int = 2
               # rfind_with_index [|1;2;3|] (=) 4;;
     - : int = -1
   ]}
*)
let rfind_with_index arr cmp v = 
  let len = Array.length arr in 
  let rec aux i = 
    if i < 0 then i
    else if  cmp (Array.unsafe_get arr i) v then i
    else aux (i - 1) in 
  aux (len - 1)

type 'a split = No_split | Split of  'a array *  'a array 


let find_with_index arr cmp v = 
  let len  = Array.length arr in 
  let rec aux i len = 
    if i >= len then -1 
    else if cmp (Array.unsafe_get arr i ) v then i 
    else aux (i + 1) len in 
  aux 0 len

let find_and_split arr cmp v : _ split = 
  let i = find_with_index arr cmp v in 
  if i < 0 then 
    No_split
  else
    Split (Array.sub arr 0 i, Array.sub arr (i + 1 ) (Array.length arr - i - 1))

(** TODO: available since 4.03, use {!Array.exists} *)

let exists a p =
  let n = Array.length a in
  let rec loop i =
    if i = n then false
    else if p (Array.unsafe_get a i) then true
    else loop (succ i) in
  loop 0


let is_empty arr =
  Array.length arr = 0


let rec unsafe_loop index len p xs ys  = 
  if index >= len then true
  else 
    p 
      (Array.unsafe_get xs index)
      (Array.unsafe_get ys index) &&
    unsafe_loop (succ index) len p xs ys 

let for_alli a p =
  let n = Array.length a in
  let rec loop i =
    if i = n then true
    else if p i (Array.unsafe_get a i) then loop (succ i)
    else false in
  loop 0

let for_all2_no_exn xs ys p = 
  let len_xs = Array.length xs in 
  let len_ys = Array.length ys in 
  len_xs = len_ys &&    
  unsafe_loop 0 len_xs p xs ys


let map a f =
  let open Array in 
  let l = length a in
  if l = 0 then [||] else begin
    let r = make l (f(unsafe_get a 0)) in
    for i = 1 to l - 1 do
      unsafe_set r i (f(unsafe_get a i))
    done;
    r
  end

let iter a f =
  let open Array in 
  for i = 0 to length a - 1 do f(unsafe_get a i) done


let fold_left a x f =
  let open Array in 
  let r = ref x in    
  for i = 0 to length a - 1 do
    r := f !r (unsafe_get a i)
  done;
  !r

let get_or arr i cb =     
  if i >=0 && i < Array.length arr then 
    Array.unsafe_get arr i 
  else cb ()  
end
module Ext_list : sig 
#1 "ext_list.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

val map : 'a list -> ('a -> 'b) -> 'b list

val map_combine : 'a list -> 'b list -> ('a -> 'c) -> ('c * 'b) list

val combine_array : 'a array -> 'b list -> ('a -> 'c) -> ('c * 'b) list

val combine_array_append :
  'a array -> 'b list -> ('c * 'b) list -> ('a -> 'c) -> ('c * 'b) list

val has_string : string list -> string -> bool

val map_split_opt :
  'a list -> ('a -> 'b option * 'c option) -> 'b list * 'c list

val mapi : 'a list -> (int -> 'a -> 'b) -> 'b list

val mapi_append : 'a list -> (int -> 'a -> 'b) -> 'b list -> 'b list

val map_snd : ('a * 'b) list -> ('b -> 'c) -> ('a * 'c) list

val map_last : 'a list -> (bool -> 'a -> 'b) -> 'b list
(** [map_last f xs ]
    will pass [true] to [f] for the last element, 
    [false] otherwise. 
    For empty list, it returns empty
*)

val last : 'a list -> 'a
(** [last l]
    return the last element
    raise if the list is empty
*)

val append : 'a list -> 'a list -> 'a list

val append_one : 'a list -> 'a -> 'a list

val map_append : 'b list -> 'a list -> ('b -> 'a) -> 'a list

val fold_right : 'a list -> 'b -> ('a -> 'b -> 'b) -> 'b

val fold_right2 : 'a list -> 'b list -> 'c -> ('a -> 'b -> 'c -> 'c) -> 'c

val fold_right3 :
  'a list -> 'b list -> 'c list -> 'd -> ('a -> 'b -> 'c -> 'd -> 'd) -> 'd

val map2 : 'a list -> 'b list -> ('a -> 'b -> 'c) -> 'c list

val fold_left_with_offset :
  'a list -> 'acc -> int -> ('a -> 'acc -> int -> 'acc) -> 'acc

val filter_map : 'a list -> ('a -> 'b option) -> 'b list
(** @unused *)

val exclude : 'a list -> ('a -> bool) -> 'a list
(** [exclude p l] is the opposite of [filter p l] *)

val exclude_with_val : 'a list -> ('a -> bool) -> 'a list option
(** [excludes p l]
    return a tuple [excluded,newl]
    where [exluded] is true indicates that at least one  
    element is removed,[newl] is the new list where all [p x] for [x] is false

*)

val same_length : 'a list -> 'b list -> bool

val init : int -> (int -> 'a) -> 'a list

val split_at : 'a list -> int -> 'a list * 'a list
(** [split_at n l]
    will split [l] into two lists [a,b], [a] will be of length [n], 
    otherwise, it will raise
*)

val split_at_last : 'a list -> 'a list * 'a
(** [split_at_last l]
    It is equivalent to [split_at (List.length l - 1) l ]
*)

val filter_mapi : 'a list -> ('a -> int -> 'b option) -> 'b list

val filter_map2 : 'a list -> 'b list -> ('a -> 'b -> 'c option) -> 'c list

val length_compare : 'a list -> int -> [ `Gt | `Eq | `Lt ]

val length_ge : 'a list -> int -> bool

(**

   {[length xs = length ys + n ]}
   input n should be positive 
   TODO: input checking
*)

val length_larger_than_n : 'a list -> 'a list -> int -> bool

val rev_map_append : 'a list -> 'b list -> ('a -> 'b) -> 'b list
(**
   [rev_map_append f l1 l2]
   [map f l1] and reverse it to append [l2]
   This weird semantics is due to it is the most efficient operation
   we can do
*)

val flat_map : 'a list -> ('a -> 'b list) -> 'b list

val flat_map_append : 'a list -> 'b list -> ('a -> 'b list) -> 'b list

val stable_group : 'a list -> ('a -> 'a -> bool) -> 'a list list
(**
    [stable_group eq lst]
    Example:
    Input:
   {[
     stable_group (=) [1;2;3;4;3]
   ]}
    Output:
   {[
     [[1];[2];[4];[3;3]]
   ]}
    TODO: this is O(n^2) behavior 
    which could be improved later
*)

val drop : 'a list -> int -> 'a list
(** [drop n list]
    raise when [n] is negative
    raise when list's length is less than [n]
*)

val find_first : 'a list -> ('a -> bool) -> 'a option

val find_first_not : 'a list -> ('a -> bool) -> 'a option
(** [find_first_not p lst ]
    if all elements in [lst] pass, return [None] 
    otherwise return the first element [e] as [Some e] which
    fails the predicate
*)

(** [find_opt f l] returns [None] if all return [None],  
    otherwise returns the first one. 
*)

val find_opt : 'a list -> ('a -> 'b option) -> 'b option

val find_def : 'a list -> ('a -> 'b option) -> 'b -> 'b

val rev_iter : 'a list -> ('a -> unit) -> unit

val iter : 'a list -> ('a -> unit) -> unit

val for_all : 'a list -> ('a -> bool) -> bool

val for_all_snd : ('a * 'b) list -> ('b -> bool) -> bool

val for_all2_no_exn : 'a list -> 'b list -> ('a -> 'b -> bool) -> bool
(** [for_all2_no_exn p xs ys]
    return [true] if all satisfied,
    [false] otherwise or length not equal
*)

val split_map : 'a list -> ('a -> 'b * 'c) -> 'b list * 'c list
(** [f] is applied follow the list order *)

val reduce_from_left : 'a list -> ('a -> 'a -> 'a) -> 'a
(** [fn] is applied from left to right *)

val sort_via_array : 'a list -> ('a -> 'a -> int) -> 'a list

val sort_via_arrayf : 'a list -> ('a -> 'a -> int) -> ('a -> 'b) -> 'b list

val assoc_by_string : (string * 'a) list -> string -> 'a option -> 'a
(** [assoc_by_string default key lst]
    if  [key] is found in the list  return that val,
    other unbox the [default], 
    otherwise [assert false ]
*)

val assoc_by_int : (int * 'a) list -> int -> 'a option -> 'a

val nth_opt : 'a list -> int -> 'a option

val iter_snd : ('a * 'b) list -> ('b -> unit) -> unit

val iter_fst : ('a * 'b) list -> ('a -> unit) -> unit

val exists : 'a list -> ('a -> bool) -> bool

val exists_fst : ('a * 'b) list -> ('a -> bool) -> bool

val exists_snd : ('a * 'b) list -> ('b -> bool) -> bool

val concat_append : 'a list list -> 'a list -> 'a list

val fold_left2 : 'a list -> 'b list -> 'c -> ('a -> 'b -> 'c -> 'c) -> 'c

val fold_left : 'a list -> 'b -> ('b -> 'a -> 'b) -> 'b

val singleton_exn : 'a list -> 'a

val mem_string : string list -> string -> bool

val filter : 'a list -> ('a -> bool) -> 'a list

val array_list_filter_map :
  'a array -> 'b list -> ('a -> 'b -> 'c option) -> 'c list

end = struct
#1 "ext_list.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

external ( .!() ) : 'a array -> int -> 'a = "%array_unsafe_get"

let rec map l f =
  match l with
  | [] -> []
  | [ x1 ] ->
      let y1 = f x1 in
      [ y1 ]
  | [ x1; x2 ] ->
      let y1 = f x1 in
      let y2 = f x2 in
      [ y1; y2 ]
  | [ x1; x2; x3 ] ->
      let y1 = f x1 in
      let y2 = f x2 in
      let y3 = f x3 in
      [ y1; y2; y3 ]
  | [ x1; x2; x3; x4 ] ->
      let y1 = f x1 in
      let y2 = f x2 in
      let y3 = f x3 in
      let y4 = f x4 in
      [ y1; y2; y3; y4 ]
  | x1 :: x2 :: x3 :: x4 :: x5 :: tail ->
      let y1 = f x1 in
      let y2 = f x2 in
      let y3 = f x3 in
      let y4 = f x4 in
      let y5 = f x5 in
      y1 :: y2 :: y3 :: y4 :: y5 :: map tail f

let rec has_string l f =
  match l with
  | [] -> false
  | [ x1 ] -> x1 = f
  | [ x1; x2 ] -> x1 = f || x2 = f
  | [ x1; x2; x3 ] -> x1 = f || x2 = f || x3 = f
  | x1 :: x2 :: x3 :: x4 -> x1 = f || x2 = f || x3 = f || has_string x4 f

let rec map_combine l1 l2 f =
  match (l1, l2) with
  | [], [] -> []
  | a1 :: l1, a2 :: l2 -> (f a1, a2) :: map_combine l1 l2 f
  | _, _ -> invalid_arg "Ext_list.map_combine"

let rec arr_list_combine_unsafe arr l i j acc f =
  if i = j then acc
  else
    match l with
    | [] -> invalid_arg "Ext_list.combine"
    | h :: tl ->
        (f arr.!(i), h) :: arr_list_combine_unsafe arr tl (i + 1) j acc f

let combine_array_append arr l acc f =
  let len = Array.length arr in
  arr_list_combine_unsafe arr l 0 len acc f

let combine_array arr l f =
  let len = Array.length arr in
  arr_list_combine_unsafe arr l 0 len [] f

let rec arr_list_filter_map_unasfe arr l i j acc f =
  if i = j then acc
  else
    match l with
    | [] -> invalid_arg "Ext_list.arr_list_filter_map_unsafe"
    | h :: tl -> (
        match f arr.!(i) h with
        | None -> arr_list_filter_map_unasfe arr tl (i + 1) j acc f
        | Some v -> v :: arr_list_filter_map_unasfe arr tl (i + 1) j acc f)

let array_list_filter_map arr l f =
  let len = Array.length arr in
  arr_list_filter_map_unasfe arr l 0 len [] f

let rec map_split_opt (xs : 'a list) (f : 'a -> 'b option * 'c option) :
    'b list * 'c list =
  match xs with
  | [] -> ([], [])
  | x :: xs -> (
      let c, d = f x in
      let cs, ds = map_split_opt xs f in
      ( (match c with Some c -> c :: cs | None -> cs),
        match d with Some d -> d :: ds | None -> ds ))

let rec map_snd l f =
  match l with
  | [] -> []
  | [ (v1, x1) ] ->
      let y1 = f x1 in
      [ (v1, y1) ]
  | [ (v1, x1); (v2, x2) ] ->
      let y1 = f x1 in
      let y2 = f x2 in
      [ (v1, y1); (v2, y2) ]
  | [ (v1, x1); (v2, x2); (v3, x3) ] ->
      let y1 = f x1 in
      let y2 = f x2 in
      let y3 = f x3 in
      [ (v1, y1); (v2, y2); (v3, y3) ]
  | [ (v1, x1); (v2, x2); (v3, x3); (v4, x4) ] ->
      let y1 = f x1 in
      let y2 = f x2 in
      let y3 = f x3 in
      let y4 = f x4 in
      [ (v1, y1); (v2, y2); (v3, y3); (v4, y4) ]
  | (v1, x1) :: (v2, x2) :: (v3, x3) :: (v4, x4) :: (v5, x5) :: tail ->
      let y1 = f x1 in
      let y2 = f x2 in
      let y3 = f x3 in
      let y4 = f x4 in
      let y5 = f x5 in
      (v1, y1) :: (v2, y2) :: (v3, y3) :: (v4, y4) :: (v5, y5) :: map_snd tail f

let rec map_last l f =
  match l with
  | [] -> []
  | [ x1 ] ->
      let y1 = f true x1 in
      [ y1 ]
  | [ x1; x2 ] ->
      let y1 = f false x1 in
      let y2 = f true x2 in
      [ y1; y2 ]
  | [ x1; x2; x3 ] ->
      let y1 = f false x1 in
      let y2 = f false x2 in
      let y3 = f true x3 in
      [ y1; y2; y3 ]
  | [ x1; x2; x3; x4 ] ->
      let y1 = f false x1 in
      let y2 = f false x2 in
      let y3 = f false x3 in
      let y4 = f true x4 in
      [ y1; y2; y3; y4 ]
  | x1 :: x2 :: x3 :: x4 :: tail ->
      (* make sure that tail is not empty *)
      let y1 = f false x1 in
      let y2 = f false x2 in
      let y3 = f false x3 in
      let y4 = f false x4 in
      y1 :: y2 :: y3 :: y4 :: map_last tail f

let rec mapi_aux lst i f tail =
  match lst with
  | [] -> tail
  | a :: l ->
      let r = f i a in
      r :: mapi_aux l (i + 1) f tail

let mapi lst f = mapi_aux lst 0 f []

let mapi_append lst f tail = mapi_aux lst 0 f tail

let rec last xs =
  match xs with
  | [ x ] -> x
  | _ :: tl -> last tl
  | [] -> invalid_arg "Ext_list.last"

let rec append_aux l1 l2 =
  match l1 with
  | [] -> l2
  | [ a0 ] -> a0 :: l2
  | [ a0; a1 ] -> a0 :: a1 :: l2
  | [ a0; a1; a2 ] -> a0 :: a1 :: a2 :: l2
  | [ a0; a1; a2; a3 ] -> a0 :: a1 :: a2 :: a3 :: l2
  | [ a0; a1; a2; a3; a4 ] -> a0 :: a1 :: a2 :: a3 :: a4 :: l2
  | a0 :: a1 :: a2 :: a3 :: a4 :: rest ->
      a0 :: a1 :: a2 :: a3 :: a4 :: append_aux rest l2

let append l1 l2 = match l2 with [] -> l1 | _ -> append_aux l1 l2

let append_one l1 x = append_aux l1 [ x ]

let rec map_append l1 l2 f =
  match l1 with
  | [] -> l2
  | [ a0 ] -> f a0 :: l2
  | [ a0; a1 ] ->
      let b0 = f a0 in
      let b1 = f a1 in
      b0 :: b1 :: l2
  | [ a0; a1; a2 ] ->
      let b0 = f a0 in
      let b1 = f a1 in
      let b2 = f a2 in
      b0 :: b1 :: b2 :: l2
  | [ a0; a1; a2; a3 ] ->
      let b0 = f a0 in
      let b1 = f a1 in
      let b2 = f a2 in
      let b3 = f a3 in
      b0 :: b1 :: b2 :: b3 :: l2
  | [ a0; a1; a2; a3; a4 ] ->
      let b0 = f a0 in
      let b1 = f a1 in
      let b2 = f a2 in
      let b3 = f a3 in
      let b4 = f a4 in
      b0 :: b1 :: b2 :: b3 :: b4 :: l2
  | a0 :: a1 :: a2 :: a3 :: a4 :: rest ->
      let b0 = f a0 in
      let b1 = f a1 in
      let b2 = f a2 in
      let b3 = f a3 in
      let b4 = f a4 in
      b0 :: b1 :: b2 :: b3 :: b4 :: map_append rest l2 f

let rec fold_right l acc f =
  match l with
  | [] -> acc
  | [ a0 ] -> f a0 acc
  | [ a0; a1 ] -> f a0 (f a1 acc)
  | [ a0; a1; a2 ] -> f a0 (f a1 (f a2 acc))
  | [ a0; a1; a2; a3 ] -> f a0 (f a1 (f a2 (f a3 acc)))
  | [ a0; a1; a2; a3; a4 ] -> f a0 (f a1 (f a2 (f a3 (f a4 acc))))
  | a0 :: a1 :: a2 :: a3 :: a4 :: rest ->
      f a0 (f a1 (f a2 (f a3 (f a4 (fold_right rest acc f)))))

let rec fold_right2 l r acc f =
  match (l, r) with
  | [], [] -> acc
  | [ a0 ], [ b0 ] -> f a0 b0 acc
  | [ a0; a1 ], [ b0; b1 ] -> f a0 b0 (f a1 b1 acc)
  | [ a0; a1; a2 ], [ b0; b1; b2 ] -> f a0 b0 (f a1 b1 (f a2 b2 acc))
  | [ a0; a1; a2; a3 ], [ b0; b1; b2; b3 ] ->
      f a0 b0 (f a1 b1 (f a2 b2 (f a3 b3 acc)))
  | [ a0; a1; a2; a3; a4 ], [ b0; b1; b2; b3; b4 ] ->
      f a0 b0 (f a1 b1 (f a2 b2 (f a3 b3 (f a4 b4 acc))))
  | a0 :: a1 :: a2 :: a3 :: a4 :: arest, b0 :: b1 :: b2 :: b3 :: b4 :: brest ->
      f a0 b0
        (f a1 b1 (f a2 b2 (f a3 b3 (f a4 b4 (fold_right2 arest brest acc f)))))
  | _, _ -> invalid_arg "Ext_list.fold_right2"

let rec fold_right3 l r last acc f =
  match (l, r, last) with
  | [], [], [] -> acc
  | [ a0 ], [ b0 ], [ c0 ] -> f a0 b0 c0 acc
  | [ a0; a1 ], [ b0; b1 ], [ c0; c1 ] -> f a0 b0 c0 (f a1 b1 c1 acc)
  | [ a0; a1; a2 ], [ b0; b1; b2 ], [ c0; c1; c2 ] ->
      f a0 b0 c0 (f a1 b1 c1 (f a2 b2 c2 acc))
  | [ a0; a1; a2; a3 ], [ b0; b1; b2; b3 ], [ c0; c1; c2; c3 ] ->
      f a0 b0 c0 (f a1 b1 c1 (f a2 b2 c2 (f a3 b3 c3 acc)))
  | [ a0; a1; a2; a3; a4 ], [ b0; b1; b2; b3; b4 ], [ c0; c1; c2; c3; c4 ] ->
      f a0 b0 c0 (f a1 b1 c1 (f a2 b2 c2 (f a3 b3 c3 (f a4 b4 c4 acc))))
  | ( a0 :: a1 :: a2 :: a3 :: a4 :: arest,
      b0 :: b1 :: b2 :: b3 :: b4 :: brest,
      c0 :: c1 :: c2 :: c3 :: c4 :: crest ) ->
      f a0 b0 c0
        (f a1 b1 c1
           (f a2 b2 c2
              (f a3 b3 c3 (f a4 b4 c4 (fold_right3 arest brest crest acc f)))))
  | _, _, _ -> invalid_arg "Ext_list.fold_right2"

let rec map2 l r f =
  match (l, r) with
  | [], [] -> []
  | [ a0 ], [ b0 ] -> [ f a0 b0 ]
  | [ a0; a1 ], [ b0; b1 ] ->
      let c0 = f a0 b0 in
      let c1 = f a1 b1 in
      [ c0; c1 ]
  | [ a0; a1; a2 ], [ b0; b1; b2 ] ->
      let c0 = f a0 b0 in
      let c1 = f a1 b1 in
      let c2 = f a2 b2 in
      [ c0; c1; c2 ]
  | [ a0; a1; a2; a3 ], [ b0; b1; b2; b3 ] ->
      let c0 = f a0 b0 in
      let c1 = f a1 b1 in
      let c2 = f a2 b2 in
      let c3 = f a3 b3 in
      [ c0; c1; c2; c3 ]
  | [ a0; a1; a2; a3; a4 ], [ b0; b1; b2; b3; b4 ] ->
      let c0 = f a0 b0 in
      let c1 = f a1 b1 in
      let c2 = f a2 b2 in
      let c3 = f a3 b3 in
      let c4 = f a4 b4 in
      [ c0; c1; c2; c3; c4 ]
  | a0 :: a1 :: a2 :: a3 :: a4 :: arest, b0 :: b1 :: b2 :: b3 :: b4 :: brest ->
      let c0 = f a0 b0 in
      let c1 = f a1 b1 in
      let c2 = f a2 b2 in
      let c3 = f a3 b3 in
      let c4 = f a4 b4 in
      c0 :: c1 :: c2 :: c3 :: c4 :: map2 arest brest f
  | _, _ -> invalid_arg "Ext_list.map2"

let rec fold_left_with_offset l accu i f =
  match l with
  | [] -> accu
  | a :: l -> fold_left_with_offset l (f a accu i) (i + 1) f

let rec filter_map xs (f : 'a -> 'b option) =
  match xs with
  | [] -> []
  | y :: ys -> (
      match f y with None -> filter_map ys f | Some z -> z :: filter_map ys f)

let rec exclude (xs : 'a list) (p : 'a -> bool) : 'a list =
  match xs with
  | [] -> []
  | x :: xs -> if p x then exclude xs p else x :: exclude xs p

let rec exclude_with_val l p =
  match l with
  | [] -> None
  | a0 :: xs -> (
      if p a0 then Some (exclude xs p)
      else
        match xs with
        | [] -> None
        | a1 :: rest -> (
            if p a1 then Some (a0 :: exclude rest p)
            else
              match exclude_with_val rest p with
              | None -> None
              | Some rest -> Some (a0 :: a1 :: rest)))

let rec same_length xs ys =
  match (xs, ys) with
  | [], [] -> true
  | _ :: xs, _ :: ys -> same_length xs ys
  | _, _ -> false

let init n f =
  match n with
  | 0 -> []
  | 1 ->
      let a0 = f 0 in
      [ a0 ]
  | 2 ->
      let a0 = f 0 in
      let a1 = f 1 in
      [ a0; a1 ]
  | 3 ->
      let a0 = f 0 in
      let a1 = f 1 in
      let a2 = f 2 in
      [ a0; a1; a2 ]
  | 4 ->
      let a0 = f 0 in
      let a1 = f 1 in
      let a2 = f 2 in
      let a3 = f 3 in
      [ a0; a1; a2; a3 ]
  | 5 ->
      let a0 = f 0 in
      let a1 = f 1 in
      let a2 = f 2 in
      let a3 = f 3 in
      let a4 = f 4 in
      [ a0; a1; a2; a3; a4 ]
  | _ -> Array.to_list (Array.init n f)

let rec rev_append l1 l2 =
  match l1 with
  | [] -> l2
  | [ a0 ] -> a0 :: l2 (* single element is common *)
  | [ a0; a1 ] -> a1 :: a0 :: l2
  | a0 :: a1 :: a2 :: rest -> rev_append rest (a2 :: a1 :: a0 :: l2)

let rev l = rev_append l []

let rec small_split_at n acc l =
  if n <= 0 then (rev acc, l)
  else
    match l with
    | x :: xs -> small_split_at (n - 1) (x :: acc) xs
    | _ -> invalid_arg "Ext_list.split_at"

let split_at l n = small_split_at n [] l

let rec split_at_last_aux acc x =
  match x with
  | [] -> invalid_arg "Ext_list.split_at_last"
  | [ x ] -> (rev acc, x)
  | y0 :: ys -> split_at_last_aux (y0 :: acc) ys

let split_at_last (x : 'a list) =
  match x with
  | [] -> invalid_arg "Ext_list.split_at_last"
  | [ a0 ] -> ([], a0)
  | [ a0; a1 ] -> ([ a0 ], a1)
  | [ a0; a1; a2 ] -> ([ a0; a1 ], a2)
  | [ a0; a1; a2; a3 ] -> ([ a0; a1; a2 ], a3)
  | [ a0; a1; a2; a3; a4 ] -> ([ a0; a1; a2; a3 ], a4)
  | a0 :: a1 :: a2 :: a3 :: a4 :: rest ->
      let rev, last = split_at_last_aux [] rest in
      (a0 :: a1 :: a2 :: a3 :: a4 :: rev, last)

(**
   can not do loop unroll due to state combination
*)
let filter_mapi xs f =
  let rec aux i xs =
    match xs with
    | [] -> []
    | y :: ys -> (
        match f y i with
        | None -> aux (i + 1) ys
        | Some z -> z :: aux (i + 1) ys)
  in
  aux 0 xs

let rec filter_map2 xs ys (f : 'a -> 'b -> 'c option) =
  match (xs, ys) with
  | [], [] -> []
  | u :: us, v :: vs -> (
      match f u v with
      | None -> filter_map2 us vs f (* idea: rec f us vs instead? *)
      | Some z -> z :: filter_map2 us vs f)
  | _ -> invalid_arg "Ext_list.filter_map2"

let rec rev_map_append l1 l2 f =
  match l1 with [] -> l2 | a :: l -> rev_map_append l (f a :: l2) f

(** It is not worth loop unrolling, 
    it is already tail-call, and we need to be careful 
    about evaluation order when unroll
*)
let rec flat_map_aux f acc append lx =
  match lx with
  | [] -> rev_append acc append
  | a0 :: rest ->
      let new_acc =
        match f a0 with
        | [] -> acc
        | [ a0 ] -> a0 :: acc
        | [ a0; a1 ] -> a1 :: a0 :: acc
        | a0 :: a1 :: a2 :: rest -> rev_append rest (a2 :: a1 :: a0 :: acc)
      in
      flat_map_aux f new_acc append rest

let flat_map lx f = flat_map_aux f [] [] lx

let flat_map_append lx append f = flat_map_aux f [] append lx

let rec length_compare l n =
  if n < 0 then `Gt
  else
    match l with
    | _ :: xs -> length_compare xs (n - 1)
    | [] -> if n = 0 then `Eq else `Lt

let rec length_ge l n =
  if n > 0 then match l with _ :: tl -> length_ge tl (n - 1) | [] -> false
  else true

(**
   {[length xs = length ys + n ]}
*)
let rec length_larger_than_n xs ys n =
  match (xs, ys) with
  | _, [] -> length_compare xs n = `Eq
  | _ :: xs, _ :: ys -> length_larger_than_n xs ys n
  | [], _ -> false

let rec group (eq : 'a -> 'a -> bool) lst =
  match lst with [] -> [] | x :: xs -> aux eq x (group eq xs)

and aux eq (x : 'a) (xss : 'a list list) : 'a list list =
  match xss with
  | [] -> [ [ x ] ]
  | (y0 :: _ as y) :: ys ->
      (* cannot be empty *)
      if eq x y0 then (x :: y) :: ys else y :: aux eq x ys
  | _ :: _ -> assert false

let stable_group lst eq = group eq lst |> rev

let rec drop h n =
  if n < 0 then invalid_arg "Ext_list.drop"
  else if n = 0 then h
  else
    match h with [] -> invalid_arg "Ext_list.drop" | _ :: tl -> drop tl (n - 1)

let rec find_first x p =
  match x with [] -> None | x :: l -> if p x then Some x else find_first l p

let rec find_first_not xs p =
  match xs with
  | [] -> None
  | a :: l -> if p a then find_first_not l p else Some a

let rec rev_iter l f =
  match l with
  | [] -> ()
  | [ x1 ] -> f x1
  | [ x1; x2 ] ->
      f x2;
      f x1
  | [ x1; x2; x3 ] ->
      f x3;
      f x2;
      f x1
  | [ x1; x2; x3; x4 ] ->
      f x4;
      f x3;
      f x2;
      f x1
  | x1 :: x2 :: x3 :: x4 :: x5 :: tail ->
      rev_iter tail f;
      f x5;
      f x4;
      f x3;
      f x2;
      f x1

let rec iter l f =
  match l with
  | [] -> ()
  | [ x1 ] -> f x1
  | [ x1; x2 ] ->
      f x1;
      f x2
  | [ x1; x2; x3 ] ->
      f x1;
      f x2;
      f x3
  | [ x1; x2; x3; x4 ] ->
      f x1;
      f x2;
      f x3;
      f x4
  | x1 :: x2 :: x3 :: x4 :: x5 :: tail ->
      f x1;
      f x2;
      f x3;
      f x4;
      f x5;
      iter tail f

let rec for_all lst p =
  match lst with [] -> true | a :: l -> p a && for_all l p

let rec for_all_snd lst p =
  match lst with [] -> true | (_, a) :: l -> p a && for_all_snd l p

let rec for_all2_no_exn l1 l2 p =
  match (l1, l2) with
  | [], [] -> true
  | a1 :: l1, a2 :: l2 -> p a1 a2 && for_all2_no_exn l1 l2 p
  | _, _ -> false

let rec find_opt xs p =
  match xs with
  | [] -> None
  | x :: l -> ( match p x with Some _ as v -> v | None -> find_opt l p)

let rec find_def xs p def =
  match xs with
  | [] -> def
  | x :: l -> ( match p x with Some v -> v | None -> find_def l p def)

let rec split_map l f =
  match l with
  | [] -> ([], [])
  | [ x1 ] ->
      let a0, b0 = f x1 in
      ([ a0 ], [ b0 ])
  | [ x1; x2 ] ->
      let a1, b1 = f x1 in
      let a2, b2 = f x2 in
      ([ a1; a2 ], [ b1; b2 ])
  | [ x1; x2; x3 ] ->
      let a1, b1 = f x1 in
      let a2, b2 = f x2 in
      let a3, b3 = f x3 in
      ([ a1; a2; a3 ], [ b1; b2; b3 ])
  | [ x1; x2; x3; x4 ] ->
      let a1, b1 = f x1 in
      let a2, b2 = f x2 in
      let a3, b3 = f x3 in
      let a4, b4 = f x4 in
      ([ a1; a2; a3; a4 ], [ b1; b2; b3; b4 ])
  | x1 :: x2 :: x3 :: x4 :: x5 :: tail ->
      let a1, b1 = f x1 in
      let a2, b2 = f x2 in
      let a3, b3 = f x3 in
      let a4, b4 = f x4 in
      let a5, b5 = f x5 in
      let ass, bss = split_map tail f in
      (a1 :: a2 :: a3 :: a4 :: a5 :: ass, b1 :: b2 :: b3 :: b4 :: b5 :: bss)

let sort_via_array lst cmp =
  let arr = Array.of_list lst in
  Array.sort cmp arr;
  Array.to_list arr

let sort_via_arrayf lst cmp f =
  let arr = Array.of_list lst in
  Array.sort cmp arr;
  Ext_array.to_list_f arr f

let rec assoc_by_string lst (k : string) def =
  match lst with
  | [] -> ( match def with None -> assert false | Some x -> x)
  | (k1, v1) :: rest -> if k1 = k then v1 else assoc_by_string rest k def

let rec assoc_by_int lst (k : int) def =
  match lst with
  | [] -> ( match def with None -> assert false | Some x -> x)
  | (k1, v1) :: rest -> if k1 = k then v1 else assoc_by_int rest k def

let rec nth_aux l n =
  match l with
  | [] -> None
  | a :: l -> if n = 0 then Some a else nth_aux l (n - 1)

let nth_opt l n = if n < 0 then None else nth_aux l n

let rec iter_snd lst f =
  match lst with
  | [] -> ()
  | (_, x) :: xs ->
      f x;
      iter_snd xs f

let rec iter_fst lst f =
  match lst with
  | [] -> ()
  | (x, _) :: xs ->
      f x;
      iter_fst xs f

let rec exists l p = match l with [] -> false | x :: xs -> p x || exists xs p

let rec exists_fst l p =
  match l with [] -> false | (a, _) :: l -> p a || exists_fst l p

let rec exists_snd l p =
  match l with [] -> false | (_, a) :: l -> p a || exists_snd l p

let rec concat_append (xss : 'a list list) (xs : 'a list) : 'a list =
  match xss with [] -> xs | l :: r -> append l (concat_append r xs)

let rec fold_left l accu f =
  match l with [] -> accu | a :: l -> fold_left l (f accu a) f

let reduce_from_left lst fn =
  match lst with
  | first :: rest -> fold_left rest first fn
  | _ -> invalid_arg "Ext_list.reduce_from_left"

let rec fold_left2 l1 l2 accu f =
  match (l1, l2) with
  | [], [] -> accu
  | a1 :: l1, a2 :: l2 -> fold_left2 l1 l2 (f a1 a2 accu) f
  | _, _ -> invalid_arg "Ext_list.fold_left2"

let singleton_exn xs = match xs with [ x ] -> x | _ -> assert false

let rec mem_string (xs : string list) (x : string) =
  match xs with [] -> false | a :: l -> a = x || mem_string l x

let filter lst p =
  let rec find ~p accu lst =
    match lst with
    | [] -> rev accu
    | x :: l -> if p x then find (x :: accu) l ~p else find accu l ~p
  in
  find [] lst ~p

end
module Ext_ref : sig 
#1 "ext_ref.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

(** [non_exn_protect ref value f] assusme [f()] 
    would not raise
*)

val non_exn_protect : 'a ref -> 'a -> (unit -> 'b) -> 'b
val protect : 'a ref -> 'a -> (unit -> 'b) -> 'b

val protect2 : 'a ref -> 'b ref -> 'a -> 'b -> (unit -> 'c) -> 'c

(** [non_exn_protect2 refa refb va vb f ]
    assume [f ()] would not raise
*)
val non_exn_protect2 : 'a ref -> 'b ref -> 'a -> 'b -> (unit -> 'c) -> 'c

val protect_list : ('a ref * 'a) list -> (unit -> 'b) -> 'b

end = struct
#1 "ext_ref.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

let non_exn_protect r v body = 
  let old = !r in
  r := v;
  let res = body() in
  r := old;
  res

let protect r v body =
  let old = !r in
  try
    r := v;
    let res = body() in
    r := old;
    res
  with x ->
    r := old;
    raise x

let non_exn_protect2 r1 r2 v1 v2 body = 
  let old1 = !r1 in
  let old2 = !r2 in  
  r1 := v1;
  r2 := v2;
  let res = body() in
  r1 := old1;
  r2 := old2;
  res

let protect2 r1 r2 v1 v2 body =
  let old1 = !r1 in
  let old2 = !r2 in  
  try
    r1 := v1;
    r2 := v2;
    let res = body() in
    r1 := old1;
    r2 := old2;
    res
  with x ->
    r1 := old1;
    r2 := old2;
    raise x

let protect_list rvs body = 
  let olds =  Ext_list.map  rvs (fun (x,_) -> !x) in 
  let () = List.iter (fun (x,y) -> x:=y) rvs in 
  try 
    let res = body () in 
    List.iter2 (fun (x,_) old -> x := old) rvs olds;
    res 
  with e -> 
    List.iter2 (fun (x,_) old -> x := old) rvs olds;
    raise e 

end
module Ml_binary : sig 
#1 "ml_binary.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)



(* This file was used to read reason ast
   and part of parsing binary ast
*)
type _ kind = 
  | Ml : Parsetree.structure kind 
  | Mli : Parsetree.signature kind


val read_ast : 'a kind -> in_channel -> 'a 

val write_ast :
  'a kind -> string -> 'a -> out_channel -> unit

val magic_of_kind : 'a kind -> string   


end = struct
#1 "ml_binary.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


type _ kind = 
  | Ml : Parsetree.structure kind 
  | Mli : Parsetree.signature kind

(** [read_ast kind ic] assume [ic] channel is 
    in the right position *)
let read_ast (type t ) (kind : t  kind) ic : t  =
  let magic =
    match kind with 
    | Ml -> Config.ast_impl_magic_number
    | Mli -> Config.ast_intf_magic_number in 
  let buffer = really_input_string ic (String.length magic) in
  assert(buffer = magic); (* already checked by apply_rewriter *)
  Location.set_input_name (input_value ic);
  input_value ic 

let write_ast (type t) (kind : t kind) 
    (fname : string)
    (pt : t) oc = 
  let magic = 
    match kind with 
    | Ml -> Config.ast_impl_magic_number
    | Mli -> Config.ast_intf_magic_number in
  output_string oc magic ;
  output_value oc fname;
  output_value oc pt

let magic_of_kind : type a . a kind -> string = function
  | Ml -> Config.ast_impl_magic_number
  | Mli -> Config.ast_intf_magic_number



end
module Ast_extract : sig 
#1 "ast_extract.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)









module Set_string = Depend.StringSet

val read_parse_and_extract : 'a Ml_binary.kind -> 'a -> Set_string.t


end = struct
#1 "ast_extract.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

(* type module_name = private string *)

module Set_string = Depend.StringSet

(* FIXME: [Clflags.open_modules] seems not to be properly used *)
module SMap = Depend.StringMap
let bound_vars = SMap.empty 


type 'a kind = 'a Ml_binary.kind 


let read_parse_and_extract (type t) (k : t kind) (ast : t) : Set_string.t =
  Depend.free_structure_names := Set_string.empty;
  Ext_ref.protect Clflags.transparent_modules false begin fun _ -> 
    List.iter (* check *)
      (fun modname  ->
         ignore @@ 
         Depend.open_module bound_vars (Longident.Lident modname))
      (!Clflags.open_modules);
    (match k with
     | Ml_binary.Ml  -> Depend.add_implementation bound_vars ast
     | Ml_binary.Mli  -> Depend.add_signature bound_vars ast  ); 
    !Depend.free_structure_names
  end






end
module Bs_exception : sig 
#1 "bs_exception.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

type error =
  | Cmj_not_found of string
  | Js_not_found of string
  | Bs_cyclic_depends of string  list
  | Bs_duplicated_module of string * string
  | Bs_duplicate_exports of string (* gpr_974 *)
  | Bs_package_not_found of string                                                        
  | Bs_main_not_exist of string 
  | Bs_invalid_path of string
  | Missing_ml_dependency of string 
  | Dependency_script_module_dependent_not  of string
(*
TODO: In the futrue, we should refine dependency [bsb] 
should not rely on such exception, it should have its own exception handling
*)

(* exception Error of error *)

(* val report_error : Format.formatter -> error -> unit *)

val error : error -> 'a 

end = struct
#1 "bs_exception.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


type error =
  | Cmj_not_found of string
  | Js_not_found of string 
  | Bs_cyclic_depends of string  list
  | Bs_duplicated_module of string * string
  | Bs_duplicate_exports of string (* gpr_974 *)
  | Bs_package_not_found of string                            
  | Bs_main_not_exist of string 
  | Bs_invalid_path of string
  | Missing_ml_dependency of string 
  | Dependency_script_module_dependent_not  of string 
  (** TODO: we need add location handling *)    
exception Error of error

let error err = raise (Error err)

let report_error ppf = function
  | Dependency_script_module_dependent_not s
    -> 
    Format.fprintf ppf 
      "%s is compiled in script mode while its dependent is not"
      s
  | Missing_ml_dependency s -> 
    Format.fprintf ppf "Missing dependency %s in search path" s 
  | Cmj_not_found s ->
    Format.fprintf ppf "%s not found, it means either the module does not exist or it is a namespace" s
  | Js_not_found s -> 
    Format.fprintf ppf "%s not found, needed in script mode " s
  | Bs_cyclic_depends  str
    ->
    Format.fprintf ppf "Cyclic depends : @[%a@]"
      (Format.pp_print_list ~pp_sep:Format.pp_print_space
         Format.pp_print_string)
      str
  | Bs_duplicate_exports str -> 
    Format.fprintf ppf "%s are exported as twice" str 
  | Bs_duplicated_module (a,b)
    ->
    Format.fprintf ppf "The build system does not support two files with same names yet %s, %s" a b
  | Bs_main_not_exist main
    ->
    Format.fprintf ppf "File %s not found " main

  | Bs_package_not_found package
    ->
    Format.fprintf ppf "Package %s not found or %s/lib/ocaml does not exist or please set npm_config_prefix correctly"
      package package
  | Bs_invalid_path path
    ->  Format.pp_print_string ppf ("Invalid path: " ^ path )


let () =
  Location.register_error_of_exn
    (function
      | Error err
        -> Some (Location.error_of_printer_file report_error err)
      | _ -> None
    )

end
module Ext_bytes : sig 
#1 "ext_bytes.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)





external unsafe_blit_string : string -> int -> bytes -> int -> int -> unit
  = "caml_blit_string" 
[@@noalloc]




end = struct
#1 "ext_bytes.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)







external unsafe_blit_string : string -> int -> bytes -> int -> int -> unit
  = "caml_blit_string" 
[@@noalloc]                     


end
module Ext_buffer : sig 
#1 "ext_buffer.mli"
(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*  Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt   *)
(*                                                                     *)
(*  Copyright 1999 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with    *)
(*  the special exception on linking described in file ../LICENSE.     *)
(*                                                                     *)
(***********************************************************************)

(** Extensible buffers.

    This module implements buffers that automatically expand
    as necessary.  It provides accumulative concatenation of strings
    in quasi-linear time (instead of quadratic time when strings are
    concatenated pairwise).
*)

(* ReScript customization: customized for efficient digest *)

type t
(** The abstract type of buffers. *)

val create : int -> t
(** [create n] returns a fresh buffer, initially empty.
    The [n] parameter is the initial size of the internal byte sequence
    that holds the buffer contents. That byte sequence is automatically
    reallocated when more than [n] characters are stored in the buffer,
    but shrinks back to [n] characters when [reset] is called.
    For best performance, [n] should be of the same order of magnitude
    as the number of characters that are expected to be stored in
    the buffer (for instance, 80 for a buffer that holds one output
    line).  Nothing bad will happen if the buffer grows beyond that
    limit, however. In doubt, take [n = 16] for instance.
    If [n] is not between 1 and {!Sys.max_string_length}, it will
    be clipped to that interval. *)

val contents : t -> string
(** Return a copy of the current contents of the buffer.
    The buffer itself is unchanged. *)

val length : t -> int
(** Return the number of characters currently contained in the buffer. *)

val is_empty : t -> bool

val clear : t -> unit
(** Empty the buffer. *)


val [@inline] add_char : t -> char -> unit
(** [add_char b c] appends the character [c] at the end of the buffer [b]. *)

val add_string : t -> string -> unit
(** [add_string b s] appends the string [s] at the end of the buffer [b]. *)

(* val add_bytes : t -> bytes -> unit *)
(** [add_string b s] appends the string [s] at the end of the buffer [b].
    @since 4.02 *)

(* val add_substring : t -> string -> int -> int -> unit *)
(** [add_substring b s ofs len] takes [len] characters from offset
    [ofs] in string [s] and appends them at the end of the buffer [b]. *)

(* val add_subbytes : t -> bytes -> int -> int -> unit *)
(** [add_substring b s ofs len] takes [len] characters from offset
    [ofs] in byte sequence [s] and appends them at the end of the buffer [b].
    @since 4.02 *)

(* val add_buffer : t -> t -> unit *)
(** [add_buffer b1 b2] appends the current contents of buffer [b2]
    at the end of buffer [b1].  [b2] is not modified. *)    

(* val add_channel : t -> in_channel -> int -> unit *)
(** [add_channel b ic n] reads exactly [n] character from the
    input channel [ic] and stores them at the end of buffer [b].
    Raise [End_of_file] if the channel contains fewer than [n]
    characters. *)

val output_buffer : out_channel -> t -> unit
(** [output_buffer oc b] writes the current contents of buffer [b]
    on the output channel [oc]. *)   

val digest : t -> Digest.t   

val not_equal : 
  t -> 
  string -> 
  bool 

val add_int_1 :    
  t -> int -> unit 

val add_int_2 :    
  t -> int -> unit 

val add_int_3 :    
  t -> int -> unit 

val add_int_4 :    
  t -> int -> unit 

val add_string_char :    
  t -> 
  string ->
  char -> 
  unit

val add_ninja_prefix_var : 
  t -> 
  string -> 
  unit 


val add_char_string :    
  t -> 
  char -> 
  string -> 
  unit
end = struct
#1 "ext_buffer.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*    Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt    *)
(*                                                                        *)
(*   Copyright 1999 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* Extensible buffers *)

type t =
  {mutable buffer : bytes;
   mutable position : int;
   mutable length : int;
   initial_buffer : bytes}

let create n =
  let n = if n < 1 then 1 else n in
  let s = Bytes.create n in
  {buffer = s; position = 0; length = n; initial_buffer = s}

let contents b = Bytes.sub_string b.buffer 0 b.position
(* let to_bytes b = Bytes.sub b.buffer 0 b.position  *)

(* let sub b ofs len =
   if ofs < 0 || len < 0 || ofs > b.position - len
   then invalid_arg "Ext_buffer.sub"
   else Bytes.sub_string b.buffer ofs len *)


(* let blit src srcoff dst dstoff len =
   if len < 0 || srcoff < 0 || srcoff > src.position - len
             || dstoff < 0 || dstoff > (Bytes.length dst) - len
   then invalid_arg "Ext_buffer.blit"
   else
    Bytes.unsafe_blit src.buffer srcoff dst dstoff len *)

let length b = b.position
let is_empty b = b.position = 0
let clear b = b.position <- 0

(* let reset b =
   b.position <- 0; b.buffer <- b.initial_buffer;
   b.length <- Bytes.length b.buffer *)

let resize b more =
  let len = b.length in
  let new_len = ref len in
  while b.position + more > !new_len do new_len := 2 * !new_len done;
  let new_buffer = Bytes.create !new_len in
  (* PR#6148: let's keep using [blit] rather than [unsafe_blit] in
     this tricky function that is slow anyway. *)
  Bytes.blit b.buffer 0 new_buffer 0 b.position;
  b.buffer <- new_buffer;
  b.length <- !new_len ;
  assert (b.position + more <= b.length)

let [@inline] add_char b c =
  let pos = b.position in
  if pos >= b.length then resize b 1;
  Bytes.unsafe_set b.buffer pos c;
  b.position <- pos + 1  

(* let add_substring b s offset len =
   if offset < 0 || len < 0 || offset > String.length s - len
   then invalid_arg "Ext_buffer.add_substring/add_subbytes";
   let new_position = b.position + len in
   if new_position > b.length then resize b len;
   Ext_bytes.unsafe_blit_string s offset b.buffer b.position len;
   b.position <- new_position   *)


(* let add_subbytes b s offset len =
   add_substring b (Bytes.unsafe_to_string s) offset len *)

let add_string b s =
  let len = String.length s in
  let new_position = b.position + len in
  if new_position > b.length then resize b len;
  Ext_bytes.unsafe_blit_string s 0 b.buffer b.position len;
  b.position <- new_position  

(* TODO: micro-optimzie *)
let add_string_char b s c =
  let s_len = String.length s in
  let len = s_len + 1 in 
  let new_position = b.position + len in
  if new_position > b.length then resize b len;
  let b_buffer = b.buffer in 
  Ext_bytes.unsafe_blit_string s 0 b_buffer b.position s_len;
  Bytes.unsafe_set b_buffer (new_position - 1) c;
  b.position <- new_position 

let add_char_string b c s  =
  let s_len = String.length s in
  let len = s_len + 1 in 
  let new_position = b.position + len in
  if new_position > b.length then resize b len;
  let b_buffer = b.buffer in 
  let b_position = b.position in 
  Bytes.unsafe_set b_buffer b_position c ; 
  Ext_bytes.unsafe_blit_string s 0 b_buffer (b_position + 1) s_len;
  b.position <- new_position

(* equivalent to add_char " "; add_char "$"; add_string s  *)
let add_ninja_prefix_var b s =  
  let s_len = String.length s in
  let len = s_len + 2 in 
  let new_position = b.position + len in
  if new_position > b.length then resize b len;
  let b_buffer = b.buffer in 
  let b_position = b.position in 
  Bytes.unsafe_set b_buffer b_position ' ' ; 
  Bytes.unsafe_set b_buffer (b_position + 1) '$' ; 
  Ext_bytes.unsafe_blit_string s 0 b_buffer (b_position + 2) s_len;
  b.position <- new_position


(* let add_bytes b s = add_string b (Bytes.unsafe_to_string s)

   let add_buffer b bs =
   add_subbytes b bs.buffer 0 bs.position *)

(* let add_channel b ic len =
   if len < 0 
    || len > Sys.max_string_length 
    then   (* PR#5004 *)
    invalid_arg "Ext_buffer.add_channel";
   if b.position + len > b.length then resize b len;
   really_input ic b.buffer b.position len;
   b.position <- b.position + len *)

let output_buffer oc b =
  output oc b.buffer 0 b.position  

external unsafe_string: bytes -> int -> int -> Digest.t = "caml_md5_string"

let digest b = 
  unsafe_string 
    b.buffer 0 b.position    

let rec not_equal_aux (b : bytes) (s : string) i len = 
  if i >= len then false
  else 
    (Bytes.unsafe_get b i 
     <>
     String.unsafe_get s i )
    || not_equal_aux b s (i + 1) len 

(** avoid a large copy *)
let not_equal  (b : t) (s : string) = 
  let b_len = b.position in 
  let s_len = String.length s in 
  b_len <> s_len 
  || not_equal_aux b.buffer s 0 s_len


(**
   It could be one byte, two bytes, three bytes and four bytes 
   TODO: inline for better performance
*)
let add_int_1 (b : t ) (x : int ) = 
  let c = (Char.unsafe_chr (x land 0xff)) in 
  let pos = b.position in
  if pos >= b.length then resize b 1;
  Bytes.unsafe_set b.buffer pos c;
  b.position <- pos + 1  

let add_int_2 (b : t ) (x : int ) = 
  let c1 = (Char.unsafe_chr (x land 0xff)) in 
  let c2 = (Char.unsafe_chr (x lsr 8 land 0xff)) in   
  let pos = b.position in
  if pos + 1 >= b.length then resize b 2;
  let b_buffer = b.buffer in 
  Bytes.unsafe_set b_buffer pos c1;
  Bytes.unsafe_set b_buffer (pos + 1) c2;
  b.position <- pos + 2

let add_int_3 (b : t ) (x : int ) = 
  let c1 = (Char.unsafe_chr (x land 0xff)) in 
  let c2 = (Char.unsafe_chr (x lsr 8 land 0xff)) in   
  let c3 = (Char.unsafe_chr (x lsr 16 land 0xff)) in
  let pos = b.position in
  if pos + 2 >= b.length then resize b 3;
  let b_buffer = b.buffer in 
  Bytes.unsafe_set b_buffer pos c1;
  Bytes.unsafe_set b_buffer (pos + 1) c2;
  Bytes.unsafe_set b_buffer (pos + 2) c3;
  b.position <- pos + 3


let add_int_4 (b : t ) (x : int ) = 
  let c1 = (Char.unsafe_chr (x land 0xff)) in 
  let c2 = (Char.unsafe_chr (x lsr 8 land 0xff)) in   
  let c3 = (Char.unsafe_chr (x lsr 16 land 0xff)) in
  let c4 = (Char.unsafe_chr (x lsr 24 land 0xff)) in
  let pos = b.position in
  if pos + 3 >= b.length then resize b 4;
  let b_buffer = b.buffer in 
  Bytes.unsafe_set b_buffer pos c1;
  Bytes.unsafe_set b_buffer (pos + 1) c2;
  Bytes.unsafe_set b_buffer (pos + 2) c3;
  Bytes.unsafe_set b_buffer (pos + 3) c4;
  b.position <- pos + 4




end
module Ext_spec : sig 
#1 "ext_spec.mli"
type 'a t = (string * 'a * string) array

val assoc3 : 
  'a t -> 
  string -> 
  'a option

end = struct
#1 "ext_spec.ml"
(* Copyright (C) 2020- Hongbo Zhang, Authors of ReScript
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


(* A small module which is also used by {!Bsb_helper} *)
type 'a t = (string * 'a * string) array

let rec unsafe_loop i (l : 'a t) n x = 
  if i = n then None
  else 
    let (y1,y2,_) =  Array.unsafe_get l i in
    if y1 = x then  Some y2
    else unsafe_loop (i + 1) l n x 

let assoc3 (l : 'a t) (x : string)  : 'a option =
  let n = Array.length l in 
  unsafe_loop 0 l n x 
end
module Bs_hash_stubs
= struct
#1 "bs_hash_stubs.ml"



let hash_string : string -> int = Hashtbl.hash
let hash_string_int s i = Hashtbl.hash (s,i)
let hash_string_small_int :  string -> int  -> int = hash_string_int
let hash_stamp_and_name (i:int) (s:string) = Hashtbl.hash(i,s)
let hash_int (i:int) = Hashtbl.hash i 
let string_length_based_compare (x : string ) (y : string) = 
  let len1 = String.length x in 
  let len2 = String.length y in 
  if len1 = len2 then String.compare x y 
  else compare (len1:int) len2
let int_unsafe_blit: int array -> int -> int array -> int -> int -> unit = 
  Array.blit




external set_as_old_file : string -> unit = "caml_stale_file"
end
module Ext_string : sig 
#1 "ext_string.mli"
(* Copyright (C) 2015 - 2016 Bloomberg Finance L.P.
 * Copyright (C) 2017 - Hongbo Zhang, Authors of ReScript
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)








(** Extension to the standard library [String] module, fixed some bugs like
    avoiding locale sensitivity *) 

(** default is false *)    
val split_by : ?keep_empty:bool -> (char -> bool) -> string -> string list


(** remove whitespace letters ('\t', '\n', ' ') on both side*)
val trim : string -> string 


(** default is false *)
val split : ?keep_empty:bool -> string -> char -> string list

(** split by space chars for quick scripting *)
val quick_split_by_ws : string -> string list 



val starts_with : string -> string -> bool

(**
   return [-1] when not found, the returned index is useful 
   see [ends_with_then_chop]
*)
val ends_with_index : string -> string -> int

val ends_with : string -> string -> bool

(**
   [ends_with_then_chop name ext]
   @example:
   {[
     ends_with_then_chop "a.cmj" ".cmj"
       "a"
   ]}
   This is useful in controlled or file case sensitve system
*)
val ends_with_then_chop : string -> string -> string option




(**
   [for_all_from  s start p]
   if [start] is negative, it raises,
   if [start] is too large, it returns true
*)
val for_all_from:
  string -> 
  int -> 
  (char -> bool) -> 
  bool 

val for_all : 
  string -> 
  (char -> bool) -> 
  bool

val is_empty : string -> bool

val repeat : int -> string -> string 

val equal : string -> string -> bool

(**
   [extract_until s cursor sep]
   When [sep] not found, the cursor is updated to -1,
   otherwise cursor is increased to 1 + [sep_position]
   User can not determine whether it is found or not by
   telling the return string is empty since 
   "\n\n" would result in an empty string too.
*)
(* val extract_until:
   string -> 
   int ref -> (* cursor to be updated *)
   char -> 
   string *)

val index_count:  
  string -> 
  int ->
  char -> 
  int -> 
  int 

(* val index_next :
   string -> 
   int ->
   char -> 
   int  *)


(**
   [find ~start ~sub s]
   returns [-1] if not found
*)
val find : ?start:int -> sub:string -> string -> int

val contain_substring : string -> string -> bool 

val non_overlap_count : sub:string -> string -> int 

val rfind : sub:string -> string -> int

(** [tail_from s 1]
    return a substring from offset 1 (inclusive)
*)
val tail_from : string -> int -> string


(** returns negative number if not found *)
val rindex_neg : string -> char -> int 

val rindex_opt : string -> char -> int option


val no_char : string -> char -> int -> int -> bool 


val no_slash : string -> bool 

(** return negative means no slash, otherwise [i] means the place for first slash *)
val no_slash_idx : string -> int 

val no_slash_idx_from : string -> int -> int 

(** if no conversion happens, reference equality holds *)
val replace_slash_backward : string -> string 

(** if no conversion happens, reference equality holds *)
val replace_backward_slash : string -> string 

val empty : string 


val compare :  string -> string -> int
  
val single_space : string

val concat3 : string -> string -> string -> string 
val concat4 : string -> string -> string -> string -> string 
val concat5 : string -> string -> string -> string -> string -> string  
val inter2 : string -> string -> string
val inter3 : string -> string -> string -> string 
val inter4 : string -> string -> string -> string -> string
val concat_array : string -> string array -> string 

val single_colon : string 

val parent_dir_lit : string
val current_dir_lit : string

val capitalize_ascii : string -> string

val capitalize_sub:
  string -> 
  int -> 
  string

val uncapitalize_ascii : string -> string

val lowercase_ascii : string -> string 

(** Play parity to {!Ext_buffer.add_int_1} *)
(* val get_int_1 : string -> int -> int 
   val get_int_2 : string -> int -> int 
   val get_int_3 : string -> int -> int 
   val get_int_4 : string -> int -> int  *)

val get_1_2_3_4 : 
  string -> 
  off:int ->  
  int -> 
  int 

val unsafe_sub :   
  string -> 
  int -> 
  int -> 
  string

val is_valid_hash_number:
  string -> 
  bool

val hash_number_as_i32_exn:
  string ->
  int32

val first_marshal_char:  
  string -> 
  bool
end = struct
#1 "ext_string.ml"
(* Copyright (C) 2015 - 2016 Bloomberg Finance L.P.
 * Copyright (C) 2017 - Hongbo Zhang, Authors of ReScript
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)







(*
   {[ split " test_unsafe_obj_ffi_ppx.cmi" ~keep_empty:false ' ']}
*)
let split_by ?(keep_empty=false) is_delim str =
  let len = String.length str in
  let rec loop acc last_pos pos =
    if pos = -1 then
      if last_pos = 0 && not keep_empty then

        acc
      else 
        String.sub str 0 last_pos :: acc
    else
    if is_delim str.[pos] then
      let new_len = (last_pos - pos - 1) in
      if new_len <> 0 || keep_empty then 
        let v = String.sub str (pos + 1) new_len in
        loop ( v :: acc)
          pos (pos - 1)
      else loop acc pos (pos - 1)
    else loop acc last_pos (pos - 1)
  in
  loop [] len (len - 1)

let trim s = 
  let i = ref 0  in
  let j = String.length s in 
  while !i < j &&  
        let u = String.unsafe_get s !i in 
        u = '\t' || u = '\n' || u = ' ' 
  do 
    incr i;
  done;
  let k = ref (j - 1)  in 
  while !k >= !i && 
        let u = String.unsafe_get s !k in 
        u = '\t' || u = '\n' || u = ' ' do 
    decr k ;
  done;
  String.sub s !i (!k - !i + 1)

let split ?keep_empty  str on = 
  if str = "" then [] else 
    split_by ?keep_empty (fun x -> (x : char) = on) str  ;;

let quick_split_by_ws str : string list = 
  split_by ~keep_empty:false (fun x -> x = '\t' || x = '\n' || x = ' ') str

let starts_with s beg = 
  let beg_len = String.length beg in
  let s_len = String.length s in
  beg_len <=  s_len &&
  (let i = ref 0 in
   while !i <  beg_len 
         && String.unsafe_get s !i =
            String.unsafe_get beg !i do 
     incr i 
   done;
   !i = beg_len
  )

let rec ends_aux s end_ j k = 
  if k < 0 then (j + 1)
  else if String.unsafe_get s j = String.unsafe_get end_ k then 
    ends_aux s end_ (j - 1) (k - 1)
  else  -1   

(** return an index which is minus when [s] does not 
    end with [beg]
*)
let ends_with_index s end_ : int = 
  let s_finish = String.length s - 1 in
  let s_beg = String.length end_ - 1 in
  if s_beg > s_finish then -1
  else
    ends_aux s end_ s_finish s_beg

let ends_with s end_ = ends_with_index s end_ >= 0 

let ends_with_then_chop s beg = 
  let i =  ends_with_index s beg in 
  if i >= 0 then Some (String.sub s 0 i) 
  else None

(* let check_suffix_case = ends_with  *)
(* let check_suffix_case_then_chop = ends_with_then_chop *)

(* let check_any_suffix_case s suffixes = 
   Ext_list.exists suffixes (fun x -> check_suffix_case s x)  *)

(* let check_any_suffix_case_then_chop s suffixes = 
   let rec aux suffixes = 
    match suffixes with 
    | [] -> None 
    | x::xs -> 
      let id = ends_with_index s x in 
      if id >= 0 then Some (String.sub s 0 id)
      else aux xs in 
   aux suffixes     *)




(* it is unsafe to expose such API as unsafe since 
   user can provide bad input range 

*)
let rec unsafe_for_all_range s ~start ~finish p =     
  start > finish ||
  p (String.unsafe_get s start) && 
  unsafe_for_all_range s ~start:(start + 1) ~finish p

let for_all_from s start  p = 
  let len = String.length s in 
  if start < 0  then invalid_arg "Ext_string.for_all_from"
  else unsafe_for_all_range s ~start ~finish:(len - 1) p 


let for_all s (p : char -> bool)  =   
  unsafe_for_all_range s ~start:0  ~finish:(String.length s - 1) p 

let is_empty s = String.length s = 0


let repeat n s  =
  let len = String.length s in
  let res = Bytes.create(n * len) in
  for i = 0 to pred n do
    String.blit s 0 res (i * len) len
  done;
  Bytes.to_string res




let unsafe_is_sub ~sub i s j ~len =
  let rec check k =
    if k = len
    then true
    else 
      String.unsafe_get sub (i+k) = 
      String.unsafe_get s (j+k) && check (k+1)
  in
  j+len <= String.length s && check 0



let find ?(start=0) ~sub s =
  let exception Local_exit in
  let n = String.length sub in
  let s_len = String.length s in 
  let i = ref start in  
  try
    while !i + n <= s_len do
      if unsafe_is_sub ~sub 0 s !i ~len:n then
        raise_notrace Local_exit;
      incr i
    done;
    -1
  with Local_exit ->
    !i

let contain_substring s sub = 
  find s ~sub >= 0 

(** TODO: optimize 
    avoid nonterminating when string is empty 
*)
let non_overlap_count ~sub s = 
  let sub_len = String.length sub in 
  let rec aux  acc off = 
    let i = find ~start:off ~sub s  in 
    if i < 0 then acc 
    else aux (acc + 1) (i + sub_len) in
  if String.length sub = 0 then invalid_arg "Ext_string.non_overlap_count"
  else aux 0 0  


let rfind ~sub s =
  let exception Local_exit in   
  let n = String.length sub in
  let i = ref (String.length s - n) in
  try
    while !i >= 0 do
      if unsafe_is_sub ~sub 0 s !i ~len:n then 
        raise_notrace Local_exit;
      decr i
    done;
    -1
  with Local_exit ->
    !i

let tail_from s x = 
  let len = String.length s  in 
  if  x > len then invalid_arg ("Ext_string.tail_from " ^s ^ " : "^ string_of_int x )
  else String.sub s x (len - x)

let equal (x : string) y  = x = y

(* let rec index_rec s lim i c =
   if i >= lim then -1 else
   if String.unsafe_get s i = c then i 
   else index_rec s lim (i + 1) c *)



let rec index_rec_count s lim i c count =
  if i >= lim then -1 else
  if String.unsafe_get s i = c then 
    if count = 1 then i 
    else index_rec_count s lim (i + 1) c (count - 1)
  else index_rec_count s lim (i + 1) c count

let index_count s i c count =     
  let lim = String.length s in 
  if i < 0 || i >= lim || count < 1 then 
    invalid_arg ("index_count: ( " ^string_of_int i ^ "," ^string_of_int count ^ ")" );
  index_rec_count s lim i c count 

(* let index_next s i c =   
   index_count s i c 1  *)

(* let extract_until s cursor c =       
   let len = String.length s in   
   let start = !cursor in 
   if start < 0 || start >= len then (
    cursor := -1;
    ""
    )
   else 
    let i = index_rec s len start c in   
    let finish = 
      if i < 0 then (      
        cursor := -1 ;
        len 
      )
      else (
        cursor := i + 1;
        i 
      ) in 
    String.sub s start (finish - start) *)

let rec rindex_rec s i c =
  if i < 0 then i else
  if String.unsafe_get s i = c then i else rindex_rec s (i - 1) c;;

let rec rindex_rec_opt s i c =
  if i < 0 then None else
  if String.unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c;;

let rindex_neg s c = 
  rindex_rec s (String.length s - 1) c;;

let rindex_opt s c = 
  rindex_rec_opt s (String.length s - 1) c;;


(** TODO: can be improved to return a positive integer instead *)
let rec unsafe_no_char x ch i  last_idx = 
  i > last_idx  || 
  (String.unsafe_get x i <> ch && unsafe_no_char x ch (i + 1)  last_idx)

let rec unsafe_no_char_idx x ch i last_idx = 
  if i > last_idx  then -1 
  else 
  if String.unsafe_get x i <> ch then 
    unsafe_no_char_idx x ch (i + 1)  last_idx
  else i

let no_char x ch i len  : bool =
  let str_len = String.length x in 
  if i < 0 || i >= str_len || len >= str_len then invalid_arg "Ext_string.no_char"   
  else unsafe_no_char x ch i len 


let no_slash x = 
  unsafe_no_char x '/' 0 (String.length x - 1)

let no_slash_idx x = 
  unsafe_no_char_idx x '/' 0 (String.length x - 1)

let no_slash_idx_from x from = 
  let last_idx = String.length x - 1  in 
  assert (from >= 0); 
  unsafe_no_char_idx x '/' from last_idx

let replace_slash_backward (x : string ) = 
  let len = String.length x in 
  if unsafe_no_char x '/' 0  (len - 1) then x 
  else 
    String.map (function 
        | '/' -> '\\'
        | x -> x ) x 

let replace_backward_slash (x : string)=
  let len = String.length x in
  if unsafe_no_char x '\\' 0  (len -1) then x 
  else  
    String.map (function 
        |'\\'-> '/'
        | x -> x) x

let empty = ""

let compare = Bs_hash_stubs.string_length_based_compare

let single_space = " "
let single_colon = ":"

let concat_array sep (s : string array) =   
  let s_len = Array.length s in 
  match s_len with 
  | 0 -> empty 
  | 1 -> Array.unsafe_get s 0
  | _ ->     
    let sep_len = String.length sep in 
    let len = ref 0 in 
    for i = 0 to  s_len - 1 do 
      len := !len + String.length (Array.unsafe_get s i)
    done;
    let target = 
      Bytes.create 
        (!len + (s_len - 1) * sep_len ) in    
    let hd = (Array.unsafe_get s 0) in     
    let hd_len = String.length hd in 
    String.unsafe_blit hd  0  target 0 hd_len;   
    let current_offset = ref hd_len in     
    for i = 1 to s_len - 1 do 
      String.unsafe_blit sep 0 target  !current_offset sep_len;
      let cur = Array.unsafe_get s i in 
      let cur_len = String.length cur in     
      let new_off_set = (!current_offset + sep_len ) in
      String.unsafe_blit cur 0 target new_off_set cur_len; 
      current_offset := 
        new_off_set + cur_len ; 
    done;
    Bytes.unsafe_to_string target   

let concat3 a b c = 
  let a_len = String.length a in 
  let b_len = String.length b in 
  let c_len = String.length c in 
  let len = a_len + b_len + c_len in 
  let target = Bytes.create len in 
  String.unsafe_blit a 0 target 0 a_len ; 
  String.unsafe_blit b 0 target a_len b_len;
  String.unsafe_blit c 0 target (a_len + b_len) c_len;
  Bytes.unsafe_to_string target

let concat4 a b c d =
  let a_len = String.length a in 
  let b_len = String.length b in 
  let c_len = String.length c in 
  let d_len = String.length d in 
  let len = a_len + b_len + c_len + d_len in 

  let target = Bytes.create len in 
  String.unsafe_blit a 0 target 0 a_len ; 
  String.unsafe_blit b 0 target a_len b_len;
  String.unsafe_blit c 0 target (a_len + b_len) c_len;
  String.unsafe_blit d 0 target (a_len + b_len + c_len) d_len;
  Bytes.unsafe_to_string target


let concat5 a b c d e =
  let a_len = String.length a in 
  let b_len = String.length b in 
  let c_len = String.length c in 
  let d_len = String.length d in 
  let e_len = String.length e in 
  let len = a_len + b_len + c_len + d_len + e_len in 

  let target = Bytes.create len in 
  String.unsafe_blit a 0 target 0 a_len ; 
  String.unsafe_blit b 0 target a_len b_len;
  String.unsafe_blit c 0 target (a_len + b_len) c_len;
  String.unsafe_blit d 0 target (a_len + b_len + c_len) d_len;
  String.unsafe_blit e 0 target (a_len + b_len + c_len + d_len) e_len;
  Bytes.unsafe_to_string target



let inter2 a b = 
  concat3 a single_space b 


let inter3 a b c = 
  concat5 a  single_space  b  single_space  c 





let inter4 a b c d =
  concat_array single_space [| a; b ; c; d|]


let parent_dir_lit = ".."    
let current_dir_lit = "."


(* reference {!Bytes.unppercase} *)
let capitalize_ascii (s : string) : string = 
  if String.length s = 0 then s 
  else 
    begin
      let c = String.unsafe_get s 0 in 
      if (c >= 'a' && c <= 'z')
      || (c >= '\224' && c <= '\246')
      || (c >= '\248' && c <= '\254') then 
        let uc = Char.unsafe_chr (Char.code c - 32) in 
        let bytes = Bytes.of_string s in
        Bytes.unsafe_set bytes 0 uc;
        Bytes.unsafe_to_string bytes 
      else s 
    end

let capitalize_sub (s : string) len : string = 
  let slen = String.length s in 
  if  len < 0 || len > slen then invalid_arg "Ext_string.capitalize_sub"
  else 
  if len = 0 then ""
  else 
    let bytes = Bytes.create len in 
    let uc = 
      let c = String.unsafe_get s 0 in 
      if (c >= 'a' && c <= 'z')
      || (c >= '\224' && c <= '\246')
      || (c >= '\248' && c <= '\254') then 
        Char.unsafe_chr (Char.code c - 32) else c in 
    Bytes.unsafe_set bytes 0 uc;
    for i = 1 to len - 1 do 
      Bytes.unsafe_set bytes i (String.unsafe_get s i)
    done ;
    Bytes.unsafe_to_string bytes 



let uncapitalize_ascii =
  String.uncapitalize_ascii

let lowercase_ascii = String.lowercase_ascii

external (.![]) : string -> int -> int = "%string_unsafe_get"

let get_int_1_unsafe (x : string) off : int = 
  x.![off]

let get_int_2_unsafe (x : string) off : int =   
  x.![off] lor   
  x.![off+1] lsl 8

let get_int_3_unsafe (x : string) off : int = 
  x.![off] lor   
  x.![off+1] lsl 8  lor 
  x.![off+2] lsl 16


let get_int_4_unsafe (x : string) off : int =     
  x.![off] lor   
  x.![off+1] lsl 8  lor 
  x.![off+2] lsl 16 lor
  x.![off+3] lsl 24 

let get_1_2_3_4 (x : string) ~off len : int =  
  if len = 1 then get_int_1_unsafe x off 
  else if len = 2 then get_int_2_unsafe x off 
  else if len = 3 then get_int_3_unsafe x off 
  else if len = 4 then get_int_4_unsafe x off 
  else assert false

let unsafe_sub  x offs len =
  let b = Bytes.create len in 
  Ext_bytes.unsafe_blit_string x offs b 0 len;
  (Bytes.unsafe_to_string b)

let is_valid_hash_number (x:string) = 
  let len = String.length x in 
  len > 0 && (
    let a = x.![0] in 
    a <= 57 &&
    (if len > 1 then 
       a > 48 && 
       for_all_from x 1 (function '0' .. '9' -> true | _ -> false)
     else
       a >= 48 )
  ) 


let hash_number_as_i32_exn 
    ( x : string) : int32 = 
  Int32.of_string x    


let first_marshal_char (x : string) = 
    x <> ""   &&
    ( String.unsafe_get x  0 = '\132')
  
end
module Bsc_args : sig 
#1 "bsc_args.mli"
(* Copyright (C) 2020- Authors of ReScript
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

type anon_fun = rev_args:string list -> unit

type string_action =
    String_call of (string -> unit)
  | String_set of string ref
  | String_optional_set of string option ref
  | String_list_add of string list ref
type unit_action =
    Unit_call of (unit -> unit)
  | Unit_lazy of unit lazy_t
  | Unit_set of bool ref
  | Unit_clear of bool ref


type spec = 
  | Unit_dummy  
  | Unit of unit_action   
  | String of string_action


type t = (string * spec * string) array

exception Bad of string
val bad_arg : 
  string -> 'a


val parse_exn :
  usage:string ->
  argv:string array ->
  ?start:int -> ?finish:int -> t -> (rev_args:string list -> unit) -> unit



end = struct
#1 "bsc_args.ml"
(* Copyright (C) 2020- Hongbo Zhang, Authors of ReScript
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)





type anon_fun = rev_args:string list -> unit

type string_action = 
  | String_call of (string -> unit)  
  | String_set of string ref
  | String_optional_set of string option ref 
  | String_list_add of string list ref 

type unit_action = 
  | Unit_call of (unit -> unit) 
  | Unit_lazy of unit lazy_t
  | Unit_set of bool ref
  | Unit_clear of bool ref 

type spec =
  | Unit_dummy  
  | Unit of unit_action
  | String of string_action 


exception Bad = Arg.Bad

let bad_arg s = raise_notrace (Bad s)

type error =
  | Unknown of string
  | Missing of string

type t = spec Ext_spec.t 


let (+>) = Ext_buffer.add_string

let usage_b (buf : Ext_buffer.t) ~usage (speclist : t) =
  buf +> usage;
  buf +> "\nOptions:\n";
  let max_col = ref 0 in 
  Ext_array.iter speclist (fun (key,_,_) -> 
      if String.length key > !max_col then 
        max_col := String.length key
    );
  Ext_array.iter speclist (fun (key,_,doc) -> 
      if not (Ext_string.starts_with doc "*internal*") then begin 
        buf +> "  ";
        buf +> key ; 
        buf +> (String.make (!max_col - String.length key + 2 ) ' ');
        let cur = ref 0 in 
        let doc_length = String.length doc in 
        while !cur < doc_length do 
          match String.index_from_opt doc !cur '\n' with 
          | None -> 
            if !cur <> 0 then begin 
              buf +>  "\n";
              buf +> String.make (!max_col + 4) ' ' ;
            end;
            buf +> String.sub doc !cur (String.length doc - !cur );
            cur := doc_length
          | Some new_line_pos -> 
            if !cur <> 0 then begin 
              buf +>  "\n";
              buf +> String.make (!max_col + 4) ' ' ;
            end;
            buf +> String.sub doc !cur (new_line_pos - !cur );
            cur := new_line_pos + 1
        done ;
        buf +> "\n"
      end
    )
;;



let stop_raise ~usage ~(error : error) (speclist : t )  =
  let b = Ext_buffer.create 200 in  
  begin match error with
    | Unknown ("-help" | "--help" | "-h") -> 
      usage_b b ~usage speclist ;
      Ext_buffer.output_buffer stdout b;
      exit 0      
    | Unknown s ->
      b +> "unknown option: '";
      b +> s ;
      b +> "'.\n"
    | Missing s ->
      b +> "option '";
      b +> s;
      b +> "' needs an argument.\n"      
  end;
  usage_b b ~usage speclist ;
  bad_arg (Ext_buffer.contents b)


let parse_exn  ~usage ~argv ?(start=1) ?(finish=Array.length argv) (speclist : t) 
    (anonfun : rev_args:string list -> unit) =
  let current = ref start in 
  let rev_list = ref [] in 
  while !current < finish do
    let s = argv.(!current) in
    incr current;  
    if s <> "" && s.[0] = '-' then begin
      match Ext_spec.assoc3 speclist s with 
      | Some action -> begin       
          begin match action with 
            | Unit_dummy -> ()
            | Unit r -> 
              begin match r with 
                | Unit_set r -> r := true
                | Unit_clear r -> r := false
                | Unit_call f -> f ()
                | Unit_lazy f -> Lazy.force f
              end
            | String f  ->
              if !current >= finish then stop_raise ~usage ~error:(Missing s) speclist 
              else begin                 
                let arg = argv.(!current) in 
                incr current;  
                match f with 
                | String_call f ->   
                  f arg
                | String_set u -> u := arg
                | String_optional_set s -> s := Some arg
                | String_list_add s -> s := arg :: !s
              end             
          end;      
        end;      
      | None -> stop_raise ~usage ~error:(Unknown s) speclist 
    end else begin
      rev_list := s :: !rev_list;      
    end;
  done;
  anonfun ~rev_args:!rev_list
;;



end
module Ext_filename : sig 
#1 "ext_filename.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)





(* TODO:
   Change the module name, this code is not really an extension of the standard 
    library but rather specific to JS Module name convention. 
*)





(** An extension module to calculate relative path follow node/npm style. 
    TODO : this short name will have to change upon renaming the file.
*)

val is_dir_sep : 
  char -> bool 

val maybe_quote:
  string -> 
  string

val chop_extension_maybe:
  string -> 
  string

(* return an empty string if no extension found *)  
val get_extension_maybe:   
  string -> 
  string


val new_extension:  
  string -> 
  string -> 
  string

val chop_all_extensions_maybe:
  string -> 
  string  

(* OCaml specific abstraction*)
val module_name:  
  string ->
  string




type module_info = {
  module_name : string ;
  case : bool;
}   



val as_module:
  basename:string -> 
  module_info option
end = struct
#1 "ext_filename.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)




let is_dir_sep_unix c = c = '/'
let is_dir_sep_win_cygwin c = 
  c = '/' || c = '\\' || c = ':'

let is_dir_sep = 
  if Sys.unix then is_dir_sep_unix else is_dir_sep_win_cygwin

(* reference ninja.cc IsKnownShellSafeCharacter *)
let maybe_quote ( s : string) = 
  let noneed_quote = 
    Ext_string.for_all s (function
        | '0' .. '9' 
        | 'a' .. 'z' 
        | 'A' .. 'Z'
        | '_' | '+' 
        | '-' | '.'
        | '/' 
        | '@' -> true
        | _ -> false
      )  in 
  if noneed_quote then
    s
  else Filename.quote s 


let chop_extension_maybe name =
  let rec search_dot i =
    if i < 0 || is_dir_sep (String.unsafe_get name i) then name
    else if String.unsafe_get name i = '.' then String.sub name 0 i
    else search_dot (i - 1) in
  search_dot (String.length name - 1)

let get_extension_maybe name =   
  let name_len = String.length name in  
  let rec search_dot name i name_len =
    if i < 0 || is_dir_sep (String.unsafe_get name i) then ""
    else if String.unsafe_get name i = '.' then String.sub name i (name_len - i)
    else search_dot name (i - 1) name_len in
  search_dot name (name_len - 1) name_len

let chop_all_extensions_maybe name =
  let rec search_dot i last =
    if i < 0 || is_dir_sep (String.unsafe_get name i) then 
      (match last with 
       | None -> name
       | Some i -> String.sub name 0 i)  
    else if String.unsafe_get name i = '.' then 
      search_dot (i - 1) (Some i)
    else search_dot (i - 1) last in
  search_dot (String.length name - 1) None


let new_extension name (ext : string) = 
  let rec search_dot name i ext =
    if i < 0 || is_dir_sep (String.unsafe_get name i) then 
      name ^ ext 
    else if String.unsafe_get name i = '.' then 
      let ext_len = String.length ext in
      let buf = Bytes.create (i + ext_len) in 
      Bytes.blit_string name 0 buf 0 i;
      Bytes.blit_string ext 0 buf i ext_len;
      Bytes.unsafe_to_string buf
    else search_dot name (i - 1) ext  in
  search_dot name (String.length name - 1) ext



(** TODO: improve efficiency
    given a path, calcuate its module name 
    Note that `ocamlc.opt -c aa.xx.mli` gives `aa.xx.cmi`
    we can not strip all extensions, otherwise
    we can not tell the difference between "x.cpp.ml" 
    and "x.ml"
*)
let module_name name = 
  let rec search_dot i  name =
    if i < 0  then 
      Ext_string.capitalize_ascii name
    else 
    if String.unsafe_get name i = '.' then 
      Ext_string.capitalize_sub name i 
    else 
      search_dot (i - 1) name in  
  let name = Filename.basename  name in 
  let name_len = String.length name in 
  search_dot (name_len - 1)  name 

type module_info = {
  module_name : string ;
  case : bool;
} 



let rec valid_module_name_aux name off len =
  if off >= len then true 
  else 
    let c = String.unsafe_get name off in 
    match c with 
    | 'A'..'Z' | 'a'..'z' | '0'..'9' | '_' | '\'' | '.' | '[' | ']' -> 
      valid_module_name_aux name (off + 1) len 
    | _ -> false

type state = 
  | Invalid
  | Upper
  | Lower

let valid_module_name name len =     
  if len = 0 then Invalid
  else 
    let c = String.unsafe_get name 0 in 
    match c with 
    | 'A' .. 'Z'
      -> 
      if valid_module_name_aux name 1 len then 
        Upper
      else Invalid  
    | 'a' .. 'z' 
    | '0' .. '9'
    | '_'
    | '[' 
    | ']'
      -> 
      if valid_module_name_aux name 1 len then
        Lower
      else Invalid
    | _ -> Invalid


let as_module ~basename =
  let rec search_dot i  name name_len =
    if i < 0  then
      (* Input e.g, [a_b] *)
      match valid_module_name name name_len with 
      | Invalid -> None 
      | Upper ->  Some {module_name = name; case = true }
      | Lower -> Some {module_name = Ext_string.capitalize_ascii name; case = false}
    else 
    if String.unsafe_get name i = '.' then 
      (*Input e.g, [A_b] *)
      match valid_module_name  name i with 
      | Invalid -> None 
      | Upper -> 
        Some {module_name = Ext_string.capitalize_sub name i; case = true}
      | Lower -> 
        Some {module_name = Ext_string.capitalize_sub name i; case = false}
    else 
      search_dot (i - 1) name name_len in  
  let name_len = String.length basename in       
  search_dot (name_len - 1)  basename name_len

end
module Ext_format : sig 
#1 "ext_format.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)








(** Simplified wrapper module for the standard library [Format] module. 
*) 

type t = private Format.formatter

(* val string : t -> string -> unit

   val break : t -> unit

   val break1 : t -> unit

   val space :  t -> unit

   val group : t -> int -> (unit -> 'a) -> 'a
   (** [group] will record current indentation 
    and indent futher
 *)

   val vgroup : t -> int -> (unit -> 'a) -> 'a

   val paren : t -> (unit -> 'a) -> 'a

   val paren_group : t -> int -> (unit -> 'a) -> 'a

   val brace_group : t -> int -> (unit -> 'a) -> 'a

   val brace_vgroup : t -> int -> (unit -> 'a) -> 'a

   val bracket_group : t -> int -> (unit -> 'a) -> 'a

   val newline : t -> unit

   val to_out_channel : out_channel -> t

   val flush : t -> unit -> unit *)

val pp_print_queue :
  ?pp_sep:(Format.formatter -> unit -> unit) ->
  (Format.formatter -> 'a -> unit) -> Format.formatter -> 'a Queue.t -> unit

end = struct
#1 "ext_format.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)








open Format

type t = formatter

(* let string = pp_print_string *)

(* let break = fun fmt -> pp_print_break fmt 0 0

   let break1 =
   fun fmt -> pp_print_break fmt 0 1 

   let space  fmt  = 
   pp_print_break fmt 1 0
*)
(* let vgroup fmt indent u = 
   pp_open_vbox fmt indent; 
   let v = u () in
   pp_close_box fmt ();
   v

   let group fmt indent u = 
   pp_open_hovbox fmt indent; 
   let v = u () in
   pp_close_box fmt ();
   v

   let paren fmt u = 
   string fmt "(";
   let v = u () in
   string fmt ")";
   v

   let brace fmt u = 
   string fmt "{";
   (* break1 fmt ; *)
   let v = u () in
   string fmt "}";
   v 

   let bracket fmt u = 
   string fmt "[";
   let v = u () in
   string fmt "]";
   v  *)

(* let paren_group st n action = 
   group st n (fun _ -> paren st action)

   let brace_group st n action = 
   group st n (fun _ -> brace st action )

   let brace_vgroup st n action = 
   vgroup st n (fun _ -> 
    string st "{";
    pp_print_break st 0 2;
    let v = vgroup st 0 action in
    pp_print_break st 0 0;
    string st "}";
    v
              )
   let bracket_group st n action = 
   group st n (fun _ -> bracket st action)

   let newline fmt = pp_print_newline fmt ()

   let to_out_channel = formatter_of_out_channel

   (* let non_breaking_space  fmt = string fmt " " *)
   (* let set_needed_space_function _ _ = () *)
   let flush = pp_print_flush
*)
(* let list = pp_print_list *)

let pp_print_queue ?(pp_sep = pp_print_cut) pp_v ppf q =
  Queue.iter (fun q -> pp_v ppf q ;  pp_sep ppf ()) q 

end
module Ext_pervasives : sig 
#1 "ext_pervasives.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)








(** Extension to standard library [Pervavives] module, safe to open 
*)

external reraise: exn -> 'a = "%reraise"

val finally : 
  'a ->
  clean:('a -> unit) -> 
  ('a -> 'b) -> 'b

(* val try_it : (unit -> 'a) ->  unit  *)

val with_file_as_chan : string -> (out_channel -> 'a) -> 'a


val max_int : int -> int -> int 

val min_int : int -> int -> int 
val max_int_option : 
  int option -> 
  int option -> 
  int option 






(* external id : 'a -> 'a = "%identity" *)

(** Copied from {!Btype.hash_variant}:
    need sync up and add test case
*)
(* val hash_variant : string -> int *)

(* val todo : string -> 'a *)

val nat_of_string_exn : string -> int

val parse_nat_of_string:
  string -> 
  int ref -> 
  int 
end = struct
#1 "ext_pervasives.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)






external reraise: exn -> 'a = "%reraise"

let finally v ~clean:action f   = 
  match f v with
  | exception e -> 
    action v ;
    reraise e 
  | e ->  action v ; e 

(* let try_it f  =   
   try ignore (f ()) with _ -> () *)

let with_file_as_chan filename f = 
  finally (open_out_bin filename) ~clean:close_out f 


let max_int (x : int) y =
    if x >= y then x else y

let min_int (x : int) y = 
  if x < y then x else y 
  
let max_int_option (x : int option) y = 
  match x, y with 
  | None, _ -> y 
  | Some _, None ->  x 
  | Some x0 , Some y0 -> 
      if x0 >= y0 then x else y


(* external id : 'a -> 'a = "%identity" *)

(* 
let hash_variant s =
  let accu = ref 0 in
  for i = 0 to String.length s - 1 do
    accu := 223 * !accu + Char.code s.[i]
  done;
  (* reduce to 31 bits *)
  accu := !accu land (1 lsl 31 - 1);
  (* make it signed for 64 bits architectures *)
  if !accu > 0x3FFFFFFF then !accu - (1 lsl 31) else !accu *)

(* let todo loc = 
   failwith (loc ^ " Not supported yet")
*)



let rec int_of_string_aux s acc off len =  
  if off >= len then acc 
  else 
    let d = (Char.code (String.unsafe_get s off) - 48) in 
    if d >=0 && d <= 9 then 
      int_of_string_aux s (10*acc + d) (off + 1) len
    else -1 (* error *)

let nat_of_string_exn (s : string) = 
  let acc = int_of_string_aux s 0 0 (String.length s) in 
  if acc < 0 then invalid_arg s 
  else acc 


(** return index *)
let parse_nat_of_string (s : string) (cursor : int ref) =  
  let current = !cursor in 
  assert (current >= 0);
  let acc = ref 0 in 
  let s_len = String.length s in 
  let todo = ref true in 
  let cur = ref current in 
  while !todo && !cursor < s_len do 
    let d = Char.code (String.unsafe_get s !cur) - 48 in 
    if d >=0 && d <= 9 then begin 
      acc := 10* !acc + d;
      incr cur
    end else todo := false
  done ;
  cursor := !cur;
  !acc 
end
module Ext_fmt
= struct
#1 "ext_fmt.ml"


let with_file_as_pp filename f = 
  Ext_pervasives.finally (open_out_bin filename) ~clean:close_out
    (fun chan -> 
       let fmt = Format.formatter_of_out_channel chan in
       let v = f  fmt in
       Format.pp_print_flush fmt ();
       v
    ) 



let failwithf ~loc fmt = Format.ksprintf (fun s -> failwith (loc ^ s))
    fmt

let invalid_argf fmt = Format.ksprintf invalid_arg fmt


end
module Ext_sys : sig 
#1 "ext_sys.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)



val is_directory_no_exn : string -> bool


val is_windows_or_cygwin : bool 


end = struct
#1 "ext_sys.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

(** TODO: not exported yet, wait for Windows Fix*)

external is_directory_no_exn : string -> bool = "caml_sys_is_directory_no_exn"



let is_windows_or_cygwin = Sys.win32 || Sys.cygwin



end
module Literals
= struct
#1 "literals.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)







let js_array_ctor = "Array"
let js_type_number = "number"
let js_type_string = "string"
let js_type_object = "object"
let js_type_boolean = "boolean"
let js_undefined = "undefined"
let js_prop_length = "length"

let prim = "prim"
let param = "param"
let partial_arg = "partial_arg"
let tmp = "tmp"

let create = "create" (* {!Caml_exceptions.create}*)

let runtime = "runtime" (* runtime directory *)

let stdlib = "stdlib"

let imul = "imul" (* signed int32 mul *)

let setter_suffix = "#="
let setter_suffix_len = String.length setter_suffix

let debugger = "debugger"

let fn_run = "fn_run"
let method_run = "method_run"

let fn_method = "fn_method"
let fn_mk = "fn_mk"
(*let js_fn_runmethod = "js_fn_runmethod"*)





(** nodejs *)
let node_modules = "node_modules"
let node_modules_length = String.length "node_modules"
let package_json = "package.json"
let bsconfig_json = "bsconfig.json"
let build_ninja = "build.ninja"

(* Name of the library file created for each external dependency. *)
let library_file = "lib"

let suffix_a = ".a"
let suffix_cmj = ".cmj"
let suffix_cmo = ".cmo"
let suffix_cma = ".cma"
let suffix_cmi = ".cmi"
let suffix_cmx = ".cmx"
let suffix_cmxa = ".cmxa"
let suffix_mll = ".mll"
let suffix_ml = ".ml"
let suffix_mli = ".mli"
let suffix_re = ".re"
let suffix_rei = ".rei"
let suffix_res = ".res"
let suffix_resi = ".resi"
let suffix_mlmap = ".mlmap"

let suffix_cmt = ".cmt"
let suffix_cmti = ".cmti"
let suffix_ast = ".ast"
let suffix_iast = ".iast"
let suffix_d = ".d"
let suffix_js = ".js"
let suffix_bs_js = ".bs.js"
let suffix_mjs = ".mjs"
let suffix_cjs = ".cjs"
let suffix_gen_js = ".gen.js"
let suffix_gen_tsx = ".gen.tsx"

let commonjs = "commonjs"

let es6 = "es6"
let es6_global = "es6-global"

let unused_attribute = "Unused attribute "







(** Used when produce node compatible paths *)
let node_sep = "/"
let node_parent = ".."
let node_current = "."

let gentype_import = "genType.import"

let bsbuild_cache = ".bsbuild"

let sourcedirs_meta = ".sourcedirs.json"

(* Note the build system should check the validity of filenames
   espeically, it should not contain '-'
*)
let ns_sep_char = '-'
let ns_sep = "-"
let exception_id = "RE_EXN_ID"

let polyvar_hash = "NAME"
let polyvar_value = "VAL"

let cons = "::"
let hd = "hd"
let tl = "tl"

let lazy_done = "LAZY_DONE"
let lazy_val = "VAL"

let pure = "@__PURE__"
end
module Ext_path : sig 
#1 "ext_path.mli"
(* Copyright (C) 2017 Authors of ReScript
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

type t 


(** Js_output is node style, which means 
    separator is only '/'

    if the path contains 'node_modules', 
    [node_relative_path] will discard its prefix and 
    just treat it as a library instead
*)
val simple_convert_node_path_to_os_path : string -> string



(**
   [combine path1 path2]
   1. add some simplifications when concatenating
   2. when [path2] is absolute, return [path2]
*)  
val combine : 
  string -> 
  string -> 
  string    



(**
   {[
     get_extension "a.txt" = ".txt"
       get_extension "a" = ""
   ]}
*)





val node_rebase_file :
  from:string -> 
  to_:string ->
  string -> 
  string 

(** 
   TODO: could be highly optimized
   if [from] and [to] resolve to the same path, a zero-length string is returned 
   Given that two paths are directory

   A typical use case is 
   {[
     Filename.concat 
       (rel_normalized_absolute_path cwd (Filename.dirname a))
       (Filename.basename a)
   ]}
*)
val rel_normalized_absolute_path : from:string -> string -> string 


val normalize_absolute_path : string -> string 


val absolute_cwd_path : string -> string 

(** [concat dirname filename]
    The same as {!Filename.concat} except a tiny optimization 
    for current directory simplification
*)
val concat : string -> string -> string 

val check_suffix_case : 
  string -> string -> bool



(* It is lazy so that it will not hit errors when in script mode *)
val package_dir : string Lazy.t

end = struct
#1 "ext_path.ml"
(* Copyright (C) 2017 Hongbo Zhang, Authors of ReScript
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

(* [@@@warning "-37"] *)
type t =  
  (* | File of string  *)
  | Dir of string  
[@@unboxed]

let simple_convert_node_path_to_os_path =
  if Sys.unix then fun x -> x 
  else if Sys.win32 || Sys.cygwin then 
    Ext_string.replace_slash_backward 
  else failwith ("Unknown OS : " ^ Sys.os_type)


let cwd = lazy (Sys.getcwd())

let split_by_sep_per_os : string -> string list = 
  if Ext_sys.is_windows_or_cygwin then 
    fun x -> 
      (* on Windows, we can still accept -bs-package-output lib/js *)
      Ext_string.split_by 
        (fun x -> match x with |'/' |'\\' -> true | _ -> false) x
  else 
    fun x -> Ext_string.split x '/'

(** example
    {[
      "/bb/mbigc/mbig2899/bgit/bucklescript/jscomp/stdlib/external/pervasives.cmj"
        "/bb/mbigc/mbig2899/bgit/bucklescript/jscomp/stdlib/ocaml_array.ml"
    ]}

    The other way
    {[

      "/bb/mbigc/mbig2899/bgit/bucklescript/jscomp/stdlib/ocaml_array.ml"
        "/bb/mbigc/mbig2899/bgit/bucklescript/jscomp/stdlib/external/pervasives.cmj"
    ]}
    {[
      "/bb/mbigc/mbig2899/bgit/bucklescript/jscomp/stdlib//ocaml_array.ml"
    ]}
    {[
      /a/b
      /c/d
    ]}
*)
let node_relative_path 
    ~from:(file_or_dir_2 : t )
    (file_or_dir_1 : t) 
  = 
  let relevant_dir1 = 
    match file_or_dir_1 with 
    | Dir x -> x 
    (* | File file1 ->  Filename.dirname file1 *) in
  let relevant_dir2 = 
    match file_or_dir_2 with 
    | Dir x -> x 
    (* | File file2 -> Filename.dirname file2  *) in
  let dir1 = split_by_sep_per_os relevant_dir1 in
  let dir2 = split_by_sep_per_os relevant_dir2 in
  let rec go (dir1 : string list) (dir2 : string list) = 
    match dir1, dir2 with 
    | "." :: xs, ys -> go xs ys 
    | xs , "." :: ys -> go xs ys 
    | x::xs , y :: ys when x = y
      -> go xs ys 
    | _, _ -> 
      Ext_list.map_append  dir2  dir1  (fun _ ->  Literals.node_parent)
  in
  match go dir1 dir2 with
  | (x :: _ ) as ys when x = Literals.node_parent -> 
    String.concat Literals.node_sep ys
  | ys -> 
    String.concat Literals.node_sep  
    @@ Literals.node_current :: ys


let node_concat ~dir base =
  dir ^ Literals.node_sep ^ base 

let node_rebase_file ~from ~to_ file = 

  node_concat
    ~dir:(
      if from = to_ then Literals.node_current
      else node_relative_path ~from:(Dir from) (Dir to_)) 
    file


(***
   {[
     Filename.concat "." "";;
     "./"
   ]}
*)
let combine path1 path2 =  
  if Filename.is_relative path2 then
    if Ext_string.is_empty path2 then 
      path1
    else 
    if path1 = Filename.current_dir_name then 
      path2
    else
    if path2 = Filename.current_dir_name 
    then path1
    else
      Filename.concat path1 path2 
  else
    path2








let (//) x y =
  if x = Filename.current_dir_name then y
  else if y = Filename.current_dir_name then x 
  else Filename.concat x y 

(**
   {[
     split_aux "//ghosg//ghsogh/";;
     - : string * string list = ("/", ["ghosg"; "ghsogh"])
   ]}
   Note that 
   {[
     Filename.dirname "/a/" = "/"
       Filename.dirname "/a/b/" = Filename.dirname "/a/b" = "/a"
   ]}
   Special case:
   {[
     basename "//" = "/"
       basename "///"  = "/"
   ]}
   {[
     basename "" =  "."
       basename "" = "."
       dirname "" = "."
       dirname "" =  "."
   ]}  
*)
let split_aux p =
  let rec go p acc =
    let dir = Filename.dirname p in
    if dir = p then dir, acc
    else
      let new_path = Filename.basename p in 
      if Ext_string.equal new_path Filename.dir_sep then 
        go dir acc 
        (* We could do more path simplification here
           leave to [rel_normalized_absolute_path]
        *)
      else 
        go dir (new_path :: acc)

  in go p []





(** 
   TODO: optimization
   if [from] and [to] resolve to the same path, a zero-length string is returned 

   This function is useed in [es6-global] and 
   [amdjs-global] format and tailored for `rollup`
*)
let rel_normalized_absolute_path ~from to_ =
  let root1, paths1 = split_aux from in 
  let root2, paths2 = split_aux to_ in 
  if root1 <> root2 then root2
  else
    let rec go xss yss =
      match xss, yss with 
      | x::xs, y::ys -> 
        if Ext_string.equal x  y then go xs ys 
        else if x = Filename.current_dir_name then go xs yss 
        else if y = Filename.current_dir_name then go xss ys
        else 
          let start = 
            Ext_list.fold_left xs Ext_string.parent_dir_lit (fun acc  _  -> acc // Ext_string.parent_dir_lit )
          in 
          Ext_list.fold_left yss start (fun acc v -> acc // v)
      | [], [] -> Ext_string.empty
      | [], y::ys -> Ext_list.fold_left ys y (fun acc x -> acc // x) 
      | _::xs, [] ->
        Ext_list.fold_left xs Ext_string.parent_dir_lit (fun acc _ -> acc // Ext_string.parent_dir_lit )
    in
    let v =  go paths1 paths2  in 

    if Ext_string.is_empty v then  Literals.node_current
    else 
    if
      v = "."
      || v = ".."
      || Ext_string.starts_with v "./"  
      || Ext_string.starts_with v "../" 
    then v 
    else "./" ^ v 

(*TODO: could be hgighly optimized later 
  {[
    normalize_absolute_path "/gsho/./..";;

    normalize_absolute_path "/a/b/../c../d/e/f";;

    normalize_absolute_path "/gsho/./..";;

    normalize_absolute_path "/gsho/./../..";;

    normalize_absolute_path "/a/b/c/d";;

    normalize_absolute_path "/a/b/c/d/";;

    normalize_absolute_path "/a/";;

    normalize_absolute_path "/a";;
  ]}
*)
(** See tests in {!Ounit_path_tests} *)
let normalize_absolute_path x =
  let drop_if_exist xs =
    match xs with 
    | [] -> []
    | _ :: xs -> xs in 
  let rec normalize_list acc paths =
    match paths with 
    | [] -> acc 
    | x :: xs -> 
      if Ext_string.equal x Ext_string.current_dir_lit then 
        normalize_list acc xs 
      else if Ext_string.equal x Ext_string.parent_dir_lit then 
        normalize_list (drop_if_exist acc ) xs 
      else   
        normalize_list (x::acc) xs 
  in
  let root, paths = split_aux x in
  let rev_paths =  normalize_list [] paths in 
  let rec go acc rev_paths =
    match rev_paths with 
    | [] -> Filename.concat root acc 
    | last::rest ->  go (Filename.concat last acc ) rest  in 
  match rev_paths with 
  | [] -> root 
  | last :: rest -> go last rest 




let absolute_path cwd s = 
  let process s = 
    let s = 
      if Filename.is_relative s then
        Lazy.force cwd // s 
      else s in
    (* Now simplify . and .. components *)
    let rec aux s =
      let base,dir  = Filename.basename s, Filename.dirname s  in
      if dir = s then dir
      else if base = Filename.current_dir_name then aux dir
      else if base = Filename.parent_dir_name then Filename.dirname (aux dir)
      else aux dir // base
    in aux s  in 
  process s 

let absolute_cwd_path s = 
  absolute_path cwd  s 

(* let absolute cwd s =   
   match s with 
   | File x -> File (absolute_path cwd x )
   | Dir x -> Dir (absolute_path cwd x) *)

let concat dirname filename =
  if filename = Filename.current_dir_name then dirname
  else if dirname = Filename.current_dir_name then filename
  else Filename.concat dirname filename


let check_suffix_case =
  Ext_string.ends_with

(* Input must be absolute directory *)
let rec find_root_filename ~cwd filename   = 
  if Sys.file_exists ( Filename.concat cwd  filename) then cwd
  else 
    let cwd' = Filename.dirname cwd in 
    if String.length cwd' < String.length cwd then  
      find_root_filename ~cwd:cwd'  filename 
    else 
      Ext_fmt.failwithf 
        ~loc:__LOC__
        "%s not found from %s" filename cwd


let find_package_json_dir cwd  = 
  find_root_filename ~cwd  Literals.bsconfig_json

let package_dir = lazy (find_package_json_dir (Lazy.force cwd))

end
module Ext_util : sig 
#1 "ext_util.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)



val power_2_above : int -> int -> int


val stats_to_string : Hashtbl.statistics -> string 
end = struct
#1 "ext_util.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

(**
   {[
     (power_2_above 16 63 = 64)
       (power_2_above 16 76 = 128)
   ]}
*)
let rec power_2_above x n =
  if x >= n then x
  else if x * 2 > Sys.max_array_length then x
  else power_2_above (x * 2) n


let stats_to_string ({num_bindings; num_buckets; max_bucket_length; bucket_histogram} : Hashtbl.statistics) = 
  Printf.sprintf 
    "bindings: %d,buckets: %d, longest: %d, hist:[%s]" 
    num_bindings 
    num_buckets 
    max_bucket_length
    (String.concat "," (Array.to_list (Array.map string_of_int bucket_histogram)))
end
module Hash_gen
= struct
#1 "hash_gen.ml"
(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with    *)
(*  the special exception on linking described in file ../LICENSE.     *)
(*                                                                     *)
(***********************************************************************)

(* Hash tables *)




(* We do dynamic hashing, and resize the table and rehash the elements
   when buckets become too long. *)

type ('a, 'b) bucket =
  | Empty
  | Cons of {
      mutable key : 'a ; 
      mutable data : 'b ; 
      mutable next :  ('a, 'b) bucket
    }

type ('a, 'b) t =
  { mutable size: int;                        (* number of entries *)
    mutable data: ('a, 'b) bucket array;  (* the buckets *)
    initial_size: int;                        (* initial array size *)
  }



let create  initial_size =
  let s = Ext_util.power_2_above 16 initial_size in
  { initial_size = s; size = 0; data = Array.make s Empty }

let clear h =
  h.size <- 0;
  let len = Array.length h.data in
  for i = 0 to len - 1 do
    Array.unsafe_set h.data i  Empty  
  done

let reset h =
  h.size <- 0;
  h.data <- Array.make h.initial_size Empty


let length h = h.size

let resize indexfun h =
  let odata = h.data in
  let osize = Array.length odata in
  let nsize = osize * 2 in
  if nsize < Sys.max_array_length then begin
    let ndata = Array.make nsize Empty in
    let ndata_tail = Array.make nsize Empty in 
    h.data <- ndata;          (* so that indexfun sees the new bucket count *)
    let rec insert_bucket = function
        Empty -> ()
      | Cons {key; next} as cell ->
        let nidx = indexfun h key in
        begin match Array.unsafe_get ndata_tail nidx with 
          | Empty -> 
            Array.unsafe_set ndata nidx cell
          | Cons tail ->
            tail.next <- cell  
        end;
        Array.unsafe_set ndata_tail nidx cell;
        insert_bucket next
    in
    for i = 0 to osize - 1 do
      insert_bucket (Array.unsafe_get odata i)
    done;
    for i = 0 to nsize - 1 do 
      match Array.unsafe_get ndata_tail i with 
      | Empty -> ()  
      | Cons tail -> tail.next <- Empty
    done   
  end



let iter h f =
  let rec do_bucket = function
    | Empty ->
      ()
    | Cons l  ->
      f l.key l.data; do_bucket l.next in
  let d = h.data in
  for i = 0 to Array.length d - 1 do
    do_bucket (Array.unsafe_get d i)
  done

let fold h init f =
  let rec do_bucket b accu =
    match b with
      Empty ->
      accu
    | Cons l ->
      do_bucket l.next (f l.key l.data accu) in
  let d = h.data in
  let accu = ref init in
  for i = 0 to Array.length d - 1 do
    accu := do_bucket (Array.unsafe_get d i) !accu
  done;
  !accu

let to_list h f =
  fold h [] (fun k data acc -> f k data :: acc)  




let rec small_bucket_mem (lst : _ bucket) eq key  =
  match lst with 
  | Empty -> false 
  | Cons lst -> 
    eq  key lst.key ||
    match lst.next with
    | Empty -> false 
    | Cons lst -> 
      eq key lst.key  || 
      match lst.next with 
      | Empty -> false 
      | Cons lst -> 
        eq key lst.key  ||
        small_bucket_mem lst.next eq key 


let rec small_bucket_opt eq key (lst : _ bucket) : _ option =
  match lst with 
  | Empty -> None 
  | Cons lst -> 
    if eq  key lst.key then Some lst.data else 
      match lst.next with
      | Empty -> None 
      | Cons lst -> 
        if eq key lst.key then Some lst.data else 
          match lst.next with 
          | Empty -> None 
          | Cons lst -> 
            if eq key lst.key  then Some lst.data else 
              small_bucket_opt eq key lst.next


let rec small_bucket_key_opt eq key (lst : _ bucket) : _ option =
  match lst with 
  | Empty -> None 
  | Cons {key=k;  next} -> 
    if eq  key k then Some k else 
      match next with
      | Empty -> None 
      | Cons {key=k; next} -> 
        if eq key k then Some k else 
          match next with 
          | Empty -> None 
          | Cons {key=k; next} -> 
            if eq key k  then Some k else 
              small_bucket_key_opt eq key next


let rec small_bucket_default eq key default (lst : _ bucket) =
  match lst with 
  | Empty -> default 
  | Cons lst -> 
    if eq  key lst.key then  lst.data else 
      match lst.next with
      | Empty -> default 
      | Cons lst -> 
        if eq key lst.key then  lst.data else 
          match lst.next with 
          | Empty -> default 
          | Cons lst -> 
            if eq key lst.key  then lst.data else 
              small_bucket_default eq key default lst.next

let rec remove_bucket 
    h  (i : int)
    key 
    ~(prec : _ bucket) 
    (buck : _ bucket) 
    eq_key = 
  match buck with   
  | Empty ->
    ()
  | Cons {key=k; next }  ->
    if eq_key k key 
    then begin
      h.size <- h.size - 1;
      match prec with
      | Empty -> Array.unsafe_set h.data i  next
      | Cons c -> c.next <- next
    end
    else remove_bucket h i key ~prec:buck next eq_key

let rec replace_bucket key data (buck : _ bucket) eq_key = 
  match buck with   
  | Empty ->
    true
  | Cons slot ->
    if eq_key slot.key key
    then (slot.key <- key; slot.data <- data; false)
    else replace_bucket key data slot.next eq_key

module type S = sig 
  type key
  type 'a t
  val create: int -> 'a t
  val clear: 'a t -> unit
  val reset: 'a t -> unit

  val add: 'a t -> key -> 'a -> unit
  val add_or_update: 
    'a t -> 
    key -> 
    update:('a -> 'a) -> 
    'a -> unit 
  val remove: 'a t -> key -> unit
  val find_exn: 'a t -> key -> 'a
  val find_all: 'a t -> key -> 'a list
  val find_opt: 'a t -> key  -> 'a option

  (** return the key found in the hashtbl.
      Use case: when you find the key existed in hashtbl, 
      you want to use the one stored in the hashtbl. 
      (they are semantically equivlanent, but may have other information different) 
  *)
  val find_key_opt: 'a t -> key -> key option 

  val find_default: 'a t -> key -> 'a -> 'a 

  val replace: 'a t -> key -> 'a -> unit
  val mem: 'a t -> key -> bool
  val iter: 'a t -> (key -> 'a -> unit) -> unit
  val fold: 
    'a t -> 'b ->
    (key -> 'a -> 'b -> 'b) ->  'b
  val length: 'a t -> int
  (* val stats: 'a t -> Hashtbl.statistics *)
  val to_list : 'a t -> (key -> 'a -> 'c) -> 'c list
  val of_list2: key list -> 'a list -> 'a t
end





end
module Hash_string : sig 
#1 "hash_string.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


include Hash_gen.S with type key = string




end = struct
#1 "hash_string.ml"
# 9 "ext/hash.cppo.ml"
type key = string
type 'a t = (key, 'a)  Hash_gen.t 
let key_index (h : _ t ) (key : key) =
  (Bs_hash_stubs.hash_string  key ) land (Array.length h.data - 1)
let eq_key = Ext_string.equal 

  
# 33 "ext/hash.cppo.ml"
  type ('a, 'b) bucket = ('a,'b) Hash_gen.bucket
  let create = Hash_gen.create
  let clear = Hash_gen.clear
  let reset = Hash_gen.reset
  let iter = Hash_gen.iter
  let to_list = Hash_gen.to_list
  let fold = Hash_gen.fold
  let length = Hash_gen.length
  (* let stats = Hash_gen.stats *)



  let add (h : _ t) key data =
    let i = key_index h key in
    let h_data = h.data in   
    Array.unsafe_set h_data i (Cons{key; data; next=Array.unsafe_get h_data i});
    h.size <- h.size + 1;
    if h.size > Array.length h_data lsl 1 then Hash_gen.resize key_index h

  (* after upgrade to 4.04 we should provide an efficient [replace_or_init] *)
  let add_or_update 
      (h : 'a t) 
      (key : key) 
      ~update:(modf : 'a -> 'a) 
      (default :  'a) : unit =
    let rec find_bucket (bucketlist : _ bucket) : bool =
      match bucketlist with
      | Cons rhs  ->
        if eq_key rhs.key key then begin rhs.data <- modf rhs.data; false end
        else find_bucket rhs.next
      | Empty -> true in
    let i = key_index h key in 
    let h_data = h.data in 
    if find_bucket (Array.unsafe_get h_data i) then
      begin 
        Array.unsafe_set h_data i  (Cons{key; data=default; next = Array.unsafe_get h_data i});
        h.size <- h.size + 1 ;
        if h.size > Array.length h_data lsl 1 then Hash_gen.resize key_index h 
      end

  let remove (h : _ t ) key =
    let i = key_index h key in
    let h_data = h.data in 
    Hash_gen.remove_bucket h i key ~prec:Empty (Array.unsafe_get h_data i) eq_key

  (* for short bucket list, [find_rec is not called ] *)
  let rec find_rec key (bucketlist : _ bucket) = match bucketlist with  
    | Empty ->
      raise Not_found
    | Cons rhs  ->
      if eq_key key rhs.key then rhs.data else find_rec key rhs.next

  let find_exn (h : _ t) key =
    match Array.unsafe_get h.data (key_index h key) with
    | Empty -> raise Not_found
    | Cons rhs  ->
      if eq_key key rhs.key then rhs.data else
        match rhs.next with
        | Empty -> raise Not_found
        | Cons rhs  ->
          if eq_key key rhs.key then rhs.data else
            match rhs.next with
            | Empty -> raise Not_found
            | Cons rhs ->
              if eq_key key rhs.key  then rhs.data else find_rec key rhs.next

  let find_opt (h : _ t) key =
    Hash_gen.small_bucket_opt eq_key key (Array.unsafe_get h.data (key_index h key))

  let find_key_opt (h : _ t) key =
    Hash_gen.small_bucket_key_opt eq_key key (Array.unsafe_get h.data (key_index h key))

  let find_default (h : _ t) key default = 
    Hash_gen.small_bucket_default eq_key key default (Array.unsafe_get h.data (key_index h key))

  let find_all (h : _ t) key =
    let rec find_in_bucket (bucketlist : _ bucket) = match bucketlist with 
      | Empty ->
        []
      | Cons rhs  ->
        if eq_key key rhs.key
        then rhs.data :: find_in_bucket rhs.next
        else find_in_bucket rhs.next in
    find_in_bucket (Array.unsafe_get h.data (key_index h key))


  let replace h key data =
    let i = key_index h key in
    let h_data = h.data in 
    let l = Array.unsafe_get h_data i in
    if Hash_gen.replace_bucket key data l eq_key then 
      begin 
        Array.unsafe_set h_data i (Cons{key; data; next=l});
        h.size <- h.size + 1;
        if h.size > Array.length h_data lsl 1 then Hash_gen.resize key_index h;
      end 

  let mem (h : _ t) key = 
    Hash_gen.small_bucket_mem 
      (Array.unsafe_get h.data (key_index h key))
      eq_key key 


  let of_list2 ks vs = 
    let len = List.length ks in 
    let map = create len in 
    List.iter2 (fun k v -> add map k v) ks vs ; 
    map


end
module Js_config : sig 
#1 "js_config.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)





(* val get_packages_info :
   unit -> Js_packages_info.t *)


(** set/get header *)
val no_version_header : bool ref 


(** return [package_name] and [path] 
    when in script mode: 
*)

(* val get_current_package_name_and_path : 
   Js_packages_info.module_system -> 
   Js_packages_info.info_query *)


(* val set_package_name : string -> unit  
   val get_package_name : unit -> string option *)

(** cross module inline option *)
val cross_module_inline : bool ref

(** diagnose option *)
val diagnose : bool ref 
val get_diagnose : unit -> bool 
(* val set_diagnose : bool -> unit  *)


(** options for builtin ppx *)
val no_builtin_ppx : bool ref 






(** check-div-by-zero option *)
val check_div_by_zero : bool ref 
val get_check_div_by_zero : unit -> bool 



val tool_name : string


val syntax_only  : bool ref
val binary_ast : bool ref




val debug : bool ref

val cmi_only  : bool ref
val cmj_only : bool ref 
(* stopped after generating cmj *)
val force_cmi : bool ref 
val force_cmj : bool ref

val jsx_version : int ref

val js_stdout : bool ref 

val all_module_aliases : bool ref 

val no_stdlib: bool ref
val no_export: bool ref

val as_ppx : bool ref 


val customize_runtime : string option ref 
val as_pp: bool ref

val self_stack : string Stack.t

val modules : bool ref
end = struct
#1 "js_config.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)







(** Browser is not set via command line only for internal use *)


let no_version_header = ref false

let cross_module_inline = ref false



let diagnose = ref false
let get_diagnose () = 
  !diagnose


(* let (//) = Filename.concat *)

(* let get_packages_info () = !packages_info *)

let no_builtin_ppx = ref false




let tool_name = "ReScript"

let check_div_by_zero = ref true
let get_check_div_by_zero () = !check_div_by_zero



let syntax_only = ref false
let binary_ast = ref false



let debug = ref false

let cmi_only = ref false  
let cmj_only = ref false

let force_cmi = ref false
let force_cmj = ref false

let jsx_version = ref (-1)


let js_stdout = ref true

let all_module_aliases = ref false

let no_stdlib = ref false

let no_export = ref false



let as_ppx = ref false



let customize_runtime = ref None 

let as_pp = ref false

let self_stack : string Stack.t = Stack.create ()

let modules = ref false
end
module Map_gen : sig 
#1 "map_gen.mli"
type ('key, + 'a) t = private
  | Empty
  | Leaf of {
      k : 'key ;
      v : 'a
    }
  | Node of {
      l : ('key,'a) t ;
      k : 'key ;
      v : 'a ;
      r : ('key,'a) t ;
      h : int
    }


val cardinal : ('a, 'b) t -> int

val bindings : ('a, 'b) t -> ('a * 'b) list
val fill_array_with_f :
  ('a, 'b) t -> int -> 'c array -> ('a -> 'b -> 'c) -> int
val fill_array_aux : ('a, 'b) t -> int -> ('a * 'b) array -> int
val to_sorted_array : ('key, 'a) t -> ('key * 'a) array
val to_sorted_array_with_f : ('a, 'b) t -> ('a -> 'b -> 'c) -> 'c array

val keys : ('a, 'b) t -> 'a list

val height : ('a, 'b) t -> int


val singleton : 'a -> 'b -> ('a, 'b) t

val [@inline] unsafe_node : 
  'a -> 
  'b -> 
  ('a, 'b ) t ->
  ('a, 'b ) t ->
  int -> 
  ('a, 'b ) t

(** smaller comes first *)
val [@inline] unsafe_two_elements :
  'a -> 
  'b -> 
  'a -> 
  'b -> 
  ('a, 'b) t

val bal : ('a, 'b) t -> 'a -> 'b -> ('a, 'b) t -> ('a, 'b) t
val empty : ('a, 'b) t
val is_empty : ('a, 'b) t -> bool




val merge : ('a, 'b) t -> ('a, 'b) t -> ('a, 'b) t
val iter : ('a, 'b) t -> ('a -> 'b -> unit) -> unit
val map : ('a, 'b) t -> ('b -> 'c) -> ('a, 'c) t
val mapi : ('a, 'b) t -> ('a -> 'b -> 'c) -> ('a, 'c) t
val fold : ('a, 'b) t -> 'c -> ('a -> 'b -> 'c -> 'c) -> 'c
val for_all : ('a, 'b) t -> ('a -> 'b -> bool) -> bool
val exists : ('a, 'b) t -> ('a -> 'b -> bool) -> bool


val join : ('a, 'b) t -> 'a -> 'b -> ('a, 'b) t -> ('a, 'b) t
val concat : ('a, 'b) t -> ('a, 'b) t -> ('a, 'b) t
val concat_or_join :
  ('a, 'b) t -> 'a -> 'b option -> ('a, 'b) t -> ('a, 'b) t

module type S =
sig
  type key
  type +'a t
  val empty : 'a t
  val compare_key : key -> key -> int
  val is_empty : 'a t -> bool
  val mem : 'a t -> key -> bool
  val to_sorted_array : 'a t -> (key * 'a) array
  val to_sorted_array_with_f : 'a t -> (key -> 'a -> 'b) -> 'b array
  val add : 'a t -> key -> 'a -> 'a t
  val adjust : 'a t -> key -> ('a option -> 'a) -> 'a t
  val singleton : key -> 'a -> 'a t
  val remove : 'a t -> key -> 'a t
  (* val merge :
     'a t -> 'b t -> (key -> 'a option -> 'b option -> 'c option) -> 'c t *)
  val disjoint_merge_exn : 
    'a t -> 
    'a t -> 
    (key -> 'a -> 'a -> exn) -> 
    'a t

  val iter : 'a t -> (key -> 'a -> unit) -> unit
  val fold : 'a t -> 'b -> (key -> 'a -> 'b -> 'b) -> 'b
  val for_all : 'a t -> (key -> 'a -> bool) -> bool
  val exists : 'a t -> (key -> 'a -> bool) -> bool
  (* val filter : 'a t -> (key -> 'a -> bool) -> 'a t *)
  (* val partition : 'a t -> (key -> 'a -> bool) -> 'a t * 'a t *)
  val cardinal : 'a t -> int
  val bindings : 'a t -> (key * 'a) list
  val keys : 'a t -> key list
  (* val choose : 'a t -> key * 'a *)

  val find_exn : 'a t -> key -> 'a
  val find_opt : 'a t -> key -> 'a option
  val find_default : 'a t -> key -> 'a -> 'a
  val map : 'a t -> ('a -> 'b) -> 'b t
  val mapi : 'a t -> (key -> 'a -> 'b) -> 'b t
  val of_list : (key * 'a) list -> 'a t
  val of_array : (key * 'a) array -> 'a t
  val add_list : (key * 'b) list -> 'b t -> 'b t
end

end = struct
#1 "map_gen.ml"
(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with    *)
(*  the special exception on linking described in file ../LICENSE.     *)
(*                                                                     *)
(***********************************************************************)

[@@@warnerror "+55"]
(* adapted from stdlib *)

type ('key,'a) t0 =
  | Empty
  | Leaf of {k : 'key ; v : 'a}
  | Node of {
      l : ('key,'a) t0 ;
      k : 'key ;
      v : 'a ;
      r : ('key,'a) t0 ;
      h : int
    }
type ('key,'a) parital_node = {
  l : ('key,'a) t0 ;
  k : 'key ;
  v : 'a ;
  r : ('key,'a) t0 ;
  h : int
}
external  (~!) : ('key,'a) t0 -> ('key, 'a) parital_node = "%identity"
let  empty = Empty
let rec map x f = match x with
    Empty -> Empty
  | Leaf {k;v} -> Leaf {k; v = f v}  
  | Node ({l; v ; r} as x) ->
    let l' = map l f in
    let d' = f v in
    let r' = map r f in
    Node { x with  l = l';  v = d'; r = r'}

let rec mapi x f = match x with
    Empty -> Empty
  | Leaf {k;v} -> Leaf {k; v = f k v}  
  | Node ({l; k ; v ; r} as x) ->
    let l' = mapi l f in
    let v' = f k v in
    let r' = mapi r f in
    Node {x with l = l'; v = v'; r = r'}

let [@inline] calc_height a b = (if a >= b  then a else b) + 1 
let [@inline] singleton k v = Leaf {k;v}
let [@inline] height = function
  | Empty -> 0
  | Leaf _ -> 1
  | Node {h} -> h

let [@inline] unsafe_node k v l  r h =   
  Node {l; k; v; r; h}
let [@inline] unsafe_two_elements k1 v1 k2 v2 = 
  unsafe_node k2 v2 (singleton k1 v1) empty 2   
let [@inline] unsafe_node_maybe_leaf k v l r h =   
  if h = 1 then Leaf {k ; v}   
  else Node{l;k;v;r; h }           


type ('key, + 'a) t = ('key,'a) t0 = private
  | Empty
  | Leaf of {
      k : 'key ;
      v : 'a
    }
  | Node of {
      l : ('key,'a) t ;
      k : 'key ;
      v : 'a ;
      r : ('key,'a) t ;
      h : int
    }

let rec cardinal_aux acc  = function
  | Empty -> acc 
  | Leaf _ -> acc + 1
  | Node {l; r} -> 
    cardinal_aux  (cardinal_aux (acc + 1)  r ) l 

let cardinal s = cardinal_aux 0 s 

let rec bindings_aux accu = function
  | Empty -> accu
  | Leaf {k;v} -> (k,v) :: accu
  | Node {l;k;v;r} -> bindings_aux ((k, v) :: bindings_aux accu r) l

let bindings s =
  bindings_aux [] s

let rec fill_array_with_f (s : _ t) i arr  f : int =    
  match s with 
  | Empty -> i 
  | Leaf  {k;v} -> 
    Array.unsafe_set arr i (f k v); i + 1
  | Node {l; k; v; r} -> 
    let inext = fill_array_with_f l i arr f in 
    Array.unsafe_set arr inext (f k v);
    fill_array_with_f r (inext + 1) arr f

let rec fill_array_aux (s : _ t) i arr : int =    
  match s with 
  | Empty -> i 
  | Leaf {k;v} -> 
    Array.unsafe_set arr i (k, v); i + 1
  | Node {l;k;v;r} -> 
    let inext = fill_array_aux l i arr in 
    Array.unsafe_set arr inext (k,v);
    fill_array_aux r (inext + 1) arr 


let to_sorted_array (s : ('key,'a) t)  : ('key * 'a ) array =    
  match s with 
  | Empty -> [||]
  | Leaf {k;v} -> [|k,v|]
  | Node {l;k;v;r} -> 
    let len = 
      cardinal_aux (cardinal_aux 1 r) l in 
    let arr =
      Array.make len (k,v) in  
    ignore (fill_array_aux s 0 arr : int);
    arr 

let to_sorted_array_with_f (type key a b ) (s : (key,a) t)  (f : key -> a -> b): b array =    
  match s with 
  | Empty -> [||]
  | Leaf {k;v} -> [| f k v|]
  | Node {l;k;v;r} -> 
    let len = 
      cardinal_aux (cardinal_aux 1 r) l in 
    let arr =
      Array.make len (f k v) in  
    ignore (fill_array_with_f s 0 arr f: int);
    arr     

let rec keys_aux accu = function
    Empty -> accu
  | Leaf {k} -> k :: accu
  | Node {l; k;r} -> keys_aux (k :: keys_aux accu r) l

let keys s = keys_aux [] s





let bal l x d r =
  let hl = height l in
  let hr = height r in
  if hl > hr + 2 then begin
    let  {l=ll; r = lr; v = lv; k = lk} = ~!l in
    let hll = height ll in 
    let hlr = height lr in 
    if hll >= hlr then
      let hnode = calc_height hlr hr in       
      unsafe_node lk lv 
        ll  
        (unsafe_node_maybe_leaf x d lr  r hnode)
        (calc_height hll hnode)
    else         
      let {l=lrl; r=lrr;k = lrk ; v = lrv }  = ~!lr in 
      let hlrl = height lrl in 
      let hlrr = height lrr in 
      let hlnode = calc_height hll hlrl in 
      let hrnode = calc_height hlrr hr in 
      unsafe_node lrk lrv 
        (unsafe_node_maybe_leaf lk lv ll  lrl hlnode)  
        (unsafe_node_maybe_leaf x d lrr r hrnode)      
        (calc_height hlnode hrnode)
  end else if hr > hl + 2 then begin
    let {l=rl; r=rr; k = rk; v = rv }  = ~!r in 
    let hrr = height rr in 
    let hrl = height rl in 
    if hrr >= hrl then
      let hnode = calc_height hl hrl in
      unsafe_node rk rv 
        (unsafe_node_maybe_leaf x d l rl hnode)
        rr
        (calc_height hnode hrr)
    else 
      let {l=rll;  r=rlr; k = rlk ; v = rlv}  = ~!rl in 
      let hrll = height rll in 
      let hrlr = height rlr in 
      let hlnode = (calc_height hl hrll) in
      let hrnode = (calc_height hrlr hrr) in      
      unsafe_node rlk rlv 
        (unsafe_node_maybe_leaf x d l  rll hlnode)  
        (unsafe_node_maybe_leaf rk rv rlr  rr hrnode)
        (calc_height hlnode hrnode)
  end else
    unsafe_node_maybe_leaf x d l r (calc_height hl hr)



let [@inline] is_empty = function Empty -> true | _ -> false

let rec min_binding_exn = function
    Empty -> raise Not_found
  | Leaf {k;v} -> (k,v)  
  | Node{l; k; v} -> 
    match l with 
    | Empty -> (k, v) 
    | Leaf _
    | Node _ -> 
      min_binding_exn l


let rec remove_min_binding = function
    Empty -> invalid_arg "Map.remove_min_elt"
  | Leaf _ -> empty  
  | Node{l=Empty;r} -> r
  | Node{l; k; v ; r} -> bal (remove_min_binding l) k v r

let merge t1 t2 =
  match (t1, t2) with
    (Empty, t) -> t
  | (t, Empty) -> t
  | (_, _) ->
    let (x, d) = min_binding_exn t2 in
    bal t1 x d (remove_min_binding t2)


let rec iter x f = match x with 
    Empty -> ()
  | Leaf {k;v} -> (f k v : unit) 
  | Node{l; k ; v ; r} ->
    iter l f; f k v; iter r f



let rec fold m accu f =
  match m with
    Empty -> accu
  | Leaf {k;v} -> f k v accu  
  | Node {l; k; v; r} ->
    fold r (f k v (fold l accu f)) f 

let rec for_all x p = match x with 
    Empty -> true
  | Leaf {k; v} -> p k v   
  | Node{l; k; v ; r} -> p k v && for_all l p && for_all r p

let rec exists x p = match x with
    Empty -> false
  | Leaf {k; v} -> p k v   
  | Node{l; k; v; r} -> p k v || exists l p || exists r p

(* Beware: those two functions assume that the added k is *strictly*
   smaller (or bigger) than all the present keys in the tree; it
   does not test for equality with the current min (or max) key.

   Indeed, they are only used during the "join" operation which
   respects this precondition.
*)

let rec add_min k v = function
  | Empty -> singleton k v
  | Leaf l -> unsafe_two_elements k v l.k l.v
  | Node tree ->
    bal (add_min k v tree.l) tree.k tree.v tree.r

let rec add_max k v = function
  | Empty -> singleton k v
  | Leaf l -> unsafe_two_elements l.k l.v k v
  | Node tree ->
    bal tree.l tree.k tree.v (add_max k v tree.r)

(* Same as create and bal, but no assumptions are made on the
   relative heights of l and r. *)

let rec join l v d r =
  match l with
  | Empty -> add_min v d r
  | Leaf leaf ->
    add_min leaf.k leaf.v (add_min v d r)
  | Node xl ->
    match r with  
    | Empty -> add_max v d l
    | Leaf leaf -> 
      add_max leaf.k leaf.v (add_max v d l)  
    | Node  xr ->
      let lh = xl.h in  
      let rh = xr.h in 
      if lh > rh + 2 then bal xl.l xl.k xl.v (join xl.r v d r) else
      if rh > lh + 2 then bal (join l v d xr.l) xr.k xr.v xr.r else
        unsafe_node v d l  r (calc_height lh rh)

(* Merge two trees l and r into one.
   All elements of l must precede the elements of r.
   No assumption on the heights of l and r. *)

let concat t1 t2 =
  match (t1, t2) with
    (Empty, t) -> t
  | (t, Empty) -> t
  | (_, _) ->
    let (x, d) = min_binding_exn t2 in
    join t1 x d (remove_min_binding t2)

let concat_or_join t1 v d t2 =
  match d with
  | Some d -> join t1 v d t2
  | None -> concat t1 t2


module type S =
sig
  type key
  type +'a t
  val empty: 'a t
  val compare_key: key -> key -> int 
  val is_empty: 'a t -> bool
  val mem: 'a t -> key -> bool
  val to_sorted_array : 
    'a t -> (key * 'a ) array
  val to_sorted_array_with_f : 
    'a t -> (key -> 'a -> 'b) -> 'b array  
  val add: 'a t -> key -> 'a -> 'a t
  (** [add x y m] 
      If [x] was already bound in [m], its previous binding disappears. *)

  val adjust: 'a t -> key -> ('a option->  'a) ->  'a t 
  (** [adjust acc k replace ] if not exist [add (replace None ], otherwise 
      [add k v (replace (Some old))]
  *)

  val singleton: key -> 'a -> 'a t

  val remove: 'a t -> key -> 'a t
  (** [remove x m] returns a map containing the same bindings as
      [m], except for [x] which is unbound in the returned map. *)

  (* val merge:
       'a t -> 'b t ->
       (key -> 'a option -> 'b option -> 'c option) ->  'c t *)
  (** [merge f m1 m2] computes a map whose keys is a subset of keys of [m1]
      and of [m2]. The presence of each such binding, and the corresponding
      value, is determined with the function [f].
      @since 3.12.0
  *)

  val disjoint_merge_exn : 
    'a t 
    -> 'a t 
    -> (key -> 'a -> 'a -> exn)
    -> 'a t
  (* merge two maps, will raise if they have the same key *)



  val iter: 'a t -> (key -> 'a -> unit) ->  unit
  (** [iter f m] applies [f] to all bindings in map [m].
      The bindings are passed to [f] in increasing order. *)

  val fold: 'a t -> 'b -> (key -> 'a -> 'b -> 'b) -> 'b
  (** [fold f m a] computes [(f kN dN ... (f k1 d1 a)...)],
      where [k1 ... kN] are the keys of all bindings in [m]
      (in increasing order) *)

  val for_all: 'a t -> (key -> 'a -> bool) -> bool
  (** [for_all p m] checks if all the bindings of the map.
      order unspecified
  *)

  val exists: 'a t -> (key -> 'a -> bool) -> bool
  (** [exists p m] checks if at least one binding of the map
      satisfy the predicate [p]. 
      order unspecified
  *)

  (* val filter: 'a t -> (key -> 'a -> bool) -> 'a t *)
  (** [filter p m] returns the map with all the bindings in [m]
      that satisfy predicate [p].
      order unspecified
  *)

  (* val partition: 'a t -> (key -> 'a -> bool) ->  'a t * 'a t *)
  (** [partition p m] returns a pair of maps [(m1, m2)], where
      [m1] contains all the bindings of [s] that satisfy the
      predicate [p], and [m2] is the map with all the bindings of
      [s] that do not satisfy [p].
  *)

  val cardinal: 'a t -> int
  (** Return the number of bindings of a map. *)

  val bindings: 'a t -> (key * 'a) list
  (** Return the list of all bindings of the given map.
      The returned list is sorted in increasing order with respect
      to the ordering *)

  val keys : 'a t -> key list 
  (* Increasing order *)



  (* val split: 'a t -> key -> 'a t * 'a option * 'a t *)
  (** [split x m] returns a triple [(l, data, r)], where
        [l] is the map with all the bindings of [m] whose key
      is strictly less than [x];
        [r] is the map with all the bindings of [m] whose key
      is strictly greater than [x];
        [data] is [None] if [m] contains no binding for [x],
        or [Some v] if [m] binds [v] to [x].
      @since 3.12.0
  *)

  val find_exn: 'a t -> key ->  'a
  (** [find x m] returns the current binding of [x] in [m],
      or raises [Not_found] if no such binding exists. *)
      
  val find_opt:  'a t ->  key ->'a option
  val find_default: 'a t -> key  ->  'a  -> 'a 
  val map: 'a t -> ('a -> 'b) -> 'b t
  (** [map f m] returns a map with same domain as [m], where the
      associated value [a] of all bindings of [m] has been
      replaced by the result of the application of [f] to [a].
      The bindings are passed to [f] in increasing order
      with respect to the ordering over the type of the keys. *)

  val mapi: 'a t ->  (key -> 'a -> 'b) -> 'b t
  (** Same as {!Map.S.map}, but the function receives as arguments both the
      key and the associated value for each binding of the map. *)

  val of_list : (key * 'a) list -> 'a t 
  val of_array : (key * 'a ) array -> 'a t 
  val add_list : (key * 'b) list -> 'b t -> 'b t

end

end
module Map_string : sig 
#1 "map_string.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


include Map_gen.S with type key = string

end = struct
#1 "map_string.ml"

# 2 "ext/map.cppo.ml"
(* we don't create [map_poly], since some operations require raise an exception which carries [key] *)

# 5 "ext/map.cppo.ml"
type key = string 
let compare_key = Ext_string.compare
let [@inline] eq_key (x : key) y = x = y
    
# 19 "ext/map.cppo.ml"
    (* let [@inline] (=) (a : int) b = a = b *)
type + 'a t = (key,'a) Map_gen.t

let empty = Map_gen.empty 
let is_empty = Map_gen.is_empty
let iter = Map_gen.iter
let fold = Map_gen.fold
let for_all = Map_gen.for_all 
let exists = Map_gen.exists 
let singleton = Map_gen.singleton 
let cardinal = Map_gen.cardinal
let bindings = Map_gen.bindings
let to_sorted_array = Map_gen.to_sorted_array
let to_sorted_array_with_f = Map_gen.to_sorted_array_with_f
let keys = Map_gen.keys



let map = Map_gen.map 
let mapi = Map_gen.mapi
let bal = Map_gen.bal 
let height = Map_gen.height 


let rec add (tree : _ Map_gen.t as 'a) x data  : 'a = match tree with 
  | Empty ->
    singleton x data
  | Leaf {k;v} ->
    let c = compare_key x k in 
    if c = 0 then singleton x data else
    if c < 0 then 
      Map_gen.unsafe_two_elements x data k v 
    else 
      Map_gen.unsafe_two_elements k v x data  
  | Node {l; k ; v ; r; h} ->
    let c = compare_key x k in
    if c = 0 then
      Map_gen.unsafe_node x data l r h (* at least need update data *)
    else if c < 0 then
      bal (add l x data ) k v r
    else
      bal l k v (add r x data )


let rec adjust (tree : _ Map_gen.t as 'a) x replace  : 'a = 
  match tree with 
  | Empty ->
    singleton x (replace None)
  | Leaf {k ; v} -> 
    let c = compare_key x k in 
    if c = 0 then singleton x (replace (Some v)) else 
    if c < 0 then 
      Map_gen.unsafe_two_elements x (replace None) k v   
    else
      Map_gen.unsafe_two_elements k v x (replace None)   
  | Node ({l; k ; r} as tree) ->
    let c = compare_key x k in
    if c = 0 then
      Map_gen.unsafe_node x (replace  (Some tree.v)) l r tree.h
    else if c < 0 then
      bal (adjust l x  replace ) k tree.v r
    else
      bal l k tree.v (adjust r x  replace )


let rec find_exn (tree : _ Map_gen.t ) x = match tree with 
  | Empty ->
    raise Not_found
  | Leaf leaf -> 
    if eq_key x leaf.k then leaf.v else raise Not_found  
  | Node tree ->
    let c = compare_key x tree.k in
    if c = 0 then tree.v
    else find_exn (if c < 0 then tree.l else tree.r) x

let rec find_opt (tree : _ Map_gen.t ) x = match tree with 
  | Empty -> None 
  | Leaf leaf -> 
    if eq_key x leaf.k then Some leaf.v else None
  | Node tree ->
    let c = compare_key x tree.k in
    if c = 0 then Some tree.v
    else find_opt (if c < 0 then tree.l else tree.r) x

let rec find_default (tree : _ Map_gen.t ) x  default     = match tree with 
  | Empty -> default  
  | Leaf leaf -> 
    if eq_key x leaf.k then  leaf.v else default
  | Node tree ->
    let c = compare_key x tree.k in
    if c = 0 then tree.v
    else find_default (if c < 0 then tree.l else tree.r) x default

let rec mem (tree : _ Map_gen.t )  x= match tree with 
  | Empty ->
    false
  | Leaf leaf -> eq_key x leaf.k 
  | Node{l; k ;  r} ->
    let c = compare_key x k in
    c = 0 || mem (if c < 0 then l else r) x 

let rec remove (tree : _ Map_gen.t as 'a) x : 'a = match tree with 
  | Empty -> empty
  | Leaf leaf -> 
    if eq_key x leaf.k then empty 
    else tree
  | Node{l; k ; v; r} ->
    let c = compare_key x k in
    if c = 0 then
      Map_gen.merge l r
    else if c < 0 then
      bal (remove l x) k v r
    else
      bal l k v (remove r x )

type 'a split = 
  | Yes of {l : (key,'a) Map_gen.t; r : (key,'a)Map_gen.t ; v : 'a}
  | No of {l : (key,'a) Map_gen.t; r : (key,'a)Map_gen.t }


let rec split  (tree : (key,'a) Map_gen.t) x : 'a split  = 
  match tree with 
  | Empty ->
    No {l = empty; r = empty}
  | Leaf leaf -> 
    let c = compare_key x leaf.k in 
    if c = 0 then Yes {l = empty; v= leaf.v; r = empty} 
    else if c < 0 then No { l = empty; r = tree }
    else  No { l = tree; r = empty}
  | Node {l; k ; v ; r} ->
    let c = compare_key x k in
    if c = 0 then Yes {l; v; r}
    else if c < 0 then      
      match  split l x with 
      | Yes result -> Yes {result with r = Map_gen.join result.r k v r }
      | No result -> No {result with r = Map_gen.join result.r k v r } 
    else
      match split r x with 
      | Yes result -> 
        Yes {result with l = Map_gen.join l k v result.l}
      | No result -> 
        No {result with l = Map_gen.join l k v result.l}


let rec disjoint_merge_exn  
    (s1 : _ Map_gen.t) 
    (s2  : _ Map_gen.t) 
    fail : _ Map_gen.t =
  match s1 with
  | Empty -> s2  
  | Leaf ({k } as l1)  -> 
    begin match s2 with 
      | Empty -> s1 
      | Leaf l2 -> 
        let c = compare_key k l2.k in 
        if c = 0 then raise_notrace (fail k l1.v l2.v)
        else if c < 0 then Map_gen.unsafe_two_elements l1.k l1.v l2.k l2.v
        else Map_gen.unsafe_two_elements l2.k l2.v k l1.v
      | Node _ -> 
        adjust s2 k (fun data -> 
            match data with 
            |  None -> l1.v
            | Some s2v  -> raise_notrace (fail k l1.v s2v)
          )        
    end
  | Node ({k} as xs1) -> 
    if  xs1.h >= height s2 then
      begin match split s2 k with 
        | No {l; r} -> 
          Map_gen.join 
            (disjoint_merge_exn  xs1.l l fail)
            k 
            xs1.v 
            (disjoint_merge_exn xs1.r r fail)
        | Yes { v =  s2v} ->
          raise_notrace (fail k xs1.v s2v)
      end        
    else let [@warning "-8"] (Node ({k} as s2) : _ Map_gen.t)  = s2 in 
      begin match  split s1 k with 
        | No {l;  r} -> 
          Map_gen.join 
            (disjoint_merge_exn  l s2.l fail) k s2.v 
            (disjoint_merge_exn  r s2.r fail)
        | Yes { v = s1v} -> 
          raise_notrace (fail k s1v s2.v)
      end






let add_list (xs : _ list ) init = 
  Ext_list.fold_left xs init (fun  acc (k,v) -> add acc k v )

let of_list xs = add_list xs empty

let of_array xs = 
  Ext_array.fold_left xs empty (fun acc (k,v) -> add acc k v ) 

end
module Set_gen : sig 
#1 "set_gen.mli"
type 'a t =private
    Empty
  | Leaf of 'a
  | Node of { l : 'a t; v : 'a; r : 'a t; h : int; }


val empty : 'a t
val [@inline] is_empty : 'a t-> bool
val unsafe_two_elements : 
  'a -> 'a -> 'a t

val cardinal : 'a t-> int

val elements : 'a t-> 'a list
val choose : 'a t-> 'a
val iter : 'a t-> ('a -> unit) -> unit
val fold : 'a t-> 'c -> ('a -> 'c -> 'c) -> 'c
val for_all : 'a t-> ('a -> bool) -> bool
val exists : 'a t-> ('a -> bool) -> bool
val check : 'a t-> unit
val bal : 'a t-> 'a -> 'a t-> 'a t
val remove_min_elt : 'a t-> 'a t
val singleton : 'a -> 'a t
val internal_merge : 'a t-> 'a t-> 'a t
val internal_join : 'a t-> 'a -> 'a t-> 'a t
val internal_concat : 'a t-> 'a t-> 'a t
val partition : 'a t-> ('a -> bool) -> 'a t * 'a t
val of_sorted_array : 'a array -> 'a t
val is_ordered : cmp:('a -> 'a -> int) -> 'a t-> bool
val invariant : cmp:('a -> 'a -> int) -> 'a t-> bool

module type S =
sig
  type elt
  type t
  val empty : t
  val is_empty : t -> bool
  val iter : t -> (elt -> unit) -> unit
  val fold : t -> 'a -> (elt -> 'a -> 'a) -> 'a
  val for_all : t -> (elt -> bool) -> bool
  val exists : t -> (elt -> bool) -> bool
  val singleton : elt -> t
  val cardinal : t -> int
  val elements : t -> elt list
  val choose : t -> elt
  val mem : t -> elt -> bool
  val add : t -> elt -> t
  val remove : t -> elt -> t
  val union : t -> t -> t
  val inter : t -> t -> t
  val diff : t -> t -> t    
  val of_list : elt list -> t
  val of_sorted_array : elt array -> t
  val invariant : t -> bool
  val print : Format.formatter -> t -> unit
end

end = struct
#1 "set_gen.ml"
(***********************************************************************)
(*                                                                     *)
(*                                OCaml                                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with    *)
(*  the special exception on linking described in file ../LICENSE.     *)
(*                                                                     *)
(***********************************************************************)
[@@@warnerror "+55"]

(* balanced tree based on stdlib distribution *)

type 'a t0 = 
  | Empty 
  | Leaf of  'a 
  | Node of { l : 'a t0 ; v :  'a ; r : 'a t0 ; h :  int }

type 'a partial_node = { l : 'a t0 ; v :  'a ; r : 'a t0 ; h :  int }

external (~!) : 'a t0 -> 'a partial_node = "%identity"
let empty = Empty
let  [@inline] height = function
  | Empty -> 0 
  | Leaf _ -> 1
  | Node {h} -> h   

let [@inline] calc_height a b =  
  (if a >= b then a else b) + 1 

(* 
    Invariants: 
    1. {[ l < v < r]}
    2. l and r balanced 
    3. [height l] - [height r] <= 2
*)
let [@inline] unsafe_node v l  r h = 
  Node{l;v;r; h }         

let [@inline] unsafe_node_maybe_leaf v l r h =   
  if h = 1 then Leaf v   
  else Node{l;v;r; h }         

let [@inline] singleton x = Leaf x

let [@inline] unsafe_two_elements x v = 
  unsafe_node v (singleton x) empty 2 

type 'a t = 'a t0 = private
  | Empty 
  | Leaf of 'a
  | Node of { l : 'a t0 ; v :  'a ; r : 'a t0 ; h :  int }


(* Smallest and greatest element of a set *)

let rec min_exn = function
  | Empty -> raise Not_found
  | Leaf v -> v 
  | Node{l; v} ->
    match l with 
    | Empty -> v 
    | Leaf _
    | Node _ ->  min_exn l


let [@inline] is_empty = function Empty -> true | _ -> false

let rec cardinal_aux acc  = function
  | Empty -> acc 
  | Leaf _ -> acc + 1
  | Node {l;r} -> 
    cardinal_aux  (cardinal_aux (acc + 1)  r ) l 

let cardinal s = cardinal_aux 0 s 

let rec elements_aux accu = function
  | Empty -> accu
  | Leaf v -> v :: accu
  | Node{l; v; r} -> elements_aux (v :: elements_aux accu r) l

let elements s =
  elements_aux [] s

let choose = min_exn

let rec iter  x f = match x with
  | Empty -> ()
  | Leaf v -> f v 
  | Node {l; v; r} -> iter l f ; f v; iter r f 

let rec fold s accu f =
  match s with
  | Empty -> accu
  | Leaf v -> f v accu
  | Node{l; v; r} -> fold r (f v (fold l accu f)) f 

let rec for_all x p = match x with
  | Empty -> true
  | Leaf v -> p v 
  | Node{l; v; r} -> p v && for_all l p && for_all r p 

let rec exists x p = match x with
  | Empty -> false
  | Leaf v -> p v 
  | Node {l; v; r} -> p v || exists l p  || exists r p





exception Height_invariant_broken
exception Height_diff_borken 

let rec check_height_and_diff = 
  function 
  | Empty -> 0
  | Leaf _ -> 1
  | Node{l;r;h} -> 
    let hl = check_height_and_diff l in
    let hr = check_height_and_diff r in
    if h <>  calc_height hl hr  then raise Height_invariant_broken
    else  
      let diff = (abs (hl - hr)) in  
      if  diff > 2 then raise Height_diff_borken 
      else h     

let check tree = 
  ignore (check_height_and_diff tree)

(* Same as create, but performs one step of rebalancing if necessary.
    Invariants:
    1. {[ l < v < r ]}
    2. l and r balanced 
    3. | height l - height r | <= 3.

    Proof by indunction

    Lemma: the height of  [bal l v r] will bounded by [max l r] + 1 
*)
let bal l v r : _ t =
  let hl = height l in
  let hr = height r in
  if hl > hr + 2 then 
    let {l=ll;r= lr; v = lv}  = ~!l in 
    let hll = height ll in 
    let hlr = height lr in 
    if hll >= hlr then
      let hnode = calc_height hlr hr in       
      unsafe_node lv 
        ll  
        (unsafe_node_maybe_leaf v lr  r hnode ) 
        (calc_height hll hnode)
    else       
      let {l = lrl; r = lrr ; v = lrv}  = ~!lr in 
      let hlrl = height lrl in 
      let hlrr = height lrr in 
      let hlnode = calc_height hll hlrl in 
      let hrnode = calc_height hlrr hr in 
      unsafe_node lrv 
        (unsafe_node_maybe_leaf lv ll  lrl hlnode)  
        (unsafe_node_maybe_leaf v lrr  r hrnode)
        (calc_height hlnode hrnode)
  else if hr > hl + 2 then begin    
    let {l=rl; r=rr; v = rv} = ~!r in 
    let hrr = height rr in 
    let hrl = height rl in 
    if hrr >= hrl then
      let hnode = calc_height hl hrl in
      unsafe_node rv 
        (unsafe_node_maybe_leaf v l  rl hnode) 
        rr 
        (calc_height hnode hrr )
    else begin
      let {l = rll ; r = rlr ; v = rlv}  = ~!rl in 
      let hrll = height rll in 
      let hrlr = height rlr in 
      let hlnode = (calc_height hl hrll) in
      let hrnode = (calc_height hrlr hrr) in
      unsafe_node rlv 
        (unsafe_node_maybe_leaf v l rll hlnode)  
        (unsafe_node_maybe_leaf rv rlr rr hrnode)
        (calc_height hlnode hrnode)
    end
  end else
    unsafe_node_maybe_leaf v l  r (calc_height hl hr)


let rec remove_min_elt = function
    Empty -> invalid_arg "Set.remove_min_elt"
  | Leaf _ -> empty  
  | Node{l=Empty; r} -> r
  | Node{l; v; r} -> bal (remove_min_elt l) v r



(* 
   All elements of l must precede the elements of r.
       Assume | height l - height r | <= 2.
   weak form of [concat] 
*)

let internal_merge l r =
  match (l, r) with
  | (Empty, t) -> t
  | (t, Empty) -> t
  | (_, _) -> bal l (min_exn r) (remove_min_elt r)


(* Beware: those two functions assume that the added v is *strictly*
    smaller (or bigger) than all the present elements in the tree; it
    does not test for equality with the current min (or max) element.
    Indeed, they are only used during the "join" operation which
    respects this precondition.
*)

let rec add_min v = function
  | Empty -> singleton v
  | Leaf x -> unsafe_two_elements v x
  | Node n ->
    bal (add_min v n.l) n.v n.r

let rec add_max v = function
  | Empty -> singleton v
  | Leaf x -> unsafe_two_elements x v
  | Node n  ->
    bal n.l n.v (add_max v n.r)

(** 
    Invariants:
    1. l < v < r 
    2. l and r are balanced 

    Proof by induction
    The height of output will be ~~ (max (height l) (height r) + 2)
    Also use the lemma from [bal]
*)
let rec internal_join l v r =
  match (l, r) with
    (Empty, _) -> add_min v r
  | (_, Empty) -> add_max v l
  | Leaf lv, Node {h = rh} ->
    if rh > 3 then 
      add_min lv (add_min v r ) (* FIXME: could inlined *)
    else unsafe_node  v l r (rh + 1)
  | Leaf _, Leaf _ -> 
    unsafe_node  v l r 2
  | Node {h = lh}, Leaf rv ->
    if lh > 3 then       
      add_max rv (add_max v l)
    else unsafe_node  v l r (lh + 1)    
  | (Node{l=ll;v= lv;r= lr;h= lh}, Node {l=rl; v=rv; r=rr; h=rh}) ->
    if lh > rh + 2 then 
      (* proof by induction:
         now [height of ll] is [lh - 1] 
      *)
      bal ll lv (internal_join lr v r) 
    else
    if rh > lh + 2 then bal (internal_join l v rl) rv rr 
    else unsafe_node  v l r (calc_height lh rh)


(*
    Required Invariants: 
    [t1] < [t2]  
*)
let internal_concat t1 t2 =
  match (t1, t2) with
  | (Empty, t) -> t
  | (t, Empty) -> t
  | (_, _) -> internal_join t1 (min_exn t2) (remove_min_elt t2)


let rec partition x p = match x with 
  | Empty -> (empty, empty)
  | Leaf v -> let pv = p v in if pv then x, empty else empty, x
  | Node{l; v; r} ->
    (* call [p] in the expected left-to-right order *)
    let (lt, lf) = partition l p in
    let pv = p v in
    let (rt, rf) = partition r p in
    if pv
    then (internal_join lt v rt, internal_concat lf rf)
    else (internal_concat lt rt, internal_join lf v rf)


let of_sorted_array l =   
  let rec sub start n l  =
    if n = 0 then empty else 
    if n = 1 then 
      let x0 = Array.unsafe_get l start in
      singleton x0
    else if n = 2 then     
      let x0 = Array.unsafe_get l start in 
      let x1 = Array.unsafe_get l (start + 1) in 
      unsafe_node x1 (singleton x0)  empty 2 else
    if n = 3 then 
      let x0 = Array.unsafe_get l start in 
      let x1 = Array.unsafe_get l (start + 1) in
      let x2 = Array.unsafe_get l (start + 2) in
      unsafe_node x1 (singleton x0)  (singleton x2) 2
    else 
      let nl = n / 2 in
      let left = sub start nl l in
      let mid = start + nl in 
      let v = Array.unsafe_get l mid in 
      let right = sub (mid + 1) (n - nl - 1) l in        
      unsafe_node v left  right (calc_height (height left) (height right))
  in
  sub 0 (Array.length l) l 

let is_ordered ~cmp tree =
  let rec is_ordered_min_max tree =
    match tree with
    | Empty -> `Empty
    | Leaf v -> `V (v,v)
    | Node {l;v;r} -> 
      begin match is_ordered_min_max l with
        | `No -> `No 
        | `Empty ->
          begin match is_ordered_min_max r with
            | `No  -> `No
            | `Empty -> `V (v,v)
            | `V(l,r) ->
              if cmp v l < 0 then
                `V(v,r)
              else
                `No
          end
        | `V(min_v,max_v)->
          begin match is_ordered_min_max r with
            | `No -> `No
            | `Empty -> 
              if cmp max_v v < 0 then 
                `V(min_v,v)
              else
                `No 
            | `V(min_v_r, max_v_r) ->
              if cmp max_v min_v_r < 0 then
                `V(min_v,max_v_r)
              else `No
          end
      end  in 
  is_ordered_min_max tree <> `No 

let invariant ~cmp t = 
  check t ; 
  is_ordered ~cmp t 


module type S = sig
  type elt 
  type t
  val empty: t
  val is_empty: t -> bool
  val iter: t ->  (elt -> unit) -> unit
  val fold: t -> 'a -> (elt -> 'a -> 'a) -> 'a
  val for_all: t -> (elt -> bool) ->  bool
  val exists: t -> (elt -> bool) -> bool
  val singleton: elt -> t
  val cardinal: t -> int
  val elements: t -> elt list
  val choose: t -> elt
  val mem: t -> elt -> bool
  val add: t -> elt -> t
  val remove: t -> elt -> t
  val union: t -> t -> t
  val inter: t -> t -> t
  val diff: t -> t -> t
  val of_list: elt list -> t
  val of_sorted_array : elt array -> t 
  val invariant : t -> bool 
  val print : Format.formatter -> t -> unit 
end 

end
module Set_string : sig 
#1 "set_string.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)




include Set_gen.S with type elt = string
end = struct
#1 "set_string.ml"
# 1 "ext/set.cppo.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


# 27 "ext/set.cppo.ml"
type elt = string
let compare_elt = Ext_string.compare 
let [@inline] eq_elt (x : elt) y = x = y
let print_elt = Format.pp_print_string


# 52 "ext/set.cppo.ml"
(* let (=) (a:int) b = a = b *)

type ('a ) t0 = 'a Set_gen.t 

type  t = elt t0

let empty = Set_gen.empty 
let is_empty = Set_gen.is_empty
let iter = Set_gen.iter
let fold = Set_gen.fold
let for_all = Set_gen.for_all 
let exists = Set_gen.exists 
let singleton = Set_gen.singleton 
let cardinal = Set_gen.cardinal
let elements = Set_gen.elements
let choose = Set_gen.choose 

let of_sorted_array = Set_gen.of_sorted_array

let rec mem (tree : t) (x : elt) =  match tree with 
  | Empty -> false
  | Leaf v -> eq_elt x  v 
  | Node{l; v; r} ->
    let c = compare_elt x v in
    c = 0 || mem (if c < 0 then l else r) x

type split = 
  | Yes of  {l : t ;  r :  t }
  | No of { l : t; r : t}  

let [@inline] split_l (x : split) = 
  match x with 
  | Yes {l} | No {l} -> l 

let [@inline] split_r (x : split) = 
  match x with 
  | Yes {r} | No {r} -> r       

let [@inline] split_pres (x : split) = match x with | Yes _ -> true | No _ -> false   

let rec split (tree : t) x : split =  match tree with 
  | Empty ->
     No {l = empty;  r = empty}
  | Leaf v ->   
    let c = compare_elt x v in
    if c = 0 then Yes {l = empty; r = empty}
    else if c < 0 then
      No {l = empty;  r = tree}
    else
      No {l = tree;  r = empty}
  | Node {l; v; r} ->
    let c = compare_elt x v in
    if c = 0 then Yes {l; r}
    else if c < 0 then
      match split l x with 
      | Yes result -> 
        Yes { result with r = Set_gen.internal_join result.r v r }
      | No result ->
        No { result with r= Set_gen.internal_join result.r v r }
    else
      match split r x with
      | Yes result -> 
        Yes {result with l = Set_gen.internal_join l v result.l}
      | No result ->   
        No {result with l = Set_gen.internal_join l v result.l}

let rec add (tree : t) x : t =  match tree with 
  | Empty -> singleton x
  | Leaf v -> 
    let c = compare_elt x v in
    if c = 0 then tree else     
    if c < 0 then 
      Set_gen.unsafe_two_elements x v
    else 
      Set_gen.unsafe_two_elements v x 
  | Node {l; v; r} as t ->
    let c = compare_elt x v in
    if c = 0 then t else
    if c < 0 then Set_gen.bal (add l x ) v r else Set_gen.bal l v (add r x )

let rec union (s1 : t) (s2 : t) : t  =
  match (s1, s2) with
  | (Empty, t) 
  | (t, Empty) -> t
  | Node _, Leaf v2 ->
    add s1 v2 
  | Leaf v1, Node _ -> 
    add s2 v1 
  | Leaf x, Leaf v -> 
    let c = compare_elt x v in
    if c = 0 then s1 else     
    if c < 0 then 
      Set_gen.unsafe_two_elements x v
    else 
      Set_gen.unsafe_two_elements v x
  | Node{l=l1; v=v1; r=r1; h=h1}, Node{l=l2; v=v2; r=r2; h=h2} ->
    if h1 >= h2 then    
      let split_result =  split s2 v1 in
      Set_gen.internal_join 
        (union l1 (split_l split_result)) v1 
        (union r1 (split_r split_result))  
    else    
      let split_result =  split s1 v2 in
      Set_gen.internal_join 
        (union (split_l split_result) l2) v2 
        (union (split_r split_result) r2)


let rec inter (s1 : t)  (s2 : t) : t  =
  match (s1, s2) with
  | (Empty, _) 
  | (_, Empty) -> empty  
  | Leaf v, _ -> 
    if mem s2 v then s1 else empty
  | Node ({ v } as s1), _ ->
    let result = split s2 v in 
    if split_pres result then 
      Set_gen.internal_join 
        (inter s1.l (split_l result)) 
        v 
        (inter s1.r (split_r result))
    else
      Set_gen.internal_concat 
        (inter s1.l (split_l result)) 
        (inter s1.r (split_r result))


let rec diff (s1 : t) (s2 : t) : t  =
  match (s1, s2) with
  | (Empty, _) -> empty
  | (t1, Empty) -> t1
  | Leaf v, _-> 
    if mem s2 v then empty else s1 
  | (Node({ v} as s1), _) ->
    let result =  split s2 v in
    if split_pres result then 
      Set_gen.internal_concat 
        (diff s1.l (split_l result)) 
        (diff s1.r (split_r result))    
    else
      Set_gen.internal_join 
        (diff s1.l (split_l result))
        v 
        (diff s1.r (split_r result))







let rec remove (tree : t)  (x : elt) : t = match tree with 
  | Empty -> empty (* This case actually would be never reached *)
  | Leaf v ->     
    if eq_elt x  v then empty else tree    
  | Node{l; v; r} ->
    let c = compare_elt x v in
    if c = 0 then Set_gen.internal_merge l r else
    if c < 0 then Set_gen.bal (remove l x) v r else Set_gen.bal l v (remove r x )

(* let compare s1 s2 = Set_gen.compare ~cmp:compare_elt s1 s2  *)



let of_list l =
  match l with
  | [] -> empty
  | [x0] -> singleton x0
  | [x0; x1] -> add (singleton x0) x1 
  | [x0; x1; x2] -> add (add (singleton x0)  x1) x2 
  | [x0; x1; x2; x3] -> add (add (add (singleton x0) x1 ) x2 ) x3 
  | [x0; x1; x2; x3; x4] -> add (add (add (add (singleton x0) x1) x2 ) x3 ) x4 
  | _ -> 
    let arrs = Array.of_list l in 
    Array.sort compare_elt arrs ; 
    of_sorted_array arrs



(* also check order *)
let invariant t =
  Set_gen.check t ;
  Set_gen.is_ordered ~cmp:compare_elt t          

let print fmt s = 
  Format.fprintf 
   fmt   "@[<v>{%a}@]@."
    (fun fmt s   -> 
       iter s
         (fun e -> Format.fprintf fmt "@[<v>%a@],@ " 
         print_elt e) 
    )
    s     






end
module Bspack_ast_extract : sig 
#1 "bspack_ast_extract.mli"
(* Copyright (C) 2020 - Authors of ReScript
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


type ('a,'b) t 



val sort :
  ('a -> Parsetree.structure) ->
  ('b -> Parsetree.signature) ->
  ('a, 'b) t Map_string.t -> string Queue.t  



(**
   [build fmt files parse_implementation parse_interface]
   Given a list of files return an ast table 
*)
val collect_ast_map :
  Format.formatter ->
  string list ->
  (Format.formatter -> string -> 'a) ->
  (Format.formatter -> string -> 'b) ->
  ('a, 'b) t Map_string.t 

type dir_spec = 
  { dir : string ;
    mutable  excludes : string list 
  }

(** If the genereated queue is empty, it means 
    1. The main module  does not exist (does not exist due to typo)
    2. It does exist but not in search path
    The order matters from head to tail 
*)
val collect_from_main :
  ?extra_dirs:dir_spec list -> 
  ?excludes : string list -> 
  ?alias_map: string Hash_string.t ->
  Format.formatter ->
  (Format.formatter -> string -> 'a) ->
  (Format.formatter -> string -> 'b) ->
  ('a -> Parsetree.structure) ->
  ('b -> Parsetree.signature) ->
  string -> ('a, 'b) t Map_string.t * string Queue.t

val build_queue :
  Format.formatter ->
  string Queue.t ->
  ('b, 'c) t Map_string.t ->
  (Format.formatter -> string -> string -> 'b -> unit) ->
  (Format.formatter -> string -> string -> 'c -> unit) -> unit

val handle_queue :
  string Queue.t ->
  ('a, 'b) t Map_string.t ->
  (string -> string -> 'a -> unit) ->
  (string -> string -> 'b  -> unit) ->
  (string -> string -> string -> 'b -> 'a -> unit) -> unit


val build_lazy_queue :
  Format.formatter ->
  string Queue.t ->
  (Parsetree.structure lazy_t, Parsetree.signature lazy_t) t Map_string.t ->
  (Format.formatter -> string -> string -> Parsetree.structure -> unit) ->
  (Format.formatter -> string -> string -> Parsetree.signature -> unit) -> unit  



end = struct
#1 "bspack_ast_extract.ml"
(* Copyright (C) 2020 - Hongbo Zhang, Authors of ReScript
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

open Ast_extract

type ('a,'b) ast_info =
  | Ml of
      string * (* sourcefile *)
      'a *
      string (* opref *)      
  | Mli of string * (* sourcefile *)
           'b *
           string (* opref *)
  | Ml_mli of
      string * (* sourcefile *)
      'a *
      string  * (* opref1 *)
      string * (* sourcefile *)      
      'b *
      string (* opref2*)

type ('a,'b) t =
  { module_name : string ; ast_info : ('a,'b) ast_info }


(* only visit nodes that are currently in the domain *)
(* https://en.wikipedia.org/wiki/Topological_sorting *)
(* dfs   *)
let sort_files_by_dependencies ~(domain : Set_string.t) (dependency_graph : Set_string.t Map_string.t) : 
  string Queue.t =
  let next current =
    Map_string.find_exn  dependency_graph current in    
  let worklist = ref domain in
  let result = Queue.create () in
  let rec visit (visiting : Set_string.t) path (current : string) =
    let next_path = current :: path in 
    if Set_string.mem current visiting then
      Bs_exception.error (Bs_cyclic_depends next_path)
    else if Set_string.mem current !worklist then
      begin
        let next_set = Set_string.add current visiting in         
        next current |>        
        Set_string.iter
          (fun node ->
             if  Map_string.mem dependency_graph node then
               visit next_set next_path node)
        ;
        worklist := Set_string.remove  current !worklist;
        Queue.push current result ;
      end in        
  while not (Set_string.is_empty !worklist) do 
    visit Set_string.empty []  (Set_string.choose !worklist)
  done;
  if Js_config.get_diagnose () then
    Format.fprintf Format.err_formatter
      "Order: @[%a@]@."    
      (Ext_format.pp_print_queue
         ~pp_sep:Format.pp_print_space
         Format.pp_print_string)
      result ;       
  result
;;



let sort  project_ml project_mli (ast_table : _ t Map_string.t) = 
  let domain =
    Map_string.fold ast_table Set_string.empty 
      (fun k _ acc -> Set_string.add k acc)
  in
  let h =
    Map_string.map ast_table
      (fun
        ({ast_info})
        ->
          match ast_info with
          | Ml (_, ast,  _)
            ->
            read_parse_and_extract Ml (project_ml ast)            
          | Mli (_, ast, _)
            ->
            read_parse_and_extract Mli (project_mli ast)
          | Ml_mli (_, impl, _, _, intf, _)
            ->
            Set_string.union
              (read_parse_and_extract Ml (project_ml impl))
              (read_parse_and_extract Mli (project_mli intf))              
      ) in    
  sort_files_by_dependencies  ~domain h

(** same as {!Ocaml_parse.check_suffix} but does not care with [-c -o] option*)
let check_suffix  name  = 
  if Ext_path.check_suffix_case name ".ml" then 
    `Ml,
    Ext_filename.chop_extension_maybe  name 
  else if Ext_path.check_suffix_case name !Config.interface_suffix then 
    `Mli,   Ext_filename.chop_extension_maybe  name 
  else 
    Bsc_args.bad_arg ("don't know what to do with " ^ name)


let collect_ast_map ppf files parse_implementation parse_interface  =
  Ext_list.fold_left files Map_string.empty
    (fun acc source_file ->
       match check_suffix source_file with
       | `Ml, opref ->
         let module_name = Ext_filename.module_name source_file in
         begin match Map_string.find_exn acc module_name with
           | exception Not_found ->
             Map_string.add acc module_name
               {ast_info =
                  (Ml (source_file, parse_implementation
                         ppf source_file, opref));
                module_name ;
               } 
           | {ast_info = (Ml (source_file2, _, _)
                         | Ml_mli(source_file2, _, _,_,_,_))} ->
             Bs_exception.error
               (Bs_duplicated_module (source_file, source_file2))
           | {ast_info =  Mli (source_file2, intf, opref2)}
             ->
             Map_string.add acc module_name
               {ast_info =
                  Ml_mli (source_file,
                          parse_implementation ppf source_file,
                          opref,
                          source_file2,
                          intf,
                          opref2
                         );
                module_name} 
         end
       | `Mli, opref ->
         let module_name = Ext_filename.module_name source_file in
         begin match Map_string.find_exn acc module_name with
           | exception Not_found ->
             Map_string.add acc module_name
               {ast_info = (Mli (source_file, parse_interface
                                   ppf source_file, opref));
                module_name } 
           | {ast_info =
                (Mli (source_file2, _, _) |
                 Ml_mli(_,_,_,source_file2,_,_)) } ->
             Bs_exception.error
               (Bs_duplicated_module (source_file, source_file2))
           | {ast_info = Ml (source_file2, impl, opref2)}
             ->
             Map_string.add acc module_name
               {ast_info =
                  Ml_mli
                    (source_file2,
                     impl,
                     opref2,
                     source_file,
                     parse_interface ppf source_file,
                     opref
                    );
                module_name} 
         end
    ) 
;;
type dir_spec = 
  { dir : string ;
    mutable  excludes : string list 
  }

let collect_from_main 
    ?(extra_dirs=[])
    ?(excludes=[])
    ?alias_map
    (ppf : Format.formatter)
    parse_implementation
    parse_interface
    project_impl 
    project_intf 
    main_module =
  let files = 
    Ext_list.fold_left extra_dirs [] (fun acc dir_spec -> 
        let  dirname, excludes = 
          match dir_spec with 
          | { dir =  dirname; excludes = dir_excludes} ->
            (*   dirname, excludes *)
            (* | `Dir_with_excludes (dirname, dir_excludes) -> *)
            dirname,
            (Ext_list.flat_map_append 
               dir_excludes  excludes
               (fun x -> [x ^ ".ml" ; x ^ ".mli" ])
            ) 
        in 
        Ext_array.fold_left (Sys.readdir dirname) acc (fun acc source_file -> 
            if (Ext_string.ends_with source_file ".ml" ||
                Ext_string.ends_with source_file ".mli" )
            && (* not_excluded source_file *) (not (Ext_list.mem_string excludes source_file ))
            then 
              (Filename.concat dirname source_file) :: acc else acc
          ) )
  in
  let ast_table = collect_ast_map ppf files parse_implementation parse_interface in 
  let visited = Hash_string.create 31 in
  let result = Queue.create () in  
  let next module_name : Set_string.t =
    let module_set = 
      match Map_string.find_exn ast_table module_name with
      | exception _ -> Set_string.empty
      | {ast_info = Ml (_,  impl, _)} ->
        read_parse_and_extract Ml (project_impl impl)
      | {ast_info = Mli (_,  intf,_)} ->
        read_parse_and_extract Mli (project_intf intf)
      | {ast_info = Ml_mli(_, impl, _, _,  intf, _)}
        -> 
        Set_string.union
          (read_parse_and_extract Ml (project_impl impl))
          (read_parse_and_extract Mli (project_intf intf))
    in 
    match alias_map with 
    | None -> module_set 
    | Some map -> 
      Set_string.fold (fun x acc -> Set_string.add (Hash_string.find_default map x x) acc  ) module_set Set_string.empty
  in
  let rec visit visiting path current =
    if Set_string.mem current visiting  then
      Bs_exception.error (Bs_cyclic_depends (current::path))
    else
    if not (Hash_string.mem visited current)
    && Map_string.mem ast_table current then
      begin
        Set_string.iter
          (visit
             (Set_string.add current visiting)
             (current::path))
          (next current) ;
        Queue.push current result;
        Hash_string.add visited current ();
      end in
  visit (Set_string.empty) [] main_module ;
  ast_table, result   


let build_queue ppf queue
    (ast_table : _ t Map_string.t)
    after_parsing_impl
    after_parsing_sig    
  =
  queue
  |> Queue.iter
    (fun modname -> 
       match Map_string.find_exn ast_table modname  with
       | {ast_info = Ml(source_file,ast, opref)}
         -> 
         after_parsing_impl ppf source_file 
           opref ast 
       | {ast_info = Mli (source_file,ast,opref) ; }  
         ->
         after_parsing_sig ppf source_file 
           opref ast 
       | {ast_info = Ml_mli(source_file1,impl,opref1,source_file2,intf,opref2)}
         -> 
         after_parsing_sig ppf source_file1 opref1 intf ;
         after_parsing_impl ppf source_file2 opref2 impl
       | exception Not_found -> assert false 
    )

let handle_queue 
    queue ast_table 
    decorate_module_only 
    decorate_interface_only 
    decorate_module = 
  queue 
  |> Queue.iter
    (fun base ->
       match (Map_string.find_exn ast_table base ).ast_info with
       | exception Not_found -> assert false
       | Ml (ml_name,  ml_content, _)
         ->
         decorate_module_only  base ml_name ml_content
       | Mli (mli_name , mli_content, _) ->
         decorate_interface_only base  mli_name mli_content
       | Ml_mli (ml_name, ml_content, _, mli_name,   mli_content, _)
         ->
         decorate_module  base mli_name ml_name mli_content ml_content

    )



let build_lazy_queue ppf queue (ast_table : _ t Map_string.t)
    after_parsing_impl
    after_parsing_sig    
  =
  queue |> Queue.iter (fun modname -> 
      match Map_string.find_exn ast_table modname  with
      | {ast_info = Ml(source_file,lazy ast, opref)}
        -> 
        after_parsing_impl ppf source_file opref ast 
      | {ast_info = Mli (source_file,lazy ast,opref) ; }  
        ->
        after_parsing_sig ppf source_file opref ast 
      | {ast_info = Ml_mli(source_file1,lazy impl,opref1,source_file2,lazy intf,opref2)}
        -> 
        after_parsing_sig ppf source_file1 opref1 intf ;
        after_parsing_impl ppf source_file2 opref2 impl
      | exception Not_found -> assert false 
    )
end
module Ext_io : sig 
#1 "ext_io.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

val load_file : string -> string

val rev_lines_of_file : string -> string list

val rev_lines_of_chann : in_channel -> string list

val write_file : string -> string -> unit

end = struct
#1 "ext_io.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


(** on 32 bit , there are 16M limitation *)
let load_file f =
  Ext_pervasives.finally (open_in_bin f) ~clean:close_in begin fun ic ->   
    let n = in_channel_length ic in
    let s = Bytes.create n in
    really_input ic s 0 n;
    Bytes.unsafe_to_string s
  end


let  rev_lines_of_chann chan = 
  let rec loop acc chan = 
    match input_line chan with
    | line -> loop (line :: acc) chan
    | exception End_of_file -> close_in chan ; acc in
  loop [] chan


let rev_lines_of_file file = 
  Ext_pervasives.finally 
    ~clean:close_in 
    (open_in_bin file) rev_lines_of_chann


let write_file f content = 
  Ext_pervasives.finally ~clean:close_out 
    (open_out_bin f)  begin fun oc ->   
    output_string oc content
  end

end
module Docstrings : sig 
#1 "docstrings.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                               Leo White                                *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Documentation comments *)

(** (Re)Initialise all docstring state *)
val init : unit -> unit

(** Emit warnings for unattached and ambiguous docstrings *)
val warn_bad_docstrings : unit -> unit

(** {2 Docstrings} *)

(** Documentation comments *)
type docstring

(** Create a docstring *)
val docstring : string -> Location.t -> docstring

(** Register a docstring *)
val register : docstring -> unit

(** Get the text of a docstring *)
val docstring_body : docstring -> string

(** Get the location of a docstring *)
val docstring_loc : docstring -> Location.t

(** {2 Set functions}

   These functions are used by the lexer to associate docstrings to
   the locations of tokens. *)

(** Docstrings immediately preceding a token *)
val set_pre_docstrings : Lexing.position -> docstring list -> unit

(** Docstrings immediately following a token *)
val set_post_docstrings : Lexing.position -> docstring list -> unit

(** Docstrings not immediately adjacent to a token *)
val set_floating_docstrings : Lexing.position -> docstring list -> unit

(** Docstrings immediately following the token which precedes this one *)
val set_pre_extra_docstrings : Lexing.position -> docstring list -> unit

(** Docstrings immediately preceding the token which follows this one *)
val set_post_extra_docstrings : Lexing.position -> docstring list -> unit

(** {2 Items}

    The {!docs} type represents documentation attached to an item. *)

type docs =
  { docs_pre: docstring option;
    docs_post: docstring option; }

val empty_docs : docs

val docs_attr : docstring -> Parsetree.attribute

(** Convert item documentation to attributes and add them to an
    attribute list *)
val add_docs_attrs : docs -> Parsetree.attributes -> Parsetree.attributes

(** Fetch the item documentation for the current symbol. This also
    marks this documentation (for ambiguity warnings). *)
val symbol_docs : unit -> docs
val symbol_docs_lazy : unit -> docs Lazy.t

(** Fetch the item documentation for the symbols between two
    positions. This also marks this documentation (for ambiguity
    warnings). *)
val rhs_docs : int -> int -> docs
val rhs_docs_lazy : int -> int -> docs Lazy.t

(** Mark the item documentation for the current symbol (for ambiguity
    warnings). *)
val mark_symbol_docs : unit -> unit

(** Mark as associated the item documentation for the symbols between
    two positions (for ambiguity warnings) *)
val mark_rhs_docs : int -> int -> unit

(** {2 Fields and constructors}

    The {!info} type represents documentation attached to a field or
    constructor. *)

type info = docstring option

val empty_info : info

val info_attr : docstring -> Parsetree.attribute

(** Convert field info to attributes and add them to an
    attribute list *)
val add_info_attrs : info -> Parsetree.attributes -> Parsetree.attributes

(** Fetch the field info for the current symbol. *)
val symbol_info : unit -> info

(** Fetch the field info following the symbol at a given position. *)
val rhs_info : int -> info

(** {2 Unattached comments}

    The {!text} type represents documentation which is not attached to
    anything. *)

type text = docstring list

val empty_text : text
val empty_text_lazy : text Lazy.t

val text_attr : docstring -> Parsetree.attribute

(** Convert text to attributes and add them to an attribute list *)
val add_text_attrs : text -> Parsetree.attributes -> Parsetree.attributes

(** Fetch the text preceding the current symbol. *)
val symbol_text : unit -> text
val symbol_text_lazy : unit -> text Lazy.t

(** Fetch the text preceding the symbol at the given position. *)
val rhs_text : int -> text
val rhs_text_lazy : int -> text Lazy.t

(** {2 Extra text}

    There may be additional text attached to the delimiters of a block
    (e.g. [struct] and [end]). This is fetched by the following
    functions, which are applied to the contents of the block rather
    than the delimiters. *)

(** Fetch additional text preceding the current symbol *)
val symbol_pre_extra_text : unit -> text

(** Fetch additional text following the current symbol *)
val symbol_post_extra_text : unit -> text

(** Fetch additional text preceding the symbol at the given position *)
val rhs_pre_extra_text : int -> text

(** Fetch additional text following the symbol at the given position *)
val rhs_post_extra_text : int -> text

end = struct
#1 "docstrings.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                               Leo White                                *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

open Location

(* Docstrings *)

(* A docstring is "attached" if it has been inserted in the AST. This
   is used for generating unexpected docstring warnings. *)
type ds_attached =
  | Unattached   (* Not yet attached anything.*)
  | Info         (* Attached to a field or constructor. *)
  | Docs         (* Attached to an item or as floating text. *)

(* A docstring is "associated" with an item if there are no blank lines between
   them. This is used for generating docstring ambiguity warnings. *)
type ds_associated =
  | Zero             (* Not associated with an item *)
  | One              (* Associated with one item *)
  | Many             (* Associated with multiple items (ambiguity) *)

type docstring =
  { ds_body: string;
    ds_loc: Location.t;
    mutable ds_attached: ds_attached;
    mutable ds_associated: ds_associated; }

(* List of docstrings *)

let docstrings : docstring list ref = ref []

(* Warn for unused and ambiguous docstrings *)

let warn_bad_docstrings () =
  if Warnings.is_active (Warnings.Bad_docstring true) then begin
    List.iter
      (fun ds ->
         match ds.ds_attached with
         | Info -> ()
         | Unattached ->
           prerr_warning ds.ds_loc (Warnings.Bad_docstring true)
         | Docs ->
             match ds.ds_associated with
             | Zero | One -> ()
             | Many ->
               prerr_warning ds.ds_loc (Warnings.Bad_docstring false))
      (List.rev !docstrings)
end

(* Docstring constructors and destructors *)

let docstring body loc =
  let ds =
    { ds_body = body;
      ds_loc = loc;
      ds_attached = Unattached;
      ds_associated = Zero; }
  in
  ds

let register ds =
  docstrings := ds :: !docstrings

let docstring_body ds = ds.ds_body

let docstring_loc ds = ds.ds_loc

(* Docstrings attached to items *)

type docs =
  { docs_pre: docstring option;
    docs_post: docstring option; }

let empty_docs = { docs_pre = None; docs_post = None }

let doc_loc = {txt = "ocaml.doc"; loc = Location.none}

let docs_attr ds =
  let open Parsetree in
  let exp =
    { pexp_desc = Pexp_constant (Pconst_string(ds.ds_body, None));
      pexp_loc = ds.ds_loc;
      pexp_attributes = []; }
  in
  let item =
    { pstr_desc = Pstr_eval (exp, []); pstr_loc = exp.pexp_loc }
  in
    (doc_loc, PStr [item])

let add_docs_attrs docs attrs =
  let attrs =
    match docs.docs_pre with
    | None | Some { ds_body=""; _ } -> attrs
    | Some ds -> docs_attr ds :: attrs
  in
  let attrs =
    match docs.docs_post with
    | None | Some { ds_body=""; _ } -> attrs
    | Some ds -> attrs @ [docs_attr ds]
  in
  attrs

(* Docstrings attached to constructors or fields *)

type info = docstring option

let empty_info = None

let info_attr = docs_attr

let add_info_attrs info attrs =
  match info with
  | None | Some {ds_body=""; _} -> attrs
  | Some ds -> attrs @ [info_attr ds]

(* Docstrings not attached to a specific item *)

type text = docstring list

let empty_text = []
let empty_text_lazy = lazy []

let text_loc = {txt = "ocaml.text"; loc = Location.none}

let text_attr ds =
  let open Parsetree in
  let exp =
    { pexp_desc = Pexp_constant (Pconst_string(ds.ds_body, None));
      pexp_loc = ds.ds_loc;
      pexp_attributes = []; }
  in
  let item =
    { pstr_desc = Pstr_eval (exp, []); pstr_loc = exp.pexp_loc }
  in
    (text_loc, PStr [item])

let add_text_attrs dsl attrs =
  let fdsl = Ext_list.filter dsl (function {ds_body=""} -> false| _ ->true) in
  (List.map text_attr fdsl) @ attrs

(* Find the first non-info docstring in a list, attach it and return it *)
let get_docstring ~info dsl =
  let rec loop = function
    | [] -> None
    | {ds_attached = Info; _} :: rest -> loop rest
    | ds :: _ ->
        ds.ds_attached <- if info then Info else Docs;
        Some ds
  in
  loop dsl

(* Find all the non-info docstrings in a list, attach them and return them *)
let get_docstrings dsl =
  let rec loop acc = function
    | [] -> List.rev acc
    | {ds_attached = Info; _} :: rest -> loop acc rest
    | ds :: rest ->
        ds.ds_attached <- Docs;
        loop (ds :: acc) rest
  in
    loop [] dsl

(* "Associate" all the docstrings in a list *)
let associate_docstrings dsl =
  List.iter
    (fun ds ->
       match ds.ds_associated with
       | Zero -> ds.ds_associated <- One
       | (One | Many) -> ds.ds_associated <- Many)
    dsl

(* Map from positions to pre docstrings *)

let pre_table : (Lexing.position, docstring list) Hashtbl.t =
  Hashtbl.create 50

let set_pre_docstrings pos dsl =
  if dsl <> [] then Hashtbl.add pre_table pos dsl

let get_pre_docs pos =
  try
    let dsl = Hashtbl.find pre_table pos in
      associate_docstrings dsl;
      get_docstring ~info:false dsl
  with Not_found -> None

let mark_pre_docs pos =
  try
    let dsl = Hashtbl.find pre_table pos in
      associate_docstrings dsl
  with Not_found -> ()

(* Map from positions to post docstrings *)

let post_table : (Lexing.position, docstring list) Hashtbl.t =
  Hashtbl.create 50

let set_post_docstrings pos dsl =
  if dsl <> [] then Hashtbl.add post_table pos dsl

let get_post_docs pos =
  try
    let dsl = Hashtbl.find post_table pos in
      associate_docstrings dsl;
      get_docstring ~info:false dsl
  with Not_found -> None

let mark_post_docs pos =
  try
    let dsl = Hashtbl.find post_table pos in
      associate_docstrings dsl
  with Not_found -> ()

let get_info pos =
  try
    let dsl = Hashtbl.find post_table pos in
      get_docstring ~info:true dsl
  with Not_found -> None

(* Map from positions to floating docstrings *)

let floating_table : (Lexing.position, docstring list) Hashtbl.t =
  Hashtbl.create 50

let set_floating_docstrings pos dsl =
  if dsl <> [] then Hashtbl.add floating_table pos dsl

let get_text pos =
  try
    let dsl = Hashtbl.find floating_table pos in
      get_docstrings dsl
  with Not_found -> []

(* Maps from positions to extra docstrings *)

let pre_extra_table : (Lexing.position, docstring list) Hashtbl.t =
  Hashtbl.create 50

let set_pre_extra_docstrings pos dsl =
  if dsl <> [] then Hashtbl.add pre_extra_table pos dsl

let get_pre_extra_text pos =
  try
    let dsl = Hashtbl.find pre_extra_table pos in
      get_docstrings dsl
  with Not_found -> []

let post_extra_table : (Lexing.position, docstring list) Hashtbl.t =
  Hashtbl.create 50

let set_post_extra_docstrings pos dsl =
  if dsl <> [] then Hashtbl.add post_extra_table pos dsl

let get_post_extra_text pos =
  try
    let dsl = Hashtbl.find post_extra_table pos in
      get_docstrings dsl
  with Not_found -> []

(* Docstrings from parser actions *)

let symbol_docs () =
  { docs_pre = get_pre_docs (Parsing.symbol_start_pos ());
    docs_post = get_post_docs (Parsing.symbol_end_pos ()); }

let symbol_docs_lazy () =
  let p1 = Parsing.symbol_start_pos () in
  let p2 = Parsing.symbol_end_pos () in
    lazy { docs_pre = get_pre_docs p1;
           docs_post = get_post_docs p2; }

let rhs_docs pos1 pos2 =
  { docs_pre = get_pre_docs (Parsing.rhs_start_pos pos1);
    docs_post = get_post_docs (Parsing.rhs_end_pos pos2); }

let rhs_docs_lazy pos1 pos2 =
  let p1 = Parsing.rhs_start_pos pos1 in
  let p2 = Parsing.rhs_end_pos pos2 in
    lazy { docs_pre = get_pre_docs p1;
           docs_post = get_post_docs p2; }

let mark_symbol_docs () =
  mark_pre_docs (Parsing.symbol_start_pos ());
  mark_post_docs (Parsing.symbol_end_pos ())

let mark_rhs_docs pos1 pos2 =
  mark_pre_docs (Parsing.rhs_start_pos pos1);
  mark_post_docs (Parsing.rhs_end_pos pos2)

let symbol_info () =
  get_info (Parsing.symbol_end_pos ())

let rhs_info pos =
  get_info (Parsing.rhs_end_pos pos)

let symbol_text () =
  get_text (Parsing.symbol_start_pos ())

let symbol_text_lazy () =
  let pos = Parsing.symbol_start_pos () in
    lazy (get_text pos)

let rhs_text pos =
  get_text (Parsing.rhs_start_pos pos)

let rhs_text_lazy pos =
  let pos = Parsing.rhs_start_pos pos in
    lazy (get_text pos)

let symbol_pre_extra_text () =
  get_pre_extra_text (Parsing.symbol_start_pos ())

let symbol_post_extra_text () =
  get_post_extra_text (Parsing.symbol_end_pos ())

let rhs_pre_extra_text pos =
  get_pre_extra_text (Parsing.rhs_start_pos pos)

let rhs_post_extra_text pos =
  get_post_extra_text (Parsing.rhs_end_pos pos)


(* (Re)Initialise all comment state *)

let init () =
  docstrings := [];
  Hashtbl.reset pre_table;
  Hashtbl.reset post_table;
  Hashtbl.reset floating_table;
  Hashtbl.reset pre_extra_table;
  Hashtbl.reset post_extra_table

end
module Syntaxerr : sig 
#1 "syntaxerr.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1997 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Auxiliary type for reporting syntax errors *)

open Format

type error =
    Unclosed of Location.t * string * Location.t * string
  | Expecting of Location.t * string
  | Not_expecting of Location.t * string
  | Applicative_path of Location.t
  | Variable_in_scope of Location.t * string
  | Other of Location.t
  | Ill_formed_ast of Location.t * string
  | Invalid_package_type of Location.t * string

exception Error of error
exception Escape_error

val report_error: formatter -> error -> unit
 (** @deprecated Use {!Location.error_of_exn}, {!Location.report_error}. *)

val location_of_error: error -> Location.t
val ill_formed_ast: Location.t -> string -> 'a

end = struct
#1 "syntaxerr.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1997 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* Auxiliary type for reporting syntax errors *)

type error =
    Unclosed of Location.t * string * Location.t * string
  | Expecting of Location.t * string
  | Not_expecting of Location.t * string
  | Applicative_path of Location.t
  | Variable_in_scope of Location.t * string
  | Other of Location.t
  | Ill_formed_ast of Location.t * string
  | Invalid_package_type of Location.t * string

exception Error of error
exception Escape_error

let prepare_error = function
  | Unclosed(opening_loc, opening, closing_loc, closing) ->
      Location.errorf ~loc:closing_loc
        ~sub:[
          Location.errorf ~loc:opening_loc
            "This '%s' might be unmatched" opening
        ]
        ~if_highlight:
          (Printf.sprintf "Syntax error: '%s' expected, \
                           the highlighted '%s' might be unmatched"
             closing opening)
        "Syntax error: '%s' expected" closing

  | Expecting (loc, nonterm) ->
      Location.errorf ~loc "Syntax error: %s expected." nonterm
  | Not_expecting (loc, nonterm) ->
      Location.errorf ~loc "Syntax error: %s not expected." nonterm
  | Applicative_path loc ->
      Location.errorf ~loc
        "Syntax error: applicative paths of the form F(X).t \
         are not supported when the option -no-app-func is set."
  | Variable_in_scope (loc, var) ->
      Location.errorf ~loc
        "In this scoped type, variable '%s \
         is reserved for the local type %s."
         var var
  | Other loc ->
      Location.errorf ~loc "Syntax error"
  | Ill_formed_ast (loc, s) ->
      Location.errorf ~loc "broken invariant in parsetree: %s" s
  | Invalid_package_type (loc, s) ->
      Location.errorf ~loc "invalid package type: %s" s

let () =
  Location.register_error_of_exn
    (function
      | Error err -> Some (prepare_error err)
      | _ -> None
    )


let report_error ppf err =
  Location.report_error ppf (prepare_error err)

let location_of_error = function
  | Unclosed(l,_,_,_)
  | Applicative_path l
  | Variable_in_scope(l,_)
  | Other l
  | Not_expecting (l, _)
  | Ill_formed_ast (l, _)
  | Invalid_package_type (l, _)
  | Expecting (l, _) -> l


let ill_formed_ast loc s =
  raise (Error (Ill_formed_ast (loc, s)))

end
module Ast_helper : sig 
#1 "ast_helper.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                         Alain Frisch, LexiFi                           *)
(*                                                                        *)
(*   Copyright 2012 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Helpers to produce Parsetree fragments *)

open Asttypes
open Docstrings
open Parsetree

type lid = Longident.t loc
type str = string loc
type loc = Location.t
type attrs = attribute list

(** {1 Default locations} *)

val default_loc: loc ref
    (** Default value for all optional location arguments. *)

val with_default_loc: loc -> (unit -> 'a) -> 'a
    (** Set the [default_loc] within the scope of the execution
        of the provided function. *)

(** {1 Constants} *)

module Const : sig
  val char : char -> constant
  val string : ?quotation_delimiter:string -> string -> constant
  val integer : ?suffix:char -> string -> constant
  val int : ?suffix:char -> int -> constant
  val int32 : ?suffix:char -> int32 -> constant
  val int64 : ?suffix:char -> int64 -> constant
  val nativeint : ?suffix:char -> nativeint -> constant
  val float : ?suffix:char -> string -> constant
end

(** {1 Core language} *)

(** Type expressions *)
module Typ :
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> core_type_desc -> core_type
    val attr: core_type -> attribute -> core_type

    val any: ?loc:loc -> ?attrs:attrs -> unit -> core_type
    val var: ?loc:loc -> ?attrs:attrs -> string -> core_type
    val arrow: ?loc:loc -> ?attrs:attrs -> arg_label -> core_type -> core_type
               -> core_type
    val tuple: ?loc:loc -> ?attrs:attrs -> core_type list -> core_type
    val constr: ?loc:loc -> ?attrs:attrs -> lid -> core_type list -> core_type
    val object_: ?loc:loc -> ?attrs:attrs -> object_field list
                   -> closed_flag -> core_type
    val class_: ?loc:loc -> ?attrs:attrs -> lid -> core_type list -> core_type
    val alias: ?loc:loc -> ?attrs:attrs -> core_type -> string -> core_type
    val variant: ?loc:loc -> ?attrs:attrs -> row_field list -> closed_flag
                 -> label list option -> core_type
    val poly: ?loc:loc -> ?attrs:attrs -> str list -> core_type -> core_type
    val package: ?loc:loc -> ?attrs:attrs -> lid -> (lid * core_type) list
                 -> core_type
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> core_type

    val force_poly: core_type -> core_type

    val varify_constructors: str list -> core_type -> core_type
    (** [varify_constructors newtypes te] is type expression [te], of which
        any of nullary type constructor [tc] is replaced by type variable of
        the same name, if [tc]'s name appears in [newtypes].
        Raise [Syntaxerr.Variable_in_scope] if any type variable inside [te]
        appears in [newtypes].
        @since 4.05
     *)
  end

(** Patterns *)
module Pat:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> pattern_desc -> pattern
    val attr:pattern -> attribute -> pattern

    val any: ?loc:loc -> ?attrs:attrs -> unit -> pattern
    val var: ?loc:loc -> ?attrs:attrs -> str -> pattern
    val alias: ?loc:loc -> ?attrs:attrs -> pattern -> str -> pattern
    val constant: ?loc:loc -> ?attrs:attrs -> constant -> pattern
    val interval: ?loc:loc -> ?attrs:attrs -> constant -> constant -> pattern
    val tuple: ?loc:loc -> ?attrs:attrs -> pattern list -> pattern
    val construct: ?loc:loc -> ?attrs:attrs -> lid -> pattern option -> pattern
    val variant: ?loc:loc -> ?attrs:attrs -> label -> pattern option -> pattern
    val record: ?loc:loc -> ?attrs:attrs -> (lid * pattern) list -> closed_flag
                -> pattern
    val array: ?loc:loc -> ?attrs:attrs -> pattern list -> pattern
    val or_: ?loc:loc -> ?attrs:attrs -> pattern -> pattern -> pattern
    val constraint_: ?loc:loc -> ?attrs:attrs -> pattern -> core_type -> pattern
    val type_: ?loc:loc -> ?attrs:attrs -> lid -> pattern
    val lazy_: ?loc:loc -> ?attrs:attrs -> pattern -> pattern
    val unpack: ?loc:loc -> ?attrs:attrs -> str -> pattern
    val open_: ?loc:loc -> ?attrs:attrs  -> lid -> pattern -> pattern
    val exception_: ?loc:loc -> ?attrs:attrs -> pattern -> pattern
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> pattern
  end

(** Expressions *)
module Exp:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> expression_desc -> expression
    val attr: expression -> attribute -> expression

    val ident: ?loc:loc -> ?attrs:attrs -> lid -> expression
    val constant: ?loc:loc -> ?attrs:attrs -> constant -> expression
    val let_: ?loc:loc -> ?attrs:attrs -> rec_flag -> value_binding list
              -> expression -> expression
    val fun_: ?loc:loc -> ?attrs:attrs -> arg_label -> expression option
              -> pattern -> expression -> expression
    val function_: ?loc:loc -> ?attrs:attrs -> case list -> expression
    val apply: ?loc:loc -> ?attrs:attrs -> expression
               -> (arg_label * expression) list -> expression
    val match_: ?loc:loc -> ?attrs:attrs -> expression -> case list
                -> expression
    val try_: ?loc:loc -> ?attrs:attrs -> expression -> case list -> expression
    val tuple: ?loc:loc -> ?attrs:attrs -> expression list -> expression
    val construct: ?loc:loc -> ?attrs:attrs -> lid -> expression option
                   -> expression
    val variant: ?loc:loc -> ?attrs:attrs -> label -> expression option
                 -> expression
    val record: ?loc:loc -> ?attrs:attrs -> (lid * expression) list
                -> expression option -> expression
    val field: ?loc:loc -> ?attrs:attrs -> expression -> lid -> expression
    val setfield: ?loc:loc -> ?attrs:attrs -> expression -> lid -> expression
                  -> expression
    val array: ?loc:loc -> ?attrs:attrs -> expression list -> expression
    val ifthenelse: ?loc:loc -> ?attrs:attrs -> expression -> expression
                    -> expression option -> expression
    val sequence: ?loc:loc -> ?attrs:attrs -> expression -> expression
                  -> expression
    val while_: ?loc:loc -> ?attrs:attrs -> expression -> expression
                -> expression
    val for_: ?loc:loc -> ?attrs:attrs -> pattern -> expression -> expression
              -> direction_flag -> expression -> expression
    val coerce: ?loc:loc -> ?attrs:attrs -> expression -> core_type option
                -> core_type -> expression
    val constraint_: ?loc:loc -> ?attrs:attrs -> expression -> core_type
                     -> expression
    val send: ?loc:loc -> ?attrs:attrs -> expression -> str -> expression
    val new_: ?loc:loc -> ?attrs:attrs -> lid -> expression
    val setinstvar: ?loc:loc -> ?attrs:attrs -> str -> expression -> expression
    val override: ?loc:loc -> ?attrs:attrs -> (str * expression) list
                  -> expression
    val letmodule: ?loc:loc -> ?attrs:attrs -> str -> module_expr -> expression
                   -> expression
    val letexception:
      ?loc:loc -> ?attrs:attrs -> extension_constructor -> expression
      -> expression
    val assert_: ?loc:loc -> ?attrs:attrs -> expression -> expression
    val lazy_: ?loc:loc -> ?attrs:attrs -> expression -> expression
    val poly: ?loc:loc -> ?attrs:attrs -> expression -> core_type option
              -> expression
    val object_: ?loc:loc -> ?attrs:attrs -> class_structure -> expression
    val newtype: ?loc:loc -> ?attrs:attrs -> str -> expression -> expression
    val pack: ?loc:loc -> ?attrs:attrs -> module_expr -> expression
    val open_: ?loc:loc -> ?attrs:attrs -> override_flag -> lid -> expression
               -> expression
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> expression
    val unreachable: ?loc:loc -> ?attrs:attrs -> unit -> expression

    val case: pattern -> ?guard:expression -> expression -> case
  end

(** Value declarations *)
module Val:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> ?docs:docs ->
      ?prim:string list -> str -> core_type -> value_description
  end

(** Type declarations *)
module Type:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?text:text ->
      ?params:(core_type * variance) list ->
      ?cstrs:(core_type * core_type * loc) list ->
      ?kind:type_kind -> ?priv:private_flag -> ?manifest:core_type -> str ->
      type_declaration

    val constructor: ?loc:loc -> ?attrs:attrs -> ?info:info ->
      ?args:constructor_arguments -> ?res:core_type -> str ->
      constructor_declaration
    val field: ?loc:loc -> ?attrs:attrs -> ?info:info ->
      ?mut:mutable_flag -> str -> core_type -> label_declaration
  end

(** Type extensions *)
module Te:
  sig
    val mk: ?attrs:attrs -> ?docs:docs ->
      ?params:(core_type * variance) list -> ?priv:private_flag ->
      lid -> extension_constructor list -> type_extension

    val constructor: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?info:info ->
      str -> extension_constructor_kind -> extension_constructor

    val decl: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?info:info ->
      ?args:constructor_arguments -> ?res:core_type -> str ->
      extension_constructor
    val rebind: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?info:info ->
      str -> lid -> extension_constructor
  end

(** {1 Module language} *)

(** Module type expressions *)
module Mty:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> module_type_desc -> module_type
    val attr: module_type -> attribute -> module_type

    val ident: ?loc:loc -> ?attrs:attrs -> lid -> module_type
    val alias: ?loc:loc -> ?attrs:attrs -> lid -> module_type
    val signature: ?loc:loc -> ?attrs:attrs -> signature -> module_type
    val functor_: ?loc:loc -> ?attrs:attrs ->
      str -> module_type option -> module_type -> module_type
    val with_: ?loc:loc -> ?attrs:attrs -> module_type ->
      with_constraint list -> module_type
    val typeof_: ?loc:loc -> ?attrs:attrs -> module_expr -> module_type
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> module_type
  end

(** Module expressions *)
module Mod:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> module_expr_desc -> module_expr
    val attr: module_expr -> attribute -> module_expr

    val ident: ?loc:loc -> ?attrs:attrs -> lid -> module_expr
    val structure: ?loc:loc -> ?attrs:attrs -> structure -> module_expr
    val functor_: ?loc:loc -> ?attrs:attrs ->
      str -> module_type option -> module_expr -> module_expr
    val apply: ?loc:loc -> ?attrs:attrs -> module_expr -> module_expr ->
      module_expr
    val constraint_: ?loc:loc -> ?attrs:attrs -> module_expr -> module_type ->
      module_expr
    val unpack: ?loc:loc -> ?attrs:attrs -> expression -> module_expr
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> module_expr
  end

(** Signature items *)
module Sig:
  sig
    val mk: ?loc:loc -> signature_item_desc -> signature_item

    val value: ?loc:loc -> value_description -> signature_item
    val type_: ?loc:loc -> rec_flag -> type_declaration list -> signature_item
    val type_extension: ?loc:loc -> type_extension -> signature_item
    val exception_: ?loc:loc -> extension_constructor -> signature_item
    val module_: ?loc:loc -> module_declaration -> signature_item
    val rec_module: ?loc:loc -> module_declaration list -> signature_item
    val modtype: ?loc:loc -> module_type_declaration -> signature_item
    val open_: ?loc:loc -> open_description -> signature_item
    val include_: ?loc:loc -> include_description -> signature_item
    val class_: ?loc:loc -> class_description list -> signature_item
    val class_type: ?loc:loc -> class_type_declaration list -> signature_item
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> signature_item
    val attribute: ?loc:loc -> attribute -> signature_item
    val text: text -> signature_item list
  end

(** Structure items *)
module Str:
  sig
    val mk: ?loc:loc -> structure_item_desc -> structure_item

    val eval: ?loc:loc -> ?attrs:attributes -> expression -> structure_item
    val value: ?loc:loc -> rec_flag -> value_binding list -> structure_item
    val primitive: ?loc:loc -> value_description -> structure_item
    val type_: ?loc:loc -> rec_flag -> type_declaration list -> structure_item
    val type_extension: ?loc:loc -> type_extension -> structure_item
    val exception_: ?loc:loc -> extension_constructor -> structure_item
    val module_: ?loc:loc -> module_binding -> structure_item
    val rec_module: ?loc:loc -> module_binding list -> structure_item
    val modtype: ?loc:loc -> module_type_declaration -> structure_item
    val open_: ?loc:loc -> open_description -> structure_item
    val class_type: ?loc:loc -> class_type_declaration list -> structure_item
    val include_: ?loc:loc -> include_declaration -> structure_item
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> structure_item
    val attribute: ?loc:loc -> attribute -> structure_item
    val text: text -> structure_item list
  end

(** Module declarations *)
module Md:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?text:text ->
      str -> module_type -> module_declaration
  end

(** Module type declarations *)
module Mtd:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?text:text ->
      ?typ:module_type -> str -> module_type_declaration
  end

(** Module bindings *)
module Mb:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?text:text ->
      str -> module_expr -> module_binding
  end

(** Opens *)
module Opn:
  sig
    val mk: ?loc: loc -> ?attrs:attrs -> ?docs:docs ->
      ?override:override_flag -> lid -> open_description
  end

(** Includes *)
module Incl:
  sig
    val mk: ?loc: loc -> ?attrs:attrs -> ?docs:docs -> 'a -> 'a include_infos
  end

(** Value bindings *)
module Vb:
  sig
    val mk: ?loc: loc -> ?attrs:attrs -> ?docs:docs -> ?text:text ->
      pattern -> expression -> value_binding
  end


(** {1 Class language} *)

(** Class type expressions *)
module Cty:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> class_type_desc -> class_type
    val attr: class_type -> attribute -> class_type

    val constr: ?loc:loc -> ?attrs:attrs -> lid -> core_type list -> class_type
    val signature: ?loc:loc -> ?attrs:attrs -> class_signature -> class_type
    val arrow: ?loc:loc -> ?attrs:attrs -> arg_label -> core_type ->
      class_type -> class_type
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> class_type
    val open_: ?loc:loc -> ?attrs:attrs -> override_flag -> lid -> class_type
               -> class_type
  end

(** Class type fields *)
module Ctf:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> ?docs:docs ->
      class_type_field_desc -> class_type_field
    val attr: class_type_field -> attribute -> class_type_field

    val inherit_: ?loc:loc -> ?attrs:attrs -> class_type -> class_type_field
    val val_: ?loc:loc -> ?attrs:attrs -> str -> mutable_flag ->
      virtual_flag -> core_type -> class_type_field
    val method_: ?loc:loc -> ?attrs:attrs -> str -> private_flag ->
      virtual_flag -> core_type -> class_type_field
    val constraint_: ?loc:loc -> ?attrs:attrs -> core_type -> core_type ->
      class_type_field
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> class_type_field
    val attribute: ?loc:loc -> attribute -> class_type_field
    val text: text -> class_type_field list
  end

(** Class expressions *)
module Cl:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> class_expr_desc -> class_expr
    val attr: class_expr -> attribute -> class_expr

    val constr: ?loc:loc -> ?attrs:attrs -> lid -> core_type list -> class_expr
    val structure: ?loc:loc -> ?attrs:attrs -> class_structure -> class_expr
    val fun_: ?loc:loc -> ?attrs:attrs -> arg_label -> expression option ->
      pattern -> class_expr -> class_expr
    val apply: ?loc:loc -> ?attrs:attrs -> class_expr ->
      (arg_label * expression) list -> class_expr
    val let_: ?loc:loc -> ?attrs:attrs -> rec_flag -> value_binding list ->
      class_expr -> class_expr
    val constraint_: ?loc:loc -> ?attrs:attrs -> class_expr -> class_type ->
      class_expr
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> class_expr
    val open_: ?loc:loc -> ?attrs:attrs -> override_flag -> lid -> class_expr
               -> class_expr
  end

(** Class fields *)
module Cf:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> class_field_desc ->
      class_field
    val attr: class_field -> attribute -> class_field

    val val_: ?loc:loc -> ?attrs:attrs -> str -> mutable_flag ->
      class_field_kind -> class_field
    val method_: ?loc:loc -> ?attrs:attrs -> str -> private_flag ->
      class_field_kind -> class_field
    val constraint_: ?loc:loc -> ?attrs:attrs -> core_type -> core_type ->
      class_field
    val initializer_: ?loc:loc -> ?attrs:attrs -> expression -> class_field
    val extension: ?loc:loc -> ?attrs:attrs -> extension -> class_field
    val attribute: ?loc:loc -> attribute -> class_field
    val text: text -> class_field list

    val virtual_: core_type -> class_field_kind
    val concrete: override_flag -> expression -> class_field_kind

  end

(** Classes *)
module Ci:
  sig
    val mk: ?loc:loc -> ?attrs:attrs -> ?docs:docs -> ?text:text ->
      ?virt:virtual_flag -> ?params:(core_type * variance) list ->
      str -> 'a -> 'a class_infos
  end

(** Class signatures *)
module Csig:
  sig
    val mk: core_type -> class_type_field list -> class_signature
  end

(** Class structures *)
module Cstr:
  sig
    val mk: pattern -> class_field list -> class_structure
  end

end = struct
#1 "ast_helper.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*                         Alain Frisch, LexiFi                           *)
(*                                                                        *)
(*   Copyright 2012 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Helpers to produce Parsetree fragments *)

open Asttypes
open Parsetree
open Docstrings

type lid = Longident.t loc
type str = string loc
type loc = Location.t
type attrs = attribute list

let default_loc = ref Location.none

let with_default_loc l f =
  let old = !default_loc in
  default_loc := l;
  try let r = f () in default_loc := old; r
  with exn -> default_loc := old; raise exn

module Const = struct
  let integer ?suffix i = Pconst_integer (i, suffix)
  let int ?suffix i = integer ?suffix (string_of_int i)
  let int32 ?(suffix='l') i = integer ~suffix (Int32.to_string i)
  let int64 ?(suffix='L') i = integer ~suffix (Int64.to_string i)
  let nativeint ?(suffix='n') i = integer ~suffix (Nativeint.to_string i)
  let float ?suffix f = Pconst_float (f, suffix)
  let char c = Pconst_char c
  let string ?quotation_delimiter s = Pconst_string (s, quotation_delimiter)
end

module Typ = struct
  let mk ?(loc = !default_loc) ?(attrs = []) d =
    {ptyp_desc = d; ptyp_loc = loc; ptyp_attributes = attrs}
  let attr d a = {d with ptyp_attributes = d.ptyp_attributes @ [a]}

  let any ?loc ?attrs () = mk ?loc ?attrs Ptyp_any
  let var ?loc ?attrs a = mk ?loc ?attrs (Ptyp_var a)
  let arrow ?loc ?attrs a b c = mk ?loc ?attrs (Ptyp_arrow (a, b, c))
  let tuple ?loc ?attrs a = mk ?loc ?attrs (Ptyp_tuple a)
  let constr ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_constr (a, b))
  let object_ ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_object (a, b))
  let class_ ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_class (a, b))
  let alias ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_alias (a, b))
  let variant ?loc ?attrs a b c = mk ?loc ?attrs (Ptyp_variant (a, b, c))
  let poly ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_poly (a, b))
  let package ?loc ?attrs a b = mk ?loc ?attrs (Ptyp_package (a, b))
  let extension ?loc ?attrs a = mk ?loc ?attrs (Ptyp_extension a)

  let force_poly t =
    match t.ptyp_desc with
    | Ptyp_poly _ -> t
    | _ -> poly ~loc:t.ptyp_loc [] t (* -> ghost? *)

  let varify_constructors var_names t =
    let check_variable vl loc v =
      if List.mem v vl then
        raise Syntaxerr.(Error(Variable_in_scope(loc,v))) in
    let var_names = List.map (fun v -> v.txt) var_names in
    let rec loop t =
      let desc =
        match t.ptyp_desc with
        | Ptyp_any -> Ptyp_any
        | Ptyp_var x ->
            check_variable var_names t.ptyp_loc x;
            Ptyp_var x
        | Ptyp_arrow (label,core_type,core_type') ->
            Ptyp_arrow(label, loop core_type, loop core_type')
        | Ptyp_tuple lst -> Ptyp_tuple (List.map loop lst)
        | Ptyp_constr( { txt = Longident.Lident s }, [])
          when List.mem s var_names ->
            Ptyp_var s
        | Ptyp_constr(longident, lst) ->
            Ptyp_constr(longident, List.map loop lst)
        | Ptyp_object (lst, o) ->
            Ptyp_object (List.map loop_object_field lst, o)
        | Ptyp_class (longident, lst) ->
            Ptyp_class (longident, List.map loop lst)
        | Ptyp_alias(core_type, string) ->
            check_variable var_names t.ptyp_loc string;
            Ptyp_alias(loop core_type, string)
        | Ptyp_variant(row_field_list, flag, lbl_lst_option) ->
            Ptyp_variant(List.map loop_row_field row_field_list,
                         flag, lbl_lst_option)
        | Ptyp_poly(string_lst, core_type) ->
          List.iter (fun v ->
            check_variable var_names t.ptyp_loc v.txt) string_lst;
            Ptyp_poly(string_lst, loop core_type)
        | Ptyp_package(longident,lst) ->
            Ptyp_package(longident,List.map (fun (n,typ) -> (n,loop typ) ) lst)
        | Ptyp_extension (s, arg) ->
            Ptyp_extension (s, arg)
      in
      {t with ptyp_desc = desc}
    and loop_row_field  =
      function
        | Rtag(label,attrs,flag,lst) ->
            Rtag(label,attrs,flag,List.map loop lst)
        | Rinherit t ->
            Rinherit (loop t)
    and loop_object_field =
      function
        | Otag(label, attrs, t) ->
            Otag(label, attrs, loop t)
        | Oinherit t ->
            Oinherit (loop t)
    in
    loop t

end

module Pat = struct
  let mk ?(loc = !default_loc) ?(attrs = []) d =
    {ppat_desc = d; ppat_loc = loc; ppat_attributes = attrs}
  let attr d a = {d with ppat_attributes = d.ppat_attributes @ [a]}

  let any ?loc ?attrs () = mk ?loc ?attrs Ppat_any
  let var ?loc ?attrs a = mk ?loc ?attrs (Ppat_var a)
  let alias ?loc ?attrs a b = mk ?loc ?attrs (Ppat_alias (a, b))
  let constant ?loc ?attrs a = mk ?loc ?attrs (Ppat_constant a)
  let interval ?loc ?attrs a b = mk ?loc ?attrs (Ppat_interval (a, b))
  let tuple ?loc ?attrs a = mk ?loc ?attrs (Ppat_tuple a)
  let construct ?loc ?attrs a b = mk ?loc ?attrs (Ppat_construct (a, b))
  let variant ?loc ?attrs a b = mk ?loc ?attrs (Ppat_variant (a, b))
  let record ?loc ?attrs a b = mk ?loc ?attrs (Ppat_record (a, b))
  let array ?loc ?attrs a = mk ?loc ?attrs (Ppat_array a)
  let or_ ?loc ?attrs a b = mk ?loc ?attrs (Ppat_or (a, b))
  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Ppat_constraint (a, b))
  let type_ ?loc ?attrs a = mk ?loc ?attrs (Ppat_type a)
  let lazy_ ?loc ?attrs a = mk ?loc ?attrs (Ppat_lazy a)
  let unpack ?loc ?attrs a = mk ?loc ?attrs (Ppat_unpack a)
  let open_ ?loc ?attrs a b = mk ?loc ?attrs (Ppat_open (a, b))
  let exception_ ?loc ?attrs a = mk ?loc ?attrs (Ppat_exception a)
  let extension ?loc ?attrs a = mk ?loc ?attrs (Ppat_extension a)
end

module Exp = struct
  let mk ?(loc = !default_loc) ?(attrs = []) d =
    {pexp_desc = d; pexp_loc = loc; pexp_attributes = attrs}
  let attr d a = {d with pexp_attributes = d.pexp_attributes @ [a]}

  let ident ?loc ?attrs a = mk ?loc ?attrs (Pexp_ident a)
  let constant ?loc ?attrs a = mk ?loc ?attrs (Pexp_constant a)
  let let_ ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_let (a, b, c))
  let fun_ ?loc ?attrs a b c d = mk ?loc ?attrs (Pexp_fun (a, b, c, d))
  let function_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_function a)
  let apply ?loc ?attrs a b = mk ?loc ?attrs (Pexp_apply (a, b))
  let match_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_match (a, b))
  let try_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_try (a, b))
  let tuple ?loc ?attrs a = mk ?loc ?attrs (Pexp_tuple a)
  let construct ?loc ?attrs a b = mk ?loc ?attrs (Pexp_construct (a, b))
  let variant ?loc ?attrs a b = mk ?loc ?attrs (Pexp_variant (a, b))
  let record ?loc ?attrs a b = mk ?loc ?attrs (Pexp_record (a, b))
  let field ?loc ?attrs a b = mk ?loc ?attrs (Pexp_field (a, b))
  let setfield ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_setfield (a, b, c))
  let array ?loc ?attrs a = mk ?loc ?attrs (Pexp_array a)
  let ifthenelse ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_ifthenelse (a, b, c))
  let sequence ?loc ?attrs a b = mk ?loc ?attrs (Pexp_sequence (a, b))
  let while_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_while (a, b))
  let for_ ?loc ?attrs a b c d e = mk ?loc ?attrs (Pexp_for (a, b, c, d, e))
  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Pexp_constraint (a, b))
  let coerce ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_coerce (a, b, c))
  let send ?loc ?attrs a b = mk ?loc ?attrs (Pexp_send (a, b))
  let new_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_new a)
  let setinstvar ?loc ?attrs a b = mk ?loc ?attrs (Pexp_setinstvar (a, b))
  let override ?loc ?attrs a = mk ?loc ?attrs (Pexp_override a)
  let letmodule ?loc ?attrs a b c= mk ?loc ?attrs (Pexp_letmodule (a, b, c))
  let letexception ?loc ?attrs a b = mk ?loc ?attrs (Pexp_letexception (a, b))
  let assert_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_assert a)
  let lazy_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_lazy a)
  let poly ?loc ?attrs a b = mk ?loc ?attrs (Pexp_poly (a, b))
  let object_ ?loc ?attrs a = mk ?loc ?attrs (Pexp_object a)
  let newtype ?loc ?attrs a b = mk ?loc ?attrs (Pexp_newtype (a, b))
  let pack ?loc ?attrs a = mk ?loc ?attrs (Pexp_pack a)
  let open_ ?loc ?attrs a b c = mk ?loc ?attrs (Pexp_open (a, b, c))
  let extension ?loc ?attrs a = mk ?loc ?attrs (Pexp_extension a)
  let unreachable ?loc ?attrs () = mk ?loc ?attrs Pexp_unreachable

  let case lhs ?guard rhs =
    {
     pc_lhs = lhs;
     pc_guard = guard;
     pc_rhs = rhs;
    }
end

module Mty = struct
  let mk ?(loc = !default_loc) ?(attrs = []) d =
    {pmty_desc = d; pmty_loc = loc; pmty_attributes = attrs}
  let attr d a = {d with pmty_attributes = d.pmty_attributes @ [a]}

  let ident ?loc ?attrs a = mk ?loc ?attrs (Pmty_ident a)
  let alias ?loc ?attrs a = mk ?loc ?attrs (Pmty_alias a)
  let signature ?loc ?attrs a = mk ?loc ?attrs (Pmty_signature a)
  let functor_ ?loc ?attrs a b c = mk ?loc ?attrs (Pmty_functor (a, b, c))
  let with_ ?loc ?attrs a b = mk ?loc ?attrs (Pmty_with (a, b))
  let typeof_ ?loc ?attrs a = mk ?loc ?attrs (Pmty_typeof a)
  let extension ?loc ?attrs a = mk ?loc ?attrs (Pmty_extension a)
end

module Mod = struct
let mk ?(loc = !default_loc) ?(attrs = []) d =
  {pmod_desc = d; pmod_loc = loc; pmod_attributes = attrs}
  let attr d a = {d with pmod_attributes = d.pmod_attributes @ [a]}

  let ident ?loc ?attrs x = mk ?loc ?attrs (Pmod_ident x)
  let structure ?loc ?attrs x = mk ?loc ?attrs (Pmod_structure x)
  let functor_ ?loc ?attrs arg arg_ty body =
    mk ?loc ?attrs (Pmod_functor (arg, arg_ty, body))
  let apply ?loc ?attrs m1 m2 = mk ?loc ?attrs (Pmod_apply (m1, m2))
  let constraint_ ?loc ?attrs m mty = mk ?loc ?attrs (Pmod_constraint (m, mty))
  let unpack ?loc ?attrs e = mk ?loc ?attrs (Pmod_unpack e)
  let extension ?loc ?attrs a = mk ?loc ?attrs (Pmod_extension a)
end

module Sig = struct
  let mk ?(loc = !default_loc) d = {psig_desc = d; psig_loc = loc}

  let value ?loc a = mk ?loc (Psig_value a)
  let type_ ?loc rec_flag a = mk ?loc (Psig_type (rec_flag, a))
  let type_extension ?loc a = mk ?loc (Psig_typext a)
  let exception_ ?loc a = mk ?loc (Psig_exception a)
  let module_ ?loc a = mk ?loc (Psig_module a)
  let rec_module ?loc a = mk ?loc (Psig_recmodule a)
  let modtype ?loc a = mk ?loc (Psig_modtype a)
  let open_ ?loc a = mk ?loc (Psig_open a)
  let include_ ?loc a = mk ?loc (Psig_include a)
  let class_ ?loc a = mk ?loc (Psig_class a)
  let class_type ?loc a = mk ?loc (Psig_class_type a)
  let extension ?loc ?(attrs = []) a = mk ?loc (Psig_extension (a, attrs))
  let attribute ?loc a = mk ?loc (Psig_attribute a)
  let text txt =
    let f_txt = Ext_list.filter txt (fun ds -> docstring_body ds <> "") in
    List.map
      (fun ds -> attribute ~loc:(docstring_loc ds) (text_attr ds))
      f_txt
end

module Str = struct
  let mk ?(loc = !default_loc) d = {pstr_desc = d; pstr_loc = loc}

  let eval ?loc ?(attrs = []) a = mk ?loc (Pstr_eval (a, attrs))
  let value ?loc a b = mk ?loc (Pstr_value (a, b))
  let primitive ?loc a = mk ?loc (Pstr_primitive a)
  let type_ ?loc rec_flag a = mk ?loc (Pstr_type (rec_flag, a))
  let type_extension ?loc a = mk ?loc (Pstr_typext a)
  let exception_ ?loc a = mk ?loc (Pstr_exception a)
  let module_ ?loc a = mk ?loc (Pstr_module a)
  let rec_module ?loc a = mk ?loc (Pstr_recmodule a)
  let modtype ?loc a = mk ?loc (Pstr_modtype a)
  let open_ ?loc a = mk ?loc (Pstr_open a)
  let class_type ?loc a = mk ?loc (Pstr_class_type a)
  let include_ ?loc a = mk ?loc (Pstr_include a)
  let extension ?loc ?(attrs = []) a = mk ?loc (Pstr_extension (a, attrs))
  let attribute ?loc a = mk ?loc (Pstr_attribute a)
  let text txt =
    let f_txt = Ext_list.filter txt (fun ds -> docstring_body ds <> "") in
    List.map
      (fun ds -> attribute ~loc:(docstring_loc ds) (text_attr ds))
      f_txt
end

module Cl = struct
  let mk ?(loc = !default_loc) ?(attrs = []) d =
    {
     pcl_desc = d;
     pcl_loc = loc;
     pcl_attributes = attrs;
    }
  let attr d a = {d with pcl_attributes = d.pcl_attributes @ [a]}

  let constr ?loc ?attrs a b = mk ?loc ?attrs (Pcl_constr (a, b))
  let structure ?loc ?attrs a = mk ?loc ?attrs (Pcl_structure a)
  let fun_ ?loc ?attrs a b c d = mk ?loc ?attrs (Pcl_fun (a, b, c, d))
  let apply ?loc ?attrs a b = mk ?loc ?attrs (Pcl_apply (a, b))
  let let_ ?loc ?attrs a b c = mk ?loc ?attrs (Pcl_let (a, b, c))
  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Pcl_constraint (a, b))
  let extension ?loc ?attrs a = mk ?loc ?attrs (Pcl_extension a)
  let open_ ?loc ?attrs a b c = mk ?loc ?attrs (Pcl_open (a, b, c))
end

module Cty = struct
  let mk ?(loc = !default_loc) ?(attrs = []) d =
    {
     pcty_desc = d;
     pcty_loc = loc;
     pcty_attributes = attrs;
    }
  let attr d a = {d with pcty_attributes = d.pcty_attributes @ [a]}

  let constr ?loc ?attrs a b = mk ?loc ?attrs (Pcty_constr (a, b))
  let signature ?loc ?attrs a = mk ?loc ?attrs (Pcty_signature a)
  let arrow ?loc ?attrs a b c = mk ?loc ?attrs (Pcty_arrow (a, b, c))
  let extension ?loc ?attrs a = mk ?loc ?attrs (Pcty_extension a)
  let open_ ?loc ?attrs a b c = mk ?loc ?attrs (Pcty_open (a, b, c))
end

module Ctf = struct
  let mk ?(loc = !default_loc) ?(attrs = [])
           ?(docs = empty_docs) d =
    {
     pctf_desc = d;
     pctf_loc = loc;
     pctf_attributes = add_docs_attrs docs attrs;
    }

  let inherit_ ?loc ?attrs a = mk ?loc ?attrs (Pctf_inherit a)
  let val_ ?loc ?attrs a b c d = mk ?loc ?attrs (Pctf_val (a, b, c, d))
  let method_ ?loc ?attrs a b c d = mk ?loc ?attrs (Pctf_method (a, b, c, d))
  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Pctf_constraint (a, b))
  let extension ?loc ?attrs a = mk ?loc ?attrs (Pctf_extension a)
  let attribute ?loc a = mk ?loc (Pctf_attribute a)
  let text txt =
   let f_txt = Ext_list.filter txt (fun ds -> docstring_body ds <> "")in
     List.map
      (fun ds -> attribute ~loc:(docstring_loc ds) (text_attr ds))
      f_txt

  let attr d a = {d with pctf_attributes = d.pctf_attributes @ [a]}

end

module Cf = struct
  let mk ?(loc = !default_loc) ?(attrs = [])
        ?(docs = empty_docs) d =
    {
     pcf_desc = d;
     pcf_loc = loc;
     pcf_attributes = add_docs_attrs docs attrs;
    }

  
  let val_ ?loc ?attrs a b c = mk ?loc ?attrs (Pcf_val (a, b, c))
  let method_ ?loc ?attrs a b c = mk ?loc ?attrs (Pcf_method (a, b, c))
  let constraint_ ?loc ?attrs a b = mk ?loc ?attrs (Pcf_constraint (a, b))
  let initializer_ ?loc ?attrs a = mk ?loc ?attrs (Pcf_initializer a)
  let extension ?loc ?attrs a = mk ?loc ?attrs (Pcf_extension a)
  let attribute ?loc a = mk ?loc (Pcf_attribute a)
  let text txt =
    let f_txt = Ext_list.filter txt (fun ds -> docstring_body ds <> "")in
    List.map
      (fun ds -> attribute ~loc:(docstring_loc ds) (text_attr ds))
      f_txt

  let virtual_ ct = Cfk_virtual ct
  let concrete o e = Cfk_concrete (o, e)

  let attr d a = {d with pcf_attributes = d.pcf_attributes @ [a]}

end

module Val = struct
  let mk ?(loc = !default_loc) ?(attrs = []) ?(docs = empty_docs)
        ?(prim = []) name typ =
    {
     pval_name = name;
     pval_type = typ;
     pval_attributes = add_docs_attrs docs attrs;
     pval_loc = loc;
     pval_prim = prim;
    }
end

module Md = struct
  let mk ?(loc = !default_loc) ?(attrs = [])
        ?(docs = empty_docs) ?(text = []) name typ =
    {
     pmd_name = name;
     pmd_type = typ;
     pmd_attributes =
       add_text_attrs text (add_docs_attrs docs attrs);
     pmd_loc = loc;
    }
end

module Mtd = struct
  let mk ?(loc = !default_loc) ?(attrs = [])
        ?(docs = empty_docs) ?(text = []) ?typ name =
    {
     pmtd_name = name;
     pmtd_type = typ;
     pmtd_attributes =
       add_text_attrs text (add_docs_attrs docs attrs);
     pmtd_loc = loc;
    }
end

module Mb = struct
  let mk ?(loc = !default_loc) ?(attrs = [])
        ?(docs = empty_docs) ?(text = []) name expr =
    {
     pmb_name = name;
     pmb_expr = expr;
     pmb_attributes =
       add_text_attrs text (add_docs_attrs docs attrs);
     pmb_loc = loc;
    }
end

module Opn = struct
  let mk ?(loc = !default_loc) ?(attrs = []) ?(docs = empty_docs)
        ?(override = Fresh) lid =
    {
     popen_lid = lid;
     popen_override = override;
     popen_loc = loc;
     popen_attributes = add_docs_attrs docs attrs;
    }
end

module Incl = struct
  let mk ?(loc = !default_loc) ?(attrs = []) ?(docs = empty_docs) mexpr =
    {
     pincl_mod = mexpr;
     pincl_loc = loc;
     pincl_attributes = add_docs_attrs docs attrs;
    }

end

module Vb = struct
  let mk ?(loc = !default_loc) ?(attrs = []) ?(docs = empty_docs)
        ?(text = []) pat expr =
    {
     pvb_pat = pat;
     pvb_expr = expr;
     pvb_attributes =
       add_text_attrs text (add_docs_attrs docs attrs);
     pvb_loc = loc;
    }
end

module Ci = struct
  let mk ?(loc = !default_loc) ?(attrs = [])
        ?(docs = empty_docs) ?(text = [])
        ?(virt = Concrete) ?(params = []) name expr =
    {
     pci_virt = virt;
     pci_params = params;
     pci_name = name;
     pci_expr = expr;
     pci_attributes =
       add_text_attrs text (add_docs_attrs docs attrs);
     pci_loc = loc;
    }
end

module Type = struct
  let mk ?(loc = !default_loc) ?(attrs = [])
        ?(docs = empty_docs) ?(text = [])
      ?(params = [])
      ?(cstrs = [])
      ?(kind = Ptype_abstract)
      ?(priv = Public)
      ?manifest
      name =
    {
     ptype_name = name;
     ptype_params = params;
     ptype_cstrs = cstrs;
     ptype_kind = kind;
     ptype_private = priv;
     ptype_manifest = manifest;
     ptype_attributes =
       add_text_attrs text (add_docs_attrs docs attrs);
     ptype_loc = loc;
    }

  let constructor ?(loc = !default_loc) ?(attrs = []) ?(info = empty_info)
        ?(args = Pcstr_tuple []) ?res name =
    {
     pcd_name = name;
     pcd_args = args;
     pcd_res = res;
     pcd_loc = loc;
     pcd_attributes = add_info_attrs info attrs;
    }

  let field ?(loc = !default_loc) ?(attrs = []) ?(info = empty_info)
        ?(mut = Immutable) name typ =
    {
     pld_name = name;
     pld_mutable = mut;
     pld_type = typ;
     pld_loc = loc;
     pld_attributes = add_info_attrs info attrs;
    }

end

(** Type extensions *)
module Te = struct
  let mk ?(attrs = []) ?(docs = empty_docs)
        ?(params = []) ?(priv = Public) path constructors =
    {
     ptyext_path = path;
     ptyext_params = params;
     ptyext_constructors = constructors;
     ptyext_private = priv;
     ptyext_attributes = add_docs_attrs docs attrs;
    }

  let constructor ?(loc = !default_loc) ?(attrs = [])
        ?(docs = empty_docs) ?(info = empty_info) name kind =
    {
     pext_name = name;
     pext_kind = kind;
     pext_loc = loc;
     pext_attributes = add_docs_attrs docs (add_info_attrs info attrs);
    }

  let decl ?(loc = !default_loc) ?(attrs = []) ?(docs = empty_docs)
             ?(info = empty_info) ?(args = Pcstr_tuple []) ?res name =
    {
     pext_name = name;
     pext_kind = Pext_decl(args, res);
     pext_loc = loc;
     pext_attributes = add_docs_attrs docs (add_info_attrs info attrs);
    }

  let rebind ?(loc = !default_loc) ?(attrs = [])
        ?(docs = empty_docs) ?(info = empty_info) name lid =
    {
     pext_name = name;
     pext_kind = Pext_rebind lid;
     pext_loc = loc;
     pext_attributes = add_docs_attrs docs (add_info_attrs info attrs);
    }

end

module Csig = struct
  let mk self fields =
    {
     pcsig_self = self;
     pcsig_fields = fields;
    }
end

module Cstr = struct
  let mk self fields =
    {
     pcstr_self = self;
     pcstr_fields = fields;
    }
end

end
module Parser : sig 
#1 "parser.mli"
type token =
  | AMPERAMPER
  | AMPERSAND
  | AND
  | AS
  | ASSERT
  | BACKQUOTE
  | BANG
  | BAR
  | BARBAR
  | BARRBRACKET
  | BEGIN
  | CHAR of (char)
  | CLASS
  | COLON
  | COLONCOLON
  | COLONEQUAL
  | COLONGREATER
  | COMMA
  | CONSTRAINT
  | DO
  | DONE
  | DOT
  | DOTDOT
  | DOWNTO
  | ELSE
  | END
  | EOF
  | EQUAL
  | EXCEPTION
  | EXTERNAL
  | FALSE
  | FLOAT of (string * char option)
  | FOR
  | FUN
  | FUNCTION
  | FUNCTOR
  | GREATER
  | GREATERRBRACE
  | GREATERRBRACKET
  | IF
  | IN
  | INCLUDE
  | INFIXOP0 of (string)
  | INFIXOP1 of (string)
  | INFIXOP2 of (string)
  | INFIXOP3 of (string)
  | INFIXOP4 of (string)
  | DOTOP of (string)
  | INHERIT
  | INITIALIZER
  | INT of (string * char option)
  | LABEL of (string)
  | LAZY
  | LBRACE
  | LBRACELESS
  | LBRACKET
  | LBRACKETBAR
  | LBRACKETLESS
  | LBRACKETGREATER
  | LBRACKETPERCENT
  | LBRACKETPERCENTPERCENT
  | LESS
  | LESSMINUS
  | LET
  | LIDENT of (string)
  | LPAREN
  | LBRACKETAT
  | LBRACKETATAT
  | LBRACKETATATAT
  | MATCH
  | METHOD
  | MINUS
  | MINUSDOT
  | MINUSGREATER
  | MODULE
  | MUTABLE
  | NEW
  | NONREC
  | OBJECT
  | OF
  | OPEN
  | OPTLABEL of (string)
  | OR
  | PERCENT
  | PLUS
  | PLUSDOT
  | PLUSEQ
  | PREFIXOP of (string)
  | PRIVATE
  | QUESTION
  | QUOTE
  | RBRACE
  | RBRACKET
  | REC
  | RPAREN
  | SEMI
  | SEMISEMI
  | HASH
  | HASHOP of (string)
  | SIG
  | STAR
  | STRING of (string * string option)
  | STRUCT
  | THEN
  | TILDE
  | TO
  | TRUE
  | TRY
  | TYPE
  | UIDENT of (string)
  | UNDERSCORE
  | VAL
  | VIRTUAL
  | WHEN
  | WHILE
  | WITH
  | COMMENT of (string * Location.t)
  | DOCSTRING of (Docstrings.docstring)
  | EOL

val implementation :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Parsetree.structure
val interface :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Parsetree.signature
val toplevel_phrase :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Parsetree.toplevel_phrase
val use_file :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Parsetree.toplevel_phrase list
val parse_core_type :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Parsetree.core_type
val parse_expression :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Parsetree.expression
val parse_pattern :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Parsetree.pattern

end = struct
#1 "parser.ml"
type token =
  | AMPERAMPER
  | AMPERSAND
  | AND
  | AS
  | ASSERT
  | BACKQUOTE
  | BANG
  | BAR
  | BARBAR
  | BARRBRACKET
  | BEGIN
  | CHAR of (char)
  | CLASS
  | COLON
  | COLONCOLON
  | COLONEQUAL
  | COLONGREATER
  | COMMA
  | CONSTRAINT
  | DO
  | DONE
  | DOT
  | DOTDOT
  | DOWNTO
  | ELSE
  | END
  | EOF
  | EQUAL
  | EXCEPTION
  | EXTERNAL
  | FALSE
  | FLOAT of (string * char option)
  | FOR
  | FUN
  | FUNCTION
  | FUNCTOR
  | GREATER
  | GREATERRBRACE
  | GREATERRBRACKET
  | IF
  | IN
  | INCLUDE
  | INFIXOP0 of (string)
  | INFIXOP1 of (string)
  | INFIXOP2 of (string)
  | INFIXOP3 of (string)
  | INFIXOP4 of (string)
  | DOTOP of (string)
  | INHERIT
  | INITIALIZER
  | INT of (string * char option)
  | LABEL of (string)
  | LAZY
  | LBRACE
  | LBRACELESS
  | LBRACKET
  | LBRACKETBAR
  | LBRACKETLESS
  | LBRACKETGREATER
  | LBRACKETPERCENT
  | LBRACKETPERCENTPERCENT
  | LESS
  | LESSMINUS
  | LET
  | LIDENT of (string)
  | LPAREN
  | LBRACKETAT
  | LBRACKETATAT
  | LBRACKETATATAT
  | MATCH
  | METHOD
  | MINUS
  | MINUSDOT
  | MINUSGREATER
  | MODULE
  | MUTABLE
  | NEW
  | NONREC
  | OBJECT
  | OF
  | OPEN
  | OPTLABEL of (string)
  | OR
  | PERCENT
  | PLUS
  | PLUSDOT
  | PLUSEQ
  | PREFIXOP of (string)
  | PRIVATE
  | QUESTION
  | QUOTE
  | RBRACE
  | RBRACKET
  | REC
  | RPAREN
  | SEMI
  | SEMISEMI
  | HASH
  | HASHOP of (string)
  | SIG
  | STAR
  | STRING of (string * string option)
  | STRUCT
  | THEN
  | TILDE
  | TO
  | TRUE
  | TRY
  | TYPE
  | UIDENT of (string)
  | UNDERSCORE
  | VAL
  | VIRTUAL
  | WHEN
  | WHILE
  | WITH
  | COMMENT of (string * Location.t)
  | DOCSTRING of (Docstrings.docstring)
  | EOL

open Parsing;;
let _ = parse_error;;
# 19 "ml/parser.mly"
open Location
open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings

let mktyp d = Typ.mk ~loc:(symbol_rloc()) d
let mkpat d = Pat.mk ~loc:(symbol_rloc()) d
let mkexp d = Exp.mk ~loc:(symbol_rloc()) d
let mkmty ?attrs d = Mty.mk ~loc:(symbol_rloc()) ?attrs d
let mksig d = Sig.mk ~loc:(symbol_rloc()) d
let mkmod ?attrs d = Mod.mk ~loc:(symbol_rloc()) ?attrs d
let mkstr d = Str.mk ~loc:(symbol_rloc()) d
let mkcty ?attrs d = Cty.mk ~loc:(symbol_rloc()) ?attrs d
let mkctf ?attrs ?docs d =
  Ctf.mk ~loc:(symbol_rloc()) ?attrs ?docs d
let mkcf ?attrs ?docs d =
  Cf.mk ~loc:(symbol_rloc()) ?attrs ?docs d

let mkrhs rhs pos = mkloc rhs (rhs_loc pos)

let reloc_pat x = { x with ppat_loc = symbol_rloc () };;
let reloc_exp x = { x with pexp_loc = symbol_rloc () };;

let mkoperator name pos =
  let loc = rhs_loc pos in
  Exp.mk ~loc (Pexp_ident(mkloc (Lident name) loc))

let mkpatvar name pos =
  Pat.mk ~loc:(rhs_loc pos) (Ppat_var (mkrhs name pos))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp d = Exp.mk ~loc:(symbol_gloc ()) d
let ghpat d = Pat.mk ~loc:(symbol_gloc ()) d
let ghtyp d = Typ.mk ~loc:(symbol_gloc ()) d
let ghloc d = { txt = d; loc = symbol_gloc () }
let ghstr d = Str.mk ~loc:(symbol_gloc()) d
let ghsig d = Sig.mk ~loc:(symbol_gloc()) d

let mkinfix arg1 name arg2 =
  mkexp(Pexp_apply(mkoperator name 2, [Nolabel, arg1; Nolabel, arg2]))

let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      mkexp(Pexp_constant(Pconst_integer(neg_string n,m)))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      mkexp(Pexp_constant(Pconst_float(neg_string f, m)))
  | _ ->
      mkexp(Pexp_apply(mkoperator ("~" ^ name) 1, [Nolabel, arg]))

let mkuplus name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> mkexp desc
  | _ ->
      mkexp(Pexp_apply(mkoperator ("~" ^ name) 1, [Nolabel, arg]))

let mkexp_cons consloc args loc =
  Exp.mk ~loc (Pexp_construct(mkloc (Lident "::") consloc, Some args))

let mkpat_cons consloc args loc =
  Pat.mk ~loc (Ppat_construct(mkloc (Lident "::") consloc, Some args))

let rec mktailexp nilloc = function
    [] ->
      let loc = { nilloc with loc_ghost = true } in
      let nil = { txt = Lident "[]"; loc = loc } in
      Exp.mk ~loc (Pexp_construct (nil, None))
  | e1 :: el ->
      let exp_el = mktailexp nilloc el in
      let loc = {loc_start = e1.pexp_loc.loc_start;
               loc_end = exp_el.pexp_loc.loc_end;
               loc_ghost = true}
      in
      let arg = Exp.mk ~loc (Pexp_tuple [e1; exp_el]) in
      mkexp_cons {loc with loc_ghost = true} arg loc

let rec mktailpat nilloc = function
    [] ->
      let loc = { nilloc with loc_ghost = true } in
      let nil = { txt = Lident "[]"; loc = loc } in
      Pat.mk ~loc (Ppat_construct (nil, None))
  | p1 :: pl ->
      let pat_pl = mktailpat nilloc pl in
      let loc = {loc_start = p1.ppat_loc.loc_start;
               loc_end = pat_pl.ppat_loc.loc_end;
               loc_ghost = true}
      in
      let arg = Pat.mk ~loc (Ppat_tuple [p1; pat_pl]) in
      mkpat_cons {loc with loc_ghost = true} arg loc

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }

let mkexp_constraint e (t1, t2) =
  match t1, t2 with
  | Some t, None -> ghexp(Pexp_constraint(e, t))
  | _, Some t -> ghexp(Pexp_coerce(e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint e constraint_

let mkpat_opt_constraint p = function
  | None -> p
  | Some typ -> mkpat (Ppat_constraint(p, typ))

let array_function str name =
  ghloc (Ldot(Lident str, (if !Clflags.fast then "unsafe_" ^ name else name)))

let syntax_error () =
  raise Syntaxerr.Escape_error

let unclosed opening_name opening_num closing_name closing_num =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(rhs_loc opening_num, opening_name,
                                           rhs_loc closing_num, closing_name)))

let expecting pos nonterm =
    raise Syntaxerr.(Error(Expecting(rhs_loc pos, nonterm)))

let not_expecting pos nonterm =
    raise Syntaxerr.(Error(Not_expecting(rhs_loc pos, nonterm)))


let lapply p1 p2 =
  if !Clflags.applicative_functors
  then Lapply(p1, p2)
  else raise (Syntaxerr.Error(Syntaxerr.Applicative_path (symbol_rloc())))

let exp_of_label lbl pos =
  mkexp (Pexp_ident(mkrhs (Lident(Longident.last lbl)) pos))

let pat_of_label lbl pos =
  mkpat (Ppat_var (mkrhs (Longident.last lbl) pos))

let mk_newtypes newtypes exp =
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation newtypes core_type body =
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs body (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs d attrs =
  wrap_exp_attrs (mkexp d) attrs

let wrap_typ_attrs typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp(Ptyp_extension (id, PTyp typ))

let mktyp_attrs d attrs =
  wrap_typ_attrs (mktyp d) attrs

let wrap_pat_attrs pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat(Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs d attrs =
  wrap_pat_attrs (mkpat d) attrs

let wrap_class_type_attrs body attrs =
  {body with pcty_attributes = attrs @ body.pcty_attributes}
let wrap_mod_attrs body attrs =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs body attrs =
  {body with pmty_attributes = attrs @ body.pmty_attributes}

let wrap_str_ext body ext =
  match ext with
  | None -> body
  | Some id -> ghstr(Pstr_extension ((id, PStr [body]), []))

let mkstr_ext d ext =
  wrap_str_ext (mkstr d) ext

let wrap_sig_ext body ext =
  match ext with
  | None -> body
  | Some id -> ghsig(Psig_extension ((id, PSig [body]), []))

let mksig_ext d ext =
  wrap_sig_ext (mksig d) ext

let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos = [Ptop_def (Str.text (rhs_text pos))]

let extra_text text pos items =
  let pre_extras = rhs_pre_extra_text pos in
  let post_extras = rhs_post_extra_text pos in
    text pre_extras @ items @ text post_extras

let extra_str pos items = extra_text Str.text pos items
let extra_sig pos items = extra_text Sig.text pos items
let extra_cstr pos items = extra_text Cf.text pos items
let extra_csig pos items = extra_text Ctf.text pos items
let extra_def pos items =
  extra_text (fun txt -> [Ptop_def (Str.text txt)]) pos items

let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }

type let_binding =
  { lb_pattern: pattern;
    lb_expression: expression;
    lb_attributes: attributes;
    lb_docs: docs Lazy.t;
    lb_text: text Lazy.t;
    lb_loc: Location.t; }

type let_bindings =
  { lbs_bindings: let_binding list;
    lbs_rec: rec_flag;
    lbs_extension: string Asttypes.loc option;
    lbs_loc: Location.t }

let mklb first (p, e) attrs =
  { lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy ();
    lb_text = if first then empty_text_lazy
              else symbol_text_lazy ();
    lb_loc = symbol_rloc (); }

let mklbs ext rf lb =
  { lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = symbol_rloc (); }

let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let val_of_let_bindings lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr(Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr (Pstr_extension((id, PStr [str]), []))

let expr_of_let_bindings lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])



(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        assert (ptyp.ptype_kind = Ptype_abstract);
        assert (ptyp.ptype_attributes = []);
        let ty =
          match ptyp.ptype_manifest with
          | Some ty -> ty
          | None -> assert false
        in
        (lid, ty)
    | _ ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported"
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [])
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, List.map map_cstr cstrs)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"


# 468 "ml/parser.ml"
let yytransl_const = [|
  257 (* AMPERAMPER *);
  258 (* AMPERSAND *);
  259 (* AND *);
  260 (* AS *);
  261 (* ASSERT *);
  262 (* BACKQUOTE *);
  263 (* BANG *);
  264 (* BAR *);
  265 (* BARBAR *);
  266 (* BARRBRACKET *);
  267 (* BEGIN *);
  269 (* CLASS *);
  270 (* COLON *);
  271 (* COLONCOLON *);
  272 (* COLONEQUAL *);
  273 (* COLONGREATER *);
  274 (* COMMA *);
  275 (* CONSTRAINT *);
  276 (* DO *);
  277 (* DONE *);
  278 (* DOT *);
  279 (* DOTDOT *);
  280 (* DOWNTO *);
  281 (* ELSE *);
  282 (* END *);
    0 (* EOF *);
  283 (* EQUAL *);
  284 (* EXCEPTION *);
  285 (* EXTERNAL *);
  286 (* FALSE *);
  288 (* FOR *);
  289 (* FUN *);
  290 (* FUNCTION *);
  291 (* FUNCTOR *);
  292 (* GREATER *);
  293 (* GREATERRBRACE *);
  294 (* GREATERRBRACKET *);
  295 (* IF *);
  296 (* IN *);
  297 (* INCLUDE *);
  304 (* INHERIT *);
  305 (* INITIALIZER *);
  308 (* LAZY *);
  309 (* LBRACE *);
  310 (* LBRACELESS *);
  311 (* LBRACKET *);
  312 (* LBRACKETBAR *);
  313 (* LBRACKETLESS *);
  314 (* LBRACKETGREATER *);
  315 (* LBRACKETPERCENT *);
  316 (* LBRACKETPERCENTPERCENT *);
  317 (* LESS *);
  318 (* LESSMINUS *);
  319 (* LET *);
  321 (* LPAREN *);
  322 (* LBRACKETAT *);
  323 (* LBRACKETATAT *);
  324 (* LBRACKETATATAT *);
  325 (* MATCH *);
  326 (* METHOD *);
  327 (* MINUS *);
  328 (* MINUSDOT *);
  329 (* MINUSGREATER *);
  330 (* MODULE *);
  331 (* MUTABLE *);
  332 (* NEW *);
  333 (* NONREC *);
  334 (* OBJECT *);
  335 (* OF *);
  336 (* OPEN *);
  338 (* OR *);
  339 (* PERCENT *);
  340 (* PLUS *);
  341 (* PLUSDOT *);
  342 (* PLUSEQ *);
  344 (* PRIVATE *);
  345 (* QUESTION *);
  346 (* QUOTE *);
  347 (* RBRACE *);
  348 (* RBRACKET *);
  349 (* REC *);
  350 (* RPAREN *);
  351 (* SEMI *);
  352 (* SEMISEMI *);
  353 (* HASH *);
  355 (* SIG *);
  356 (* STAR *);
  358 (* STRUCT *);
  359 (* THEN *);
  360 (* TILDE *);
  361 (* TO *);
  362 (* TRUE *);
  363 (* TRY *);
  364 (* TYPE *);
  366 (* UNDERSCORE *);
  367 (* VAL *);
  368 (* VIRTUAL *);
  369 (* WHEN *);
  370 (* WHILE *);
  371 (* WITH *);
  374 (* EOL *);
    0|]

let yytransl_block = [|
  268 (* CHAR *);
  287 (* FLOAT *);
  298 (* INFIXOP0 *);
  299 (* INFIXOP1 *);
  300 (* INFIXOP2 *);
  301 (* INFIXOP3 *);
  302 (* INFIXOP4 *);
  303 (* DOTOP *);
  306 (* INT *);
  307 (* LABEL *);
  320 (* LIDENT *);
  337 (* OPTLABEL *);
  343 (* PREFIXOP *);
  354 (* HASHOP *);
  357 (* STRING *);
  365 (* UIDENT *);
  372 (* COMMENT *);
  373 (* DOCSTRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\010\000\010\000\014\000\
\014\000\004\000\016\000\016\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\005\000\006\000\007\000\020\000\020\000\
\021\000\021\000\023\000\023\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\008\000\008\000\032\000\032\000\032\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\044\000\048\000\048\000\048\000\039\000\
\040\000\040\000\049\000\050\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\009\000\
\009\000\009\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\042\000\059\000\062\000\062\000\062\000\056\000\057\000\
\058\000\058\000\063\000\064\000\065\000\065\000\041\000\067\000\
\067\000\069\000\070\000\070\000\070\000\071\000\071\000\072\000\
\072\000\072\000\072\000\072\000\072\000\073\000\073\000\073\000\
\073\000\074\000\074\000\074\000\074\000\074\000\083\000\083\000\
\083\000\083\000\083\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\088\000\089\000\089\000\090\000\090\000\091\000\
\091\000\091\000\091\000\091\000\091\000\092\000\092\000\092\000\
\095\000\075\000\060\000\060\000\096\000\097\000\043\000\043\000\
\098\000\099\000\012\000\012\000\012\000\012\000\101\000\101\000\
\101\000\101\000\101\000\101\000\101\000\101\000\106\000\106\000\
\103\000\103\000\102\000\102\000\104\000\105\000\105\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\109\000\
\109\000\127\000\127\000\128\000\128\000\128\000\128\000\129\000\
\082\000\082\000\130\000\130\000\130\000\130\000\130\000\130\000\
\033\000\033\000\135\000\136\000\138\000\138\000\081\000\081\000\
\081\000\112\000\112\000\139\000\139\000\139\000\113\000\113\000\
\113\000\113\000\114\000\114\000\123\000\123\000\141\000\141\000\
\141\000\142\000\142\000\126\000\126\000\144\000\144\000\124\000\
\124\000\078\000\078\000\078\000\078\000\078\000\143\000\143\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\133\000\133\000\133\000\133\000\133\000\133\000\
\133\000\133\000\133\000\146\000\146\000\146\000\146\000\107\000\
\107\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
\134\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
\134\000\134\000\134\000\134\000\134\000\134\000\134\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\145\000\145\000\
\145\000\147\000\147\000\147\000\152\000\152\000\151\000\151\000\
\151\000\151\000\153\000\153\000\154\000\154\000\035\000\155\000\
\155\000\034\000\036\000\036\000\156\000\157\000\161\000\161\000\
\160\000\160\000\160\000\160\000\160\000\160\000\160\000\160\000\
\160\000\160\000\160\000\159\000\159\000\159\000\164\000\165\000\
\165\000\167\000\167\000\168\000\166\000\166\000\166\000\169\000\
\068\000\068\000\162\000\162\000\162\000\170\000\171\000\038\000\
\038\000\055\000\110\000\173\000\173\000\173\000\173\000\174\000\
\174\000\163\000\163\000\163\000\176\000\177\000\037\000\054\000\
\179\000\179\000\179\000\179\000\179\000\179\000\180\000\180\000\
\180\000\181\000\182\000\183\000\184\000\052\000\052\000\185\000\
\185\000\185\000\185\000\186\000\186\000\132\000\132\000\079\000\
\079\000\178\000\178\000\018\000\018\000\187\000\187\000\189\000\
\189\000\189\000\189\000\189\000\140\000\140\000\190\000\190\000\
\190\000\190\000\190\000\190\000\190\000\190\000\190\000\190\000\
\190\000\190\000\190\000\190\000\190\000\190\000\190\000\190\000\
\190\000\031\000\194\000\194\000\195\000\195\000\193\000\193\000\
\197\000\197\000\198\000\198\000\196\000\196\000\085\000\085\000\
\086\000\086\000\175\000\175\000\191\000\191\000\191\000\191\000\
\191\000\191\000\191\000\201\000\199\000\200\000\076\000\122\000\
\122\000\122\000\122\000\148\000\148\000\148\000\148\000\148\000\
\066\000\066\000\131\000\131\000\131\000\131\000\131\000\202\000\
\202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\
\202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\
\202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\
\202\000\202\000\202\000\202\000\172\000\172\000\172\000\172\000\
\172\000\172\000\121\000\121\000\115\000\115\000\115\000\115\000\
\115\000\115\000\115\000\120\000\120\000\149\000\149\000\025\000\
\025\000\188\000\188\000\188\000\051\000\051\000\087\000\087\000\
\192\000\192\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\116\000\137\000\137\000\158\000\158\000\117\000\117\000\
\080\000\080\000\077\000\077\000\094\000\094\000\093\000\093\000\
\093\000\093\000\093\000\061\000\061\000\111\000\111\000\125\000\
\125\000\118\000\118\000\119\000\119\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\100\000\100\000\028\000\205\000\046\000\013\000\013\000\026\000\
\026\000\047\000\047\000\047\000\029\000\045\000\204\000\204\000\
\204\000\204\000\204\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\002\000\001\000\002\000\001\000\000\000\
\002\000\001\000\001\000\003\000\001\000\002\000\004\000\003\000\
\003\000\002\000\002\000\002\000\002\000\002\000\002\000\005\000\
\001\000\001\000\002\000\001\000\001\000\004\000\004\000\005\000\
\002\000\003\000\001\000\002\000\001\000\005\000\005\000\003\000\
\003\000\005\000\007\000\009\000\007\000\006\000\006\000\005\000\
\003\000\001\000\000\000\002\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\004\000\002\000\004\000\002\000\005\000\
\001\000\002\000\006\000\005\000\001\000\004\000\004\000\005\000\
\003\000\003\000\005\000\003\000\003\000\001\000\002\000\000\000\
\002\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\001\000\005\000\004\000\002\000\006\000\003\000\005\000\006\000\
\001\000\002\000\007\000\006\000\000\000\002\000\006\000\000\000\
\003\000\002\000\003\000\005\000\000\000\000\000\002\000\003\000\
\003\000\004\000\004\000\002\000\001\000\007\000\007\000\006\000\
\007\000\007\000\007\000\005\000\008\000\011\000\001\000\006\000\
\004\000\005\000\003\000\004\000\001\000\004\000\004\000\002\000\
\001\000\007\000\002\000\003\000\000\000\000\000\002\000\004\000\
\004\000\007\000\004\000\002\000\001\000\005\000\005\000\003\000\
\003\000\003\000\001\000\002\000\008\000\008\000\001\000\002\000\
\009\000\008\000\001\000\002\000\003\000\005\000\005\000\002\000\
\005\000\002\000\004\000\002\000\002\000\001\000\001\000\001\000\
\000\000\002\000\001\000\003\000\001\000\001\000\003\000\001\000\
\002\000\003\000\007\000\006\000\007\000\004\000\004\000\007\000\
\006\000\006\000\005\000\001\000\002\000\002\000\007\000\005\000\
\006\000\010\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\005\000\007\000\007\000\007\000\007\000\007\000\009\000\
\009\000\009\000\003\000\003\000\003\000\004\000\004\000\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\004\000\
\003\000\004\000\004\000\003\000\005\000\004\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\007\000\007\000\007\000\007\000\007\000\007\000\005\000\
\003\000\003\000\005\000\005\000\004\000\004\000\002\000\006\000\
\004\000\006\000\004\000\004\000\006\000\004\000\006\000\002\000\
\002\000\003\000\003\000\002\000\005\000\004\000\005\000\003\000\
\003\000\005\000\007\000\006\000\009\000\008\000\001\000\001\000\
\002\000\001\000\001\000\002\000\002\000\002\000\002\000\001\000\
\001\000\002\000\002\000\004\000\007\000\008\000\003\000\005\000\
\001\000\002\000\005\000\004\000\001\000\003\000\002\000\002\000\
\005\000\001\000\003\000\003\000\005\000\003\000\002\000\004\000\
\002\000\005\000\003\000\003\000\003\000\001\000\001\000\003\000\
\002\000\004\000\002\000\002\000\003\000\003\000\001\000\001\000\
\003\000\002\000\004\000\002\000\002\000\002\000\001\000\000\000\
\003\000\003\000\001\000\003\000\003\000\003\000\003\000\003\000\
\002\000\001\000\003\000\003\000\001\000\003\000\003\000\003\000\
\003\000\002\000\001\000\001\000\002\000\002\000\003\000\001\000\
\001\000\001\000\001\000\003\000\001\000\001\000\002\000\001\000\
\003\000\004\000\004\000\005\000\005\000\004\000\003\000\003\000\
\005\000\005\000\004\000\005\000\007\000\007\000\001\000\003\000\
\003\000\004\000\004\000\004\000\002\000\004\000\003\000\003\000\
\003\000\003\000\003\000\003\000\001\000\003\000\001\000\002\000\
\004\000\003\000\004\000\002\000\002\000\000\000\006\000\001\000\
\002\000\008\000\001\000\002\000\008\000\007\000\003\000\000\000\
\000\000\002\000\003\000\002\000\003\000\002\000\003\000\005\000\
\005\000\005\000\007\000\000\000\001\000\003\000\002\000\001\000\
\003\000\002\000\001\000\002\000\000\000\001\000\001\000\002\000\
\001\000\003\000\001\000\001\000\002\000\003\000\004\000\001\000\
\007\000\006\000\003\000\000\000\002\000\004\000\002\000\001\000\
\003\000\001\000\001\000\002\000\005\000\007\000\009\000\009\000\
\001\000\001\000\001\000\001\000\002\000\002\000\001\000\001\000\
\002\000\003\000\004\000\004\000\005\000\001\000\003\000\006\000\
\005\000\004\000\004\000\001\000\002\000\002\000\003\000\001\000\
\003\000\001\000\003\000\001\000\002\000\001\000\004\000\001\000\
\006\000\004\000\005\000\003\000\001\000\003\000\002\000\001\000\
\001\000\002\000\004\000\003\000\002\000\002\000\003\000\005\000\
\003\000\004\000\005\000\004\000\002\000\004\000\006\000\005\000\
\001\000\001\000\001\000\003\000\001\000\001\000\005\000\002\000\
\001\000\000\000\001\000\003\000\001\000\002\000\001\000\003\000\
\001\000\003\000\001\000\003\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\004\000\006\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\001\000\001\000\001\000\003\000\003\000\002\000\003\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\004\000\003\000\
\004\000\003\000\004\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\001\000\001\000\001\000\003\000\001\000\005\000\002\000\002\000\
\003\000\001\000\001\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\004\000\001\000\003\000\001\000\003\000\
\001\000\003\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\000\000\001\000\000\000\001\000\001\000\001\000\
\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\
\001\000\002\000\002\000\000\000\001\000\000\000\001\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\004\000\004\000\004\000\000\000\002\000\000\000\
\002\000\000\000\002\000\003\000\004\000\004\000\001\000\002\000\
\002\000\002\000\004\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\002\000\000\000\000\000\000\
\138\002\083\002\000\000\000\000\000\000\000\000\000\000\080\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\186\002\187\002\000\000\000\000\
\000\000\188\002\189\002\000\000\000\000\082\002\139\002\000\000\
\000\000\144\002\001\001\000\000\000\000\004\003\000\000\000\000\
\000\000\000\000\063\001\000\000\050\000\000\000\055\000\056\000\
\000\000\058\000\059\000\060\000\000\000\062\000\063\000\000\000\
\065\000\000\000\067\000\073\000\232\001\000\000\175\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\001\003\001\131\002\
\081\001\195\001\000\000\000\000\000\000\000\000\000\000\000\000\
\005\003\000\000\092\000\091\000\000\000\099\000\100\000\000\000\
\000\000\105\000\000\000\094\000\095\000\096\000\097\000\000\000\
\101\000\000\000\113\000\171\000\005\000\000\000\006\003\000\000\
\000\000\000\000\007\000\000\000\013\000\000\000\007\003\000\000\
\000\000\000\000\010\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\146\002\032\002\
\008\003\000\000\049\002\024\002\000\000\033\002\020\002\000\000\
\000\000\000\000\009\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\091\002\000\000\000\000\000\000\000\000\146\001\
\010\003\000\000\000\000\167\001\140\001\000\000\000\000\084\002\
\144\001\145\001\000\000\130\001\000\000\152\001\000\000\000\000\
\000\000\000\000\090\002\089\002\162\002\049\001\004\001\005\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\102\001\
\000\000\052\001\079\002\000\000\000\000\000\000\135\002\000\000\
\000\000\039\001\000\000\192\002\193\002\194\002\195\002\196\002\
\197\002\198\002\199\002\200\002\201\002\202\002\203\002\204\002\
\205\002\206\002\207\002\208\002\209\002\210\002\211\002\212\002\
\213\002\214\002\215\002\216\002\190\002\217\002\218\002\219\002\
\220\002\221\002\222\002\223\002\224\002\225\002\226\002\227\002\
\228\002\229\002\230\002\231\002\232\002\233\002\234\002\235\002\
\191\002\236\002\237\002\238\002\239\002\240\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\094\002\121\002\120\002\
\000\000\119\002\000\000\122\002\115\002\117\002\097\002\098\002\
\099\002\100\002\101\002\000\000\116\002\000\000\000\000\000\000\
\118\002\124\002\000\000\000\000\123\002\000\000\136\002\108\002\
\114\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\181\002\000\000\048\001\052\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\
\000\000\000\000\082\001\000\000\196\001\000\000\074\000\000\000\
\176\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\001\067\001\000\000\
\000\000\000\000\240\000\241\000\000\000\000\000\000\000\000\000\
\089\000\000\000\002\000\104\000\090\000\000\000\114\000\000\000\
\172\000\000\000\003\000\004\000\006\000\009\000\014\000\000\000\
\000\000\000\000\019\000\000\000\018\000\000\000\142\002\000\000\
\054\002\000\000\000\000\183\002\000\000\045\002\000\000\075\002\
\037\002\000\000\000\000\000\000\000\000\000\000\000\000\072\002\
\000\000\000\000\000\000\000\000\000\000\000\000\031\002\153\002\
\000\000\038\002\020\000\021\002\000\000\000\000\000\000\000\000\
\000\000\000\000\034\002\021\000\000\000\000\000\140\002\000\000\
\000\000\000\000\000\000\000\000\000\000\173\001\000\000\109\002\
\000\000\113\002\000\000\000\000\111\002\096\002\000\000\086\002\
\085\002\088\002\087\002\151\001\000\000\000\000\000\000\000\000\
\022\000\129\001\000\000\141\001\142\001\000\000\000\000\000\000\
\000\000\251\002\000\000\000\000\000\000\000\000\009\001\000\000\
\000\000\129\002\000\000\000\000\130\002\125\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\190\000\149\001\150\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\037\000\000\000\000\000\000\000\000\000\
\000\000\119\001\000\000\034\001\033\001\000\000\000\000\051\001\
\050\001\000\000\108\001\000\000\000\000\000\000\000\000\000\000\
\255\002\000\000\000\000\000\000\000\000\000\000\000\000\164\002\
\000\000\137\002\000\000\000\000\000\000\095\002\000\000\007\001\
\006\001\000\000\093\002\092\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\126\000\000\000\000\000\166\002\000\000\
\000\000\000\000\000\000\049\000\247\002\000\000\000\000\000\000\
\000\000\000\000\145\002\132\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\000\000\000\000\000\202\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\001\070\001\056\001\000\000\
\069\001\065\001\000\000\174\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\086\000\077\000\149\002\000\000\
\000\000\000\000\000\000\000\000\000\000\160\002\157\002\156\002\
\161\002\000\000\158\002\017\000\000\000\016\000\012\000\053\002\
\000\000\051\002\000\000\056\002\041\002\000\000\000\000\000\000\
\000\000\078\002\036\002\069\002\070\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\002\000\000\143\002\147\002\
\000\000\000\000\000\000\039\002\128\001\143\001\000\000\000\000\
\000\000\169\001\168\001\000\000\000\000\000\000\000\000\000\000\
\160\001\000\000\159\001\122\001\121\001\127\001\000\000\125\001\
\000\000\177\001\000\000\000\000\000\000\153\001\000\000\148\001\
\000\000\252\002\249\002\000\000\000\000\000\000\012\001\000\000\
\000\000\000\000\010\001\008\001\000\000\126\002\000\000\127\002\
\000\000\000\000\000\000\000\000\112\002\000\000\110\002\000\000\
\000\000\189\000\000\000\191\000\000\000\192\000\186\000\197\000\
\000\000\184\000\000\000\188\000\000\000\000\000\000\000\000\000\
\207\000\000\000\000\000\090\001\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\033\000\036\000\000\000\000\000\101\001\
\117\001\000\000\118\001\000\000\000\000\104\001\000\000\109\001\
\000\000\044\001\043\001\038\001\037\001\000\003\000\000\000\000\
\253\002\242\002\254\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\139\001\000\000\000\000\000\000\000\000\
\000\000\011\001\245\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\255\000\254\000\000\000\000\000\
\000\000\000\000\223\001\222\001\000\000\213\001\000\000\000\000\
\000\000\000\000\000\000\054\001\000\000\046\001\000\000\041\001\
\000\000\000\000\000\000\014\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\107\000\087\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\042\002\057\002\000\000\000\000\000\000\046\002\044\002\
\000\000\000\000\000\000\018\002\000\000\000\000\000\000\000\000\
\000\000\035\002\000\000\000\000\154\002\000\000\000\000\148\002\
\023\002\141\002\000\000\000\000\000\000\186\001\000\000\171\001\
\170\001\174\001\172\001\000\000\163\001\000\000\154\001\158\001\
\155\001\000\000\243\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\128\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\237\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\095\001\097\001\000\000\000\000\000\000\000\000\028\000\000\000\
\000\000\041\000\000\000\040\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\001\000\000\000\000\
\000\000\000\000\075\001\000\000\000\000\000\000\000\000\000\000\
\000\000\138\001\000\000\000\000\107\002\105\002\103\002\000\000\
\058\001\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\025\000\026\000\000\000\071\000\072\000\000\000\123\000\000\000\
\000\000\000\000\000\000\000\000\133\000\127\000\106\000\211\000\
\000\000\216\001\000\000\000\000\000\000\000\000\219\001\215\001\
\000\000\000\000\244\002\036\001\035\001\055\001\053\001\000\000\
\000\000\134\002\000\000\015\001\013\001\182\000\084\001\000\000\
\000\000\000\000\032\001\019\001\000\000\017\001\000\000\000\000\
\000\000\000\000\000\000\025\001\000\000\021\001\000\000\023\001\
\000\000\000\000\000\000\225\001\000\000\000\000\085\000\084\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\002\000\000\
\150\002\000\000\000\000\000\000\000\000\000\000\111\000\000\000\
\000\000\000\000\052\002\059\002\000\000\043\002\061\002\000\000\
\000\000\000\000\000\000\000\000\000\000\048\002\040\002\000\000\
\068\002\000\000\185\002\185\001\000\000\164\001\162\001\161\001\
\157\001\156\001\018\001\016\001\000\000\000\000\000\000\024\001\
\020\001\022\001\000\000\172\002\000\000\000\000\242\001\000\000\
\000\000\000\000\000\000\234\001\000\000\168\002\167\002\000\000\
\074\001\000\000\000\000\000\000\000\000\000\000\000\000\187\000\
\000\000\000\000\094\001\092\001\000\000\091\001\000\000\000\000\
\027\000\000\000\000\000\031\000\030\000\000\000\003\003\204\000\
\235\001\000\000\000\000\000\000\000\000\087\001\000\000\000\000\
\000\000\085\001\088\001\132\001\131\001\137\001\000\000\135\001\
\000\000\180\001\000\000\079\001\000\000\000\000\060\001\000\000\
\000\000\000\000\119\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\000\
\214\001\000\000\200\001\000\000\218\001\191\001\217\000\047\001\
\045\001\042\001\040\001\000\000\200\001\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\121\000\000\000\220\001\000\000\000\000\000\000\079\000\078\000\
\000\000\000\000\000\000\000\000\112\000\110\000\000\000\000\000\
\000\000\000\000\000\000\055\002\047\002\062\002\019\002\015\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\241\001\244\001\238\001\000\000\233\001\000\000\000\000\000\000\
\208\000\000\000\194\000\185\000\183\000\000\000\096\001\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\042\000\039\000\
\038\000\203\000\205\000\000\000\000\000\000\000\076\001\000\000\
\000\000\059\001\000\000\000\000\124\000\000\000\000\000\000\000\
\000\000\129\000\000\000\128\000\217\001\000\000\206\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\227\001\228\001\
\000\000\000\000\170\002\000\000\000\000\000\000\000\000\000\000\
\000\000\031\001\000\000\027\001\000\000\029\001\000\000\000\000\
\000\000\000\000\226\001\224\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\149\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\002\115\000\000\000\
\000\000\116\000\000\000\060\002\077\002\166\001\165\001\030\001\
\026\001\028\001\000\000\151\002\153\000\000\000\000\000\000\000\
\193\001\194\001\000\000\098\001\093\001\046\000\000\000\047\000\
\000\000\000\000\000\000\000\000\086\001\080\001\024\000\000\000\
\130\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\207\001\000\000\000\000\000\000\000\000\229\001\000\000\
\000\000\197\001\000\000\000\000\000\000\249\001\250\001\251\001\
\252\001\062\001\000\000\198\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\173\000\
\152\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\255\001\000\002\000\000\177\000\
\000\000\000\000\000\000\000\000\043\000\045\000\000\000\000\000\
\089\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\230\001\000\000\199\001\000\000\000\000\
\000\000\247\001\253\001\254\001\061\001\178\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\158\000\000\000\
\000\000\147\000\000\000\009\002\013\002\200\001\109\000\000\000\
\248\001\001\002\174\000\152\002\000\000\218\000\000\000\000\000\
\077\001\000\000\000\000\000\000\140\000\000\000\000\000\000\000\
\000\000\231\001\210\001\000\000\000\000\208\001\000\000\000\000\
\000\000\000\000\002\002\148\000\000\000\000\000\000\000\151\000\
\150\000\000\000\145\000\000\000\000\000\000\000\044\000\078\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\136\000\000\000\000\000\000\000\000\000\003\002\004\002\000\000\
\146\000\156\000\000\000\000\000\000\000\000\000\000\000\165\000\
\159\000\000\000\246\001\138\000\139\000\000\000\000\000\000\000\
\000\000\000\000\137\000\211\001\005\002\000\000\000\000\000\000\
\000\000\000\000\164\000\144\000\000\000\141\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\163\000\160\000\178\002\179\002\000\000\000\000\
\000\000\000\000\161\000\000\000\000\000\000\000\000\000\000\000\
\142\000\000\000\000\000\000\000\162\000\000\000\000\000"

let yydgoto = "\008\000\
\054\000\097\000\119\000\127\000\145\000\155\000\169\000\025\002\
\098\000\120\000\128\000\056\000\067\001\123\000\057\000\131\000\
\132\000\171\001\207\001\042\003\227\003\118\003\184\003\248\002\
\058\000\226\001\003\002\096\001\059\000\060\000\119\003\061\000\
\157\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\021\001\043\003\
\076\000\103\001\126\002\038\004\107\000\108\000\077\000\110\000\
\111\000\112\000\113\000\114\000\058\001\099\003\115\000\135\001\
\220\003\127\002\085\003\026\004\051\002\052\002\047\003\238\003\
\157\004\155\004\255\004\078\000\085\004\129\004\237\005\013\005\
\130\004\169\003\044\005\045\005\148\000\172\001\047\005\182\005\
\183\005\226\005\001\006\033\006\029\006\117\002\166\005\116\000\
\137\001\079\000\105\001\015\001\240\002\172\003\101\004\173\003\
\171\003\231\002\173\000\080\000\117\001\020\003\157\001\243\002\
\241\002\081\000\082\000\083\000\096\004\084\000\085\000\206\000\
\086\000\087\000\207\000\217\000\019\002\213\000\118\001\119\001\
\110\002\024\003\088\000\238\005\026\003\178\000\089\000\099\001\
\033\002\131\004\244\002\149\000\208\000\209\000\011\002\214\000\
\179\000\180\000\029\003\181\000\150\000\182\000\194\001\197\001\
\195\001\177\002\223\004\090\000\101\001\056\002\053\003\163\004\
\018\005\014\005\086\004\054\003\243\003\055\003\248\003\028\004\
\187\004\015\005\016\005\017\005\220\002\158\003\159\003\087\004\
\088\004\115\003\109\005\140\005\110\005\111\005\112\005\113\005\
\039\004\136\005\151\000\152\000\153\000\154\000\165\001\178\001\
\144\002\145\002\146\002\056\004\108\003\053\004\166\001\167\001\
\168\001\051\001\016\001\026\002\068\001"

let yysindex = "\078\009\
\091\065\200\012\136\050\049\050\129\046\096\068\132\071\000\000\
\201\255\065\001\016\071\201\255\000\000\045\000\201\255\201\255\
\000\000\000\000\201\255\201\255\201\255\201\255\201\255\000\000\
\201\255\161\073\046\255\177\065\009\066\094\061\094\061\017\005\
\000\000\204\058\094\061\201\255\000\000\000\000\150\004\201\255\
\153\000\000\000\000\000\016\071\091\065\000\000\000\000\201\255\
\201\255\000\000\000\000\201\255\201\255\000\000\005\002\173\001\
\135\007\028\002\000\000\085\077\000\000\240\001\000\000\000\000\
\054\002\000\000\000\000\000\000\006\003\000\000\000\000\072\003\
\000\000\173\001\000\000\000\000\000\000\165\002\000\000\041\073\
\233\002\016\071\016\071\096\068\096\068\000\000\000\000\000\000\
\000\000\000\000\204\004\201\255\201\255\150\004\200\012\201\255\
\000\000\111\004\000\000\000\000\054\002\000\000\000\000\072\003\
\173\001\000\000\200\012\000\000\000\000\000\000\000\000\129\003\
\000\000\161\003\000\000\000\000\000\000\065\001\000\000\154\003\
\194\003\173\001\000\000\035\009\000\000\255\050\000\000\184\007\
\173\001\184\007\000\000\000\000\178\033\073\004\086\000\174\010\
\070\004\086\045\129\046\037\004\065\001\142\001\000\000\000\000\
\000\000\059\000\000\000\000\000\015\004\000\000\000\000\173\002\
\138\001\084\002\000\000\135\005\240\001\201\255\201\255\217\002\
\135\070\198\070\000\000\060\063\170\003\038\004\028\003\000\000\
\000\000\097\000\144\004\000\000\000\000\132\071\132\071\000\000\
\000\000\000\000\152\004\000\000\184\004\000\000\094\061\094\061\
\164\004\016\071\000\000\000\000\000\000\000\000\000\000\000\000\
\094\066\201\255\245\001\025\255\132\071\012\070\073\004\096\068\
\132\003\016\071\000\000\219\004\009\001\123\005\122\255\000\000\
\181\004\000\000\000\000\021\005\063\003\226\004\000\000\189\077\
\240\004\000\000\240\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\065\146\005\
\004\065\201\255\201\255\153\000\132\005\000\000\000\000\000\000\
\016\071\000\000\097\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\198\005\000\000\000\000\000\000\083\001\
\000\000\000\000\000\000\000\000\000\000\016\071\000\000\000\000\
\000\000\136\001\155\255\004\065\096\068\201\255\239\004\166\005\
\000\000\201\255\000\000\000\000\096\068\159\005\025\255\096\068\
\000\000\094\061\135\007\173\001\201\255\000\000\239\005\151\006\
\096\068\096\068\096\068\096\068\096\068\096\068\096\068\096\068\
\096\068\096\068\096\068\096\068\096\068\096\068\096\068\096\068\
\096\068\096\068\096\068\096\068\096\068\179\066\096\068\000\000\
\164\004\096\068\000\000\164\004\000\000\164\004\000\000\164\004\
\000\000\000\000\096\068\091\002\031\006\016\071\016\071\204\005\
\212\005\016\071\204\005\040\002\101\073\000\000\000\000\096\068\
\040\002\040\002\000\000\000\000\145\005\245\001\164\003\032\005\
\000\000\159\005\000\000\000\000\000\000\164\004\000\000\164\004\
\000\000\173\004\000\000\000\000\000\000\000\000\000\000\184\007\
\173\001\184\007\000\000\184\007\000\000\200\008\000\000\019\255\
\000\000\190\005\023\006\000\000\200\008\000\000\200\008\000\000\
\000\000\000\000\020\006\210\005\001\006\133\008\133\008\000\000\
\129\046\201\255\164\004\066\001\224\005\036\006\000\000\000\000\
\030\006\000\000\000\000\000\000\163\010\057\003\200\005\237\005\
\129\046\142\001\000\000\000\000\132\071\201\072\000\000\055\006\
\044\006\138\255\242\005\094\004\244\005\000\000\244\005\000\000\
\170\003\000\000\083\001\038\004\000\000\000\000\023\002\000\000\
\000\000\000\000\000\000\000\000\064\002\087\015\211\063\016\064\
\000\000\000\000\109\002\000\000\000\000\132\071\125\001\004\065\
\164\004\000\000\164\004\040\002\015\006\032\006\000\000\097\003\
\145\005\000\000\246\005\126\255\000\000\000\000\072\002\122\074\
\064\006\067\004\201\072\239\061\183\003\046\005\098\005\160\069\
\000\000\000\000\000\000\132\071\241\005\164\004\194\002\164\004\
\137\005\068\006\000\000\000\000\040\002\202\006\217\002\185\009\
\051\011\000\000\067\006\000\000\000\000\217\002\096\068\000\000\
\000\000\212\005\000\000\096\068\116\255\067\003\060\078\132\071\
\000\000\010\006\094\061\012\006\245\001\252\005\201\255\000\000\
\052\072\000\000\016\006\019\006\014\006\000\000\132\003\000\000\
\000\000\028\006\000\000\000\000\039\006\021\006\065\001\034\006\
\038\003\132\071\211\003\000\000\046\006\047\006\000\000\077\005\
\131\006\139\006\004\065\000\000\000\000\161\073\067\001\008\067\
\096\067\059\059\000\000\000\000\210\016\210\016\026\078\205\007\
\189\077\026\078\029\006\029\006\029\006\029\006\199\002\105\006\
\105\006\029\006\199\002\199\002\026\078\105\006\199\002\199\002\
\199\002\094\061\000\000\105\006\052\072\000\000\077\005\052\006\
\145\005\189\077\096\068\096\068\096\068\220\002\103\006\096\068\
\096\068\096\068\040\002\040\002\000\000\000\000\000\000\224\002\
\000\000\000\000\026\078\000\000\113\006\024\001\164\004\164\003\
\070\006\164\004\000\000\198\003\000\000\000\000\000\000\093\003\
\066\006\116\003\077\005\072\006\145\005\000\000\000\000\000\000\
\000\000\154\006\000\000\000\000\184\007\000\000\000\000\000\000\
\120\000\000\000\177\006\000\000\000\000\200\008\008\001\042\001\
\167\050\000\000\000\000\000\000\000\000\109\006\164\003\129\046\
\145\003\129\046\129\046\087\003\000\000\085\006\000\000\000\000\
\215\255\065\001\114\006\000\000\000\000\000\000\185\003\129\046\
\161\006\000\000\000\000\026\003\132\071\224\255\019\005\082\006\
\000\000\009\014\000\000\000\000\000\000\000\000\016\003\000\000\
\179\006\000\000\018\002\003\071\150\063\000\000\018\002\000\000\
\100\006\000\000\000\000\096\068\096\068\171\004\000\000\096\068\
\096\068\096\068\000\000\000\000\113\006\000\000\101\006\000\000\
\100\036\000\002\100\036\164\004\000\000\197\006\000\000\129\046\
\096\068\000\000\135\006\000\000\132\071\000\000\000\000\000\000\
\136\006\000\000\136\006\000\000\163\010\094\062\096\068\160\069\
\000\000\199\255\204\006\000\000\096\068\145\006\164\004\085\000\
\091\065\020\003\000\000\000\000\000\000\104\006\000\000\000\000\
\000\000\074\001\000\000\164\004\096\068\000\000\189\077\000\000\
\189\077\000\000\000\000\000\000\000\000\000\000\164\004\122\000\
\000\000\000\000\000\000\178\006\024\001\038\003\046\006\173\001\
\072\069\009\005\206\006\000\000\203\006\162\006\164\006\167\006\
\156\001\000\000\000\000\073\004\207\006\038\003\164\003\132\003\
\049\000\038\003\173\001\070\005\000\000\000\000\149\002\003\004\
\186\001\198\255\000\000\000\000\225\003\000\000\167\000\129\046\
\096\068\149\006\096\000\000\000\193\003\000\000\240\004\000\000\
\240\004\148\006\083\001\000\000\219\255\096\068\173\001\169\006\
\038\003\113\006\189\077\042\002\029\000\225\255\065\006\096\068\
\201\074\233\074\055\075\198\255\181\006\145\006\118\255\174\006\
\200\012\164\003\007\255\000\000\000\000\244\003\233\006\164\003\
\046\006\246\254\173\001\225\003\245\006\113\006\108\003\000\000\
\200\008\000\000\000\000\129\046\043\001\255\006\000\000\000\000\
\065\001\130\001\164\004\000\000\129\046\210\002\175\006\164\004\
\142\001\000\000\114\006\191\006\000\000\163\010\159\006\000\000\
\000\000\000\000\164\004\132\071\185\006\000\000\094\004\000\000\
\000\000\000\000\000\000\001\001\000\000\161\255\000\000\000\000\
\000\000\169\002\000\000\082\000\231\255\089\006\087\075\165\075\
\197\075\208\006\000\000\195\006\000\000\200\006\085\006\192\006\
\132\255\008\007\164\004\000\000\173\001\241\003\194\000\135\006\
\198\006\025\006\010\007\010\007\021\007\205\006\227\006\135\006\
\000\000\000\000\182\067\096\068\132\071\157\077\000\000\190\004\
\096\068\000\000\164\003\000\000\116\004\000\000\129\046\189\077\
\096\068\096\068\164\004\002\007\215\002\000\000\041\008\096\068\
\205\062\023\007\000\000\133\069\114\002\077\064\138\064\199\064\
\096\068\000\000\129\046\132\071\000\000\000\000\000\000\086\255\
\000\000\132\071\164\003\173\001\173\001\213\000\119\005\000\000\
\000\000\000\000\042\007\000\000\000\000\129\046\000\000\164\004\
\164\004\153\000\153\000\173\001\000\000\000\000\000\000\000\000\
\132\071\000\000\084\001\025\007\229\006\065\001\000\000\000\000\
\193\005\036\007\000\000\000\000\000\000\000\000\000\000\144\000\
\220\005\000\000\132\003\000\000\000\000\000\000\000\000\025\007\
\173\001\001\007\000\000\000\000\009\007\000\000\011\007\096\068\
\096\068\096\068\189\077\000\000\014\007\000\000\016\007\000\000\
\018\007\253\255\238\006\000\000\070\007\040\005\000\000\000\000\
\164\004\189\004\210\002\046\006\077\005\083\007\000\000\000\000\
\000\000\164\003\210\002\003\004\226\255\074\007\000\000\007\007\
\164\003\030\007\000\000\000\000\038\002\000\000\000\000\008\000\
\000\000\129\046\065\001\005\007\114\006\000\000\000\000\129\046\
\000\000\094\004\000\000\000\000\164\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\096\068\096\068\096\068\000\000\
\000\000\000\000\069\007\000\000\212\005\006\007\000\000\195\006\
\163\010\180\255\173\001\000\000\000\007\000\000\000\000\096\068\
\000\000\160\069\129\046\096\068\013\007\015\007\129\046\000\000\
\096\068\017\007\000\000\000\000\029\007\000\000\096\068\132\003\
\000\000\034\074\124\255\000\000\000\000\164\004\000\000\000\000\
\000\000\096\068\096\068\135\006\166\001\000\000\135\006\096\068\
\076\007\000\000\000\000\000\000\000\000\000\000\016\003\000\000\
\179\006\000\000\018\002\000\000\156\004\018\002\000\000\019\007\
\204\006\210\002\000\000\000\000\132\003\164\003\218\001\129\046\
\096\068\164\004\173\001\164\004\173\001\000\000\204\006\198\255\
\000\000\221\073\000\000\020\007\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\096\003\000\000\000\000\087\007\096\068\
\096\068\028\076\060\076\138\076\096\068\096\068\096\068\198\255\
\000\000\065\001\000\000\100\049\164\003\132\003\000\000\000\000\
\201\005\217\002\007\255\198\003\000\000\000\000\164\003\020\007\
\198\003\101\007\129\046\000\000\000\000\000\000\000\000\000\000\
\164\004\114\006\246\255\170\076\248\076\024\077\168\006\103\007\
\000\000\000\000\000\000\104\007\000\000\000\007\173\001\100\007\
\000\000\164\004\000\000\000\000\000\000\164\004\000\000\160\069\
\096\068\189\077\119\005\000\000\076\002\054\003\000\000\000\000\
\000\000\000\000\000\000\099\007\129\046\028\007\000\000\096\068\
\096\068\000\000\119\005\044\004\000\000\212\004\173\001\173\001\
\179\003\000\000\021\003\000\000\000\000\245\001\000\000\122\015\
\082\074\243\044\000\000\225\004\072\007\118\007\000\000\000\000\
\024\001\245\002\000\000\150\255\091\003\245\002\168\006\189\077\
\189\077\000\000\065\007\000\000\066\007\000\000\080\007\189\077\
\189\077\189\077\000\000\000\000\186\013\052\007\131\007\164\004\
\163\010\086\007\000\000\173\001\164\004\079\007\000\000\213\003\
\210\002\119\005\200\005\200\005\106\002\000\000\000\000\153\004\
\159\000\000\000\100\049\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\046\000\000\000\000\193\005\028\004\167\050\
\000\000\000\000\096\068\000\000\000\000\000\000\038\001\000\000\
\059\007\129\046\250\004\133\069\000\000\000\000\000\000\129\046\
\000\000\000\000\043\007\020\007\212\005\045\007\195\006\212\005\
\024\001\000\000\164\004\118\007\020\007\195\006\000\000\164\004\
\129\046\000\000\245\001\212\002\067\002\000\000\000\000\000\000\
\000\000\000\000\064\007\000\000\193\005\096\068\096\068\096\068\
\107\001\015\004\153\000\163\010\094\007\088\007\146\007\000\000\
\000\000\100\049\025\004\042\004\042\004\129\046\078\007\129\046\
\226\255\245\001\024\001\069\002\000\000\000\000\173\001\000\000\
\060\004\164\004\141\007\164\003\000\000\000\000\001\005\096\068\
\000\000\164\004\212\005\212\005\241\069\212\005\212\005\199\005\
\164\004\160\000\082\007\000\000\006\005\000\000\248\002\000\002\
\164\004\000\000\000\000\000\000\000\000\000\000\189\077\189\077\
\189\077\077\004\164\004\096\007\129\046\214\004\000\000\100\049\
\163\010\000\000\000\000\000\000\000\000\000\000\000\000\024\001\
\000\000\000\000\000\000\000\000\084\007\000\000\077\007\096\068\
\000\000\160\007\161\007\030\046\000\000\163\007\166\007\096\068\
\162\007\000\000\000\000\195\006\118\007\000\000\129\046\000\002\
\164\004\164\004\000\000\000\000\046\006\100\049\097\002\000\000\
\000\000\099\001\000\000\114\007\171\007\164\004\000\000\000\000\
\167\050\167\050\135\006\164\004\164\007\195\001\129\046\129\046\
\000\000\096\068\102\007\164\004\164\004\000\000\000\000\082\005\
\000\000\000\000\164\004\164\004\164\004\164\004\173\001\000\000\
\000\000\100\049\000\000\000\000\000\000\170\007\096\068\129\046\
\164\004\164\004\000\000\000\000\000\000\168\006\129\046\168\006\
\007\005\037\003\000\000\000\000\129\046\000\000\164\004\164\004\
\173\001\193\005\092\007\111\007\212\005\145\005\195\006\186\007\
\173\001\030\005\000\000\000\000\000\000\000\000\191\007\212\005\
\212\005\129\046\000\000\096\068\167\050\194\007\196\007\164\004\
\000\000\173\001\129\046\129\046\000\000\164\004\164\004"

let yyrindex = "\000\000\
\211\008\214\008\120\007\000\000\000\000\000\000\000\000\000\000\
\168\073\000\000\000\000\011\068\000\000\000\000\115\002\202\005\
\000\000\000\000\193\071\073\070\071\071\181\068\088\004\000\000\
\168\073\000\000\000\000\000\000\000\000\000\000\000\000\220\071\
\027\018\000\000\000\000\181\068\000\000\000\000\064\005\013\003\
\183\002\000\000\000\000\000\000\055\000\000\000\000\000\181\068\
\117\007\000\000\000\000\202\005\181\068\000\000\000\000\065\009\
\055\000\213\022\000\000\010\044\000\000\222\056\000\000\000\000\
\231\056\000\000\000\000\000\000\047\057\000\000\000\000\068\057\
\000\000\112\057\000\000\000\000\000\000\000\000\000\000\026\025\
\143\025\227\014\124\016\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\103\002\115\002\255\004\064\005\064\000\117\007\
\000\000\000\000\000\000\000\000\000\004\000\000\000\000\158\040\
\001\041\000\000\064\000\000\000\000\000\000\000\000\000\204\041\
\000\000\047\042\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\121\007\000\000\120\007\000\000\000\000\000\000\000\000\
\140\008\000\000\000\000\000\000\000\000\110\009\110\009\000\000\
\234\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\161\045\000\000\000\000\000\000\
\247\047\219\044\000\000\000\000\000\000\193\071\228\072\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\111\051\000\000\000\000\109\000\139\002\000\000\
\000\000\000\000\014\003\000\000\219\051\000\000\000\000\000\000\
\089\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\103\002\000\000\000\000\000\000\000\000\025\072\000\000\
\000\000\000\000\160\003\180\001\000\000\092\255\000\000\000\000\
\172\000\000\000\000\000\103\255\000\000\010\004\000\000\107\255\
\170\000\000\000\229\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\126\007\232\057\
\126\007\115\002\112\007\183\002\113\072\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\060\086\060\088\004\
\000\000\000\000\172\060\002\061\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\126\007\000\000\086\004\000\000\197\001\
\000\000\112\007\000\000\000\000\000\000\176\008\000\000\000\000\
\000\000\000\000\055\000\003\017\220\071\000\000\222\056\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\220\015\000\000\000\000\
\140\072\000\000\000\000\109\008\000\000\113\007\000\000\186\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\189\023\120\017\000\000\000\000\000\000\
\003\026\119\026\000\000\000\000\134\005\000\000\000\000\000\000\
\000\000\176\008\000\000\000\000\000\000\113\007\000\000\186\002\
\000\000\055\010\000\000\000\000\000\000\000\000\000\000\000\000\
\140\008\000\000\000\000\000\000\000\000\000\000\000\000\027\001\
\000\000\216\007\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\240\000\000\000\193\007\000\000\197\007\198\007\000\000\
\000\000\255\004\018\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\139\255\000\000\173\000\165\255\170\000\000\000\229\005\000\000\
\047\000\000\000\112\007\103\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\126\007\
\089\058\000\000\193\049\236\026\000\000\000\000\000\000\000\000\
\134\005\000\000\000\000\000\000\000\000\000\000\167\055\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\165\007\000\000\170\059\
\112\057\222\006\000\000\000\000\096\027\000\000\000\000\000\000\
\000\000\000\000\082\255\000\000\000\000\227\000\000\000\000\000\
\000\000\145\004\000\000\221\000\000\000\000\000\140\007\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\112\007\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212\003\
\000\000\000\000\126\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\111\036\220\036\068\037\189\033\
\082\039\172\037\049\034\165\034\026\035\142\035\003\031\212\027\
\073\028\002\036\119\031\235\031\020\038\189\028\096\032\212\032\
\072\033\000\000\000\000\049\029\000\000\000\000\222\003\000\000\
\134\005\181\039\000\000\000\000\000\000\000\000\184\018\000\000\
\000\000\000\000\050\024\166\024\000\000\000\000\000\000\073\023\
\000\000\000\000\124\038\000\000\173\007\038\007\165\007\000\000\
\000\000\050\012\047\008\001\041\000\000\000\000\000\000\000\000\
\000\000\000\000\212\003\000\000\134\005\000\000\000\000\000\000\
\000\000\240\011\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\052\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\045\000\000\000\000\000\000\000\000\006\046\000\000\000\000\
\000\000\000\000\105\046\000\000\000\000\000\000\000\000\000\000\
\153\255\000\000\000\000\251\000\221\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\244\001\000\000\
\204\003\000\000\045\004\000\000\000\000\000\000\120\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\173\007\000\000\000\000\000\000\
\000\000\000\000\000\000\225\055\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\166\029\000\000\000\000\000\000\010\069\000\000\
\004\005\000\000\000\000\000\000\000\000\000\000\042\006\000\000\
\000\000\073\255\000\000\111\000\000\000\000\000\206\255\000\000\
\232\255\000\000\000\000\000\000\000\000\000\000\143\007\149\007\
\000\000\000\000\000\000\000\000\173\003\000\000\000\000\209\012\
\035\005\000\000\172\005\000\000\192\005\114\000\135\000\148\000\
\000\000\000\000\000\000\025\072\026\056\000\000\000\000\000\000\
\000\000\000\000\112\057\000\000\000\000\000\000\015\005\112\057\
\025\072\224\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\170\000\000\000\
\229\005\000\000\088\004\000\000\000\000\000\000\209\012\000\000\
\000\000\173\007\000\000\250\077\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\148\007\000\000\000\000\000\000\000\000\
\044\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\041\000\000\000\000\173\007\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\002\000\000\000\000\087\000\000\000\155\001\
\000\000\000\000\204\046\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\241\255\000\000\017\001\000\000\246\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\178\007\037\052\000\000\106\013\000\000\
\000\000\130\011\225\055\000\000\112\057\000\000\000\000\236\000\
\000\000\137\001\151\007\151\007\188\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\109\044\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\208\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\112\057\070\056\000\000\106\006\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\059\
\010\069\090\004\114\003\095\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\200\053\000\000\000\000\000\000\000\000\
\112\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\054\
\070\056\000\000\000\000\000\000\050\019\000\000\166\019\000\000\
\000\000\000\000\024\040\000\000\027\020\000\000\143\020\000\000\
\003\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\122\004\000\000\211\052\000\000\212\003\044\009\000\000\015\014\
\000\000\000\000\161\057\001\041\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\001\000\000\000\000\000\000\
\162\061\000\000\000\000\217\007\049\047\000\000\000\000\000\000\
\000\000\157\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\095\003\
\000\000\000\000\112\057\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\197\005\000\000\
\068\003\000\000\131\005\000\000\000\000\161\005\000\000\000\000\
\026\030\079\056\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\002\095\004\141\003\095\004\000\000\142\030\224\001\
\000\000\204\007\000\000\161\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\148\007\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\211\039\000\000\000\000\000\000\161\000\
\211\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\106\014\148\047\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\056\112\057\000\000\
\000\000\198\001\000\000\000\000\000\000\207\001\000\000\000\000\
\000\000\128\040\050\048\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\054\000\000\000\000\000\000\095\004\095\004\
\195\007\000\000\178\007\000\000\000\000\000\000\000\000\000\000\
\000\000\207\007\054\011\134\054\000\000\187\054\000\000\000\000\
\017\053\070\056\000\000\000\000\000\000\070\056\000\000\227\040\
\070\041\000\000\120\021\000\000\236\021\000\000\096\022\174\041\
\017\042\116\042\000\000\000\000\000\000\000\000\086\005\073\001\
\000\000\000\000\095\052\211\039\130\051\000\000\000\000\000\000\
\075\053\080\049\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\070\056\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\199\007\195\007\000\000\201\007\178\007\000\000\
\017\053\000\000\240\054\037\055\249\002\178\007\000\000\019\054\
\000\000\000\000\000\000\046\055\112\057\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\056\000\000\000\000\000\000\
\000\000\040\004\021\004\000\000\061\005\000\000\000\000\000\000\
\000\000\000\000\000\000\108\048\170\048\000\000\200\074\000\000\
\000\000\000\000\201\056\001\041\000\000\000\000\211\039\000\000\
\000\000\252\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\107\005\000\000\000\000\000\000\000\000\000\000\000\000\
\019\054\000\000\000\000\000\000\000\000\000\000\046\055\000\000\
\176\055\000\000\000\000\000\000\000\000\000\000\220\042\063\043\
\162\043\000\000\113\007\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\153\052\000\000\000\000\000\000\000\000\201\056\
\000\000\000\000\000\000\000\000\175\007\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\178\007\118\055\000\000\000\000\000\000\
\176\055\176\055\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\005\000\000\000\000\229\048\013\255\000\000\000\000\
\000\000\000\000\000\000\176\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\049\176\055\000\000\000\000\000\000\
\000\000\000\000\097\059\246\006\030\002\141\003\022\007\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\141\006\170\006\000\000\000\000\000\000\000\000\000\000\000\000\
\210\007\000\000\000\000\000\000\000\000\000\000\243\005\147\053\
\022\007\022\007\211\007\214\007\000\000\215\007\178\007\000\000\
\022\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228\255\
\000\000\022\007\000\000\000\000\000\000\255\001\194\004"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\184\255\000\000\075\000\179\002\184\003\137\008\048\000\000\000\
\182\255\017\000\185\004\077\253\000\000\159\254\176\005\071\255\
\071\009\096\012\018\254\152\005\251\255\099\014\085\252\012\000\
\178\000\016\000\018\000\019\000\000\000\000\000\000\000\000\000\
\035\000\037\000\041\000\000\000\255\255\001\000\225\006\150\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\250\254\005\252\000\000\000\000\
\000\000\002\000\114\253\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\253\002\053\000\057\251\055\255\027\253\185\251\
\006\253\126\252\016\251\104\251\163\251\214\251\104\003\000\000\
\000\000\000\000\000\000\000\000\000\000\038\254\000\000\000\000\
\000\000\000\000\000\000\027\000\064\255\049\006\099\005\025\005\
\000\000\000\000\062\255\051\001\000\000\000\000\169\255\117\252\
\057\253\186\006\229\008\101\011\000\000\000\000\000\000\113\255\
\158\007\183\011\224\006\013\000\065\255\133\003\152\007\000\000\
\187\007\211\006\018\011\130\253\000\000\106\255\000\000\000\000\
\000\000\215\003\126\005\133\255\118\001\000\000\000\000\000\000\
\000\000\206\000\000\000\085\007\142\255\091\007\133\006\152\008\
\000\000\000\000\097\004\000\000\000\000\203\007\195\253\053\005\
\144\251\047\251\215\251\242\252\000\000\221\252\000\000\139\004\
\000\000\000\000\062\251\068\255\012\253\107\006\147\007\000\000\
\000\000\014\004\000\000\000\000\030\004\004\253\000\000\236\003\
\151\004\000\000\128\253\138\254\146\255\000\000\114\005\102\254\
\134\255\171\254\131\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\255\000\000"

let yytablesize = 20395
let yytable = "\147\000\
\105\000\172\000\106\000\249\001\010\002\248\001\239\001\155\001\
\128\002\153\001\154\001\189\000\164\001\031\002\213\002\001\002\
\193\001\099\000\252\002\100\000\101\000\146\000\129\001\055\000\
\116\003\021\002\114\003\022\002\173\001\124\002\203\003\172\002\
\195\003\072\003\133\001\242\003\102\000\097\004\103\000\187\001\
\178\003\219\000\104\000\109\000\144\004\106\004\218\004\159\001\
\027\004\198\004\124\000\130\000\212\001\147\001\051\000\149\001\
\100\005\017\001\179\001\096\005\022\005\052\001\070\005\088\000\
\169\002\028\002\183\003\060\001\070\001\100\003\154\003\151\002\
\114\001\152\002\143\005\103\005\248\002\121\000\145\004\212\000\
\036\004\107\001\210\000\045\004\183\000\143\004\248\002\248\002\
\163\000\240\001\248\002\120\001\020\005\105\000\046\005\106\000\
\217\001\147\002\046\004\114\001\045\002\159\004\111\001\248\002\
\042\002\105\000\112\001\106\000\149\001\211\000\099\000\252\001\
\100\000\101\000\037\004\010\003\112\001\031\004\120\001\138\001\
\119\002\012\002\099\000\240\004\100\000\101\000\117\005\147\000\
\057\005\102\000\147\000\103\000\147\000\147\000\074\003\104\000\
\109\000\178\002\190\001\111\001\215\002\102\000\175\001\103\000\
\030\000\186\005\027\001\104\000\109\000\187\000\120\002\159\005\
\188\001\211\004\043\002\172\000\172\000\107\005\172\000\121\002\
\071\004\103\005\183\003\114\001\181\001\190\001\114\001\114\001\
\172\000\172\000\102\003\124\000\107\001\146\001\181\001\130\000\
\107\001\130\000\062\000\234\001\062\000\062\000\120\001\183\000\
\122\002\093\005\120\001\010\004\163\001\183\000\090\003\172\000\
\172\000\118\002\123\002\004\002\090\003\111\001\112\001\227\005\
\144\001\112\001\213\001\126\005\235\001\110\001\214\001\011\003\
\213\005\224\001\225\001\032\004\013\002\215\001\236\001\050\004\
\216\001\241\004\004\004\216\002\103\002\046\005\062\000\136\003\
\014\004\047\001\183\000\168\000\179\002\190\001\014\004\113\001\
\091\003\190\001\071\001\052\004\127\003\249\005\091\003\096\003\
\189\001\113\001\110\001\188\001\220\004\062\005\168\000\188\001\
\044\002\244\004\121\005\174\002\246\004\168\000\072\004\237\001\
\181\001\128\002\238\001\181\001\113\004\182\002\106\001\183\002\
\183\000\252\002\183\000\189\001\051\003\010\000\184\004\179\003\
\201\002\020\006\103\005\168\000\156\005\109\002\087\003\183\001\
\121\005\052\003\153\001\184\000\012\004\162\005\180\005\168\000\
\067\002\153\001\098\003\153\001\046\005\096\002\168\000\168\000\
\128\002\168\000\164\001\164\001\110\001\071\001\112\002\062\000\
\226\002\071\001\252\002\071\001\128\003\249\001\051\000\180\003\
\005\004\165\002\158\002\137\003\163\005\190\000\015\004\088\000\
\109\003\079\005\081\005\113\001\076\004\140\002\113\001\142\002\
\125\004\143\002\171\002\189\001\205\000\229\005\060\002\189\001\
\051\000\012\004\168\000\063\005\186\003\207\002\050\002\041\006\
\185\004\088\000\046\005\228\005\059\002\156\001\059\001\252\003\
\021\003\106\001\187\003\205\004\213\001\106\001\110\002\050\002\
\214\001\115\005\113\004\058\003\149\001\033\003\116\001\215\001\
\149\001\106\002\216\001\109\002\149\001\024\006\149\001\026\006\
\013\004\125\002\149\001\149\001\183\000\213\001\149\001\105\003\
\046\005\214\001\116\001\096\002\121\001\122\001\104\002\149\001\
\215\001\116\001\027\003\216\001\112\002\191\005\224\003\168\004\
\147\000\005\005\051\000\102\002\027\004\250\002\183\000\147\000\
\194\000\147\000\225\004\088\000\187\001\225\003\226\003\057\001\
\147\000\147\000\183\000\147\000\046\005\111\002\138\005\006\005\
\169\002\184\002\243\005\103\001\183\001\075\004\149\001\147\000\
\128\002\158\001\188\003\147\000\050\002\149\001\211\005\172\000\
\172\000\207\004\253\003\183\000\234\001\234\001\169\002\130\000\
\062\000\130\000\062\000\130\000\110\002\222\003\027\003\149\001\
\149\001\116\001\149\001\149\001\116\001\116\001\014\003\106\002\
\172\000\172\000\172\000\106\003\212\005\235\001\235\001\169\002\
\172\000\094\004\163\001\163\001\185\002\149\001\063\004\236\001\
\236\001\169\002\105\001\128\002\104\002\062\000\185\002\194\004\
\199\005\128\002\193\003\169\004\228\001\172\000\172\000\149\004\
\252\002\102\002\172\000\126\001\071\001\182\001\172\000\187\001\
\035\004\004\002\184\001\187\001\005\002\079\002\043\004\182\001\
\246\003\073\001\147\000\147\000\065\001\184\002\103\001\183\001\
\237\001\237\001\169\002\238\001\238\001\169\002\069\004\105\003\
\184\002\147\000\172\000\142\002\247\003\105\000\183\000\106\000\
\002\003\004\003\153\001\172\000\104\005\090\003\229\001\115\001\
\076\005\004\002\248\002\065\002\193\001\217\002\099\000\015\003\
\100\000\101\000\095\004\110\003\172\000\249\001\122\003\142\002\
\037\003\105\003\105\003\123\003\124\003\018\003\148\005\230\001\
\185\002\102\000\115\001\103\000\142\005\105\001\248\002\104\000\
\109\000\071\001\104\003\071\001\128\002\071\001\212\000\091\003\
\248\002\073\001\060\005\190\000\063\003\065\003\142\002\202\003\
\142\002\182\001\038\002\160\002\182\001\184\001\249\001\172\000\
\204\003\115\004\191\003\248\002\142\002\157\003\070\004\165\002\
\059\001\128\002\248\002\111\003\128\002\160\004\219\002\060\003\
\006\006\113\001\114\001\184\002\161\005\065\002\223\003\065\002\
\171\005\175\003\125\002\212\000\070\003\251\005\248\002\169\005\
\248\002\146\004\115\001\007\002\160\002\115\001\115\001\000\004\
\187\000\001\004\211\000\149\005\248\002\112\003\054\004\040\002\
\013\000\248\002\150\001\183\000\248\002\184\001\248\002\194\005\
\147\000\062\000\252\005\147\000\183\000\008\002\169\005\058\004\
\009\002\125\002\147\000\018\000\147\000\147\000\031\000\161\002\
\107\002\108\002\205\005\198\000\112\002\184\000\035\000\116\001\
\253\005\216\003\147\000\129\003\066\002\188\000\024\000\172\000\
\120\003\161\004\217\005\128\002\147\000\122\000\129\000\248\002\
\156\000\240\003\128\002\245\004\130\000\252\002\172\000\172\000\
\131\003\156\001\245\003\165\000\125\000\068\004\178\005\116\003\
\196\004\114\003\142\003\217\005\218\003\176\001\128\002\201\004\
\166\000\254\005\185\001\147\000\050\001\147\000\195\000\125\000\
\008\006\241\003\147\000\059\004\250\002\183\000\125\000\172\000\
\199\000\046\000\133\002\154\004\156\004\041\002\198\000\147\000\
\172\000\196\000\172\000\051\004\062\000\153\001\028\003\066\001\
\166\003\048\004\097\001\126\001\004\002\125\000\066\002\126\001\
\066\002\217\003\050\000\126\001\252\002\126\001\167\000\059\004\
\125\000\126\001\065\004\004\006\005\006\188\005\061\004\190\005\
\125\000\249\001\125\000\204\003\252\002\123\001\126\001\189\003\
\034\004\167\000\234\001\172\000\133\002\133\002\185\002\098\001\
\167\000\195\000\213\001\183\000\059\004\017\000\214\001\128\002\
\215\001\125\002\004\002\199\000\186\002\215\001\133\002\203\004\
\216\001\011\004\028\003\235\001\196\000\236\003\167\000\237\003\
\145\001\072\001\147\000\125\000\252\004\236\001\160\003\253\004\
\100\001\221\001\167\000\120\001\126\001\229\001\071\001\188\002\
\161\003\167\000\167\000\252\002\167\000\048\005\128\002\050\006\
\249\003\172\004\107\005\078\005\138\005\221\001\126\001\126\001\
\128\002\126\001\126\001\183\000\125\002\217\002\230\001\105\000\
\183\000\106\000\125\002\049\005\248\002\248\002\237\001\041\004\
\071\005\238\001\218\002\147\000\126\001\056\005\147\000\183\000\
\099\000\047\000\100\000\101\000\050\000\167\000\119\002\147\000\
\205\000\132\004\057\004\232\001\187\002\248\002\128\002\128\002\
\147\000\134\005\253\001\102\000\000\003\103\000\172\000\163\000\
\240\001\104\000\109\000\006\003\135\005\066\001\030\000\066\001\
\113\001\114\001\150\001\187\000\120\002\248\002\150\001\099\002\
\250\002\100\002\150\001\151\001\150\001\121\002\219\002\248\002\
\150\001\150\001\191\001\101\002\150\001\250\002\128\002\249\001\
\071\005\160\000\183\000\196\002\162\000\150\001\250\002\232\003\
\073\004\250\002\062\000\196\003\213\001\197\002\122\002\172\000\
\214\001\163\000\240\001\250\002\186\001\125\002\235\004\215\001\
\123\002\147\000\216\001\221\003\132\005\133\005\250\005\228\003\
\143\000\147\000\182\001\172\000\048\005\233\003\172\000\050\000\
\172\000\172\000\172\000\124\001\150\001\147\000\172\000\118\004\
\031\000\210\004\125\002\150\001\172\000\125\002\250\002\002\003\
\035\000\067\002\234\003\251\004\250\002\219\004\009\004\250\002\
\147\000\217\002\107\001\141\004\254\001\150\001\150\001\046\002\
\150\001\150\001\183\000\172\000\254\002\183\001\168\005\054\002\
\248\002\175\002\058\002\084\001\085\001\229\001\151\004\165\004\
\180\002\248\002\120\001\150\001\030\000\004\002\123\004\093\000\
\169\002\106\001\255\001\235\003\050\005\217\002\074\004\105\005\
\102\001\180\002\079\003\048\005\250\002\123\001\230\001\169\002\
\091\002\123\001\216\005\183\000\094\002\123\001\169\002\123\001\
\191\001\090\001\090\003\123\001\123\001\128\002\215\001\250\002\
\132\001\216\001\219\002\180\002\125\002\249\001\250\002\000\002\
\123\001\248\002\095\001\125\002\176\001\169\002\050\000\169\002\
\247\002\141\001\053\005\039\003\147\000\080\005\254\001\066\001\
\148\001\169\002\147\000\071\005\208\004\250\002\016\002\125\002\
\040\003\048\005\012\003\040\006\091\003\050\000\219\002\134\001\
\250\002\097\005\104\001\134\001\013\003\250\002\030\000\123\001\
\250\002\183\000\250\002\147\000\255\001\134\001\123\001\108\005\
\119\002\191\001\114\005\151\001\172\000\147\000\134\001\094\005\
\211\002\147\000\169\002\017\002\211\000\169\002\041\003\048\005\
\123\001\123\001\004\002\123\001\123\001\021\005\131\001\030\006\
\030\000\190\003\094\003\226\004\179\005\187\000\120\002\230\004\
\167\002\000\002\212\002\250\002\139\005\119\002\123\001\121\002\
\050\000\096\003\247\002\134\001\095\005\134\001\050\000\133\003\
\143\000\216\004\155\001\048\005\153\001\154\001\097\003\004\002\
\125\002\249\001\147\000\204\003\031\006\030\000\125\003\071\005\
\122\002\071\005\187\000\120\002\147\000\183\001\171\002\140\002\
\250\002\183\000\123\002\136\001\121\002\168\002\254\001\155\001\
\254\004\122\005\154\001\163\000\240\001\140\002\167\005\016\002\
\140\002\180\002\012\005\180\002\098\003\091\002\043\005\125\002\
\004\002\243\001\140\002\036\005\180\002\122\002\030\000\170\000\
\254\003\125\002\016\002\067\002\255\001\147\000\119\002\123\002\
\208\001\016\002\016\002\124\001\248\002\192\005\091\002\124\001\
\151\001\069\005\045\003\124\001\236\001\124\001\209\005\248\002\
\067\002\124\001\249\001\209\001\204\003\124\001\030\000\016\002\
\016\002\180\002\172\000\187\000\120\002\255\003\124\001\125\002\
\125\002\000\002\131\005\016\002\046\003\121\002\236\001\147\000\
\050\000\121\003\016\002\016\002\069\003\016\002\228\002\229\002\
\130\003\139\001\140\002\061\002\248\002\143\000\140\002\093\000\
\091\002\091\002\147\000\147\000\147\000\083\005\122\002\183\000\
\066\001\184\002\091\005\093\004\093\000\124\001\090\003\125\002\
\123\002\069\005\091\002\212\001\124\001\183\001\077\003\078\003\
\254\002\093\000\099\005\093\000\093\000\212\001\016\002\147\000\
\244\003\140\001\092\005\147\000\230\002\067\002\124\001\124\001\
\093\000\124\001\124\001\063\002\176\001\221\001\184\002\054\002\
\176\001\145\005\183\000\187\000\176\001\043\005\176\001\221\001\
\091\003\063\002\176\001\093\000\124\001\147\000\176\001\127\003\
\212\001\221\001\147\000\093\000\210\001\066\001\213\001\176\001\
\141\002\093\000\214\001\221\001\147\000\143\000\172\000\093\000\
\156\001\215\001\147\000\169\001\216\001\151\002\180\002\211\001\
\187\005\196\001\196\001\093\000\183\001\225\002\246\002\093\000\
\040\004\213\001\151\005\147\000\174\001\214\001\220\001\221\001\
\154\005\063\002\183\001\093\000\215\001\183\000\093\000\216\001\
\063\002\246\002\181\001\116\004\090\003\176\001\147\000\175\001\
\246\002\165\005\250\002\196\005\043\005\242\001\148\003\149\003\
\147\000\180\002\147\000\063\002\183\000\168\002\188\001\176\001\
\176\001\087\005\176\001\176\001\068\005\117\004\125\002\246\002\
\185\002\157\005\250\002\167\003\160\005\250\002\008\003\172\000\
\250\002\180\002\246\002\180\002\248\002\176\001\091\003\183\000\
\185\000\177\003\246\002\185\000\246\002\219\001\185\000\185\000\
\168\002\222\001\185\000\185\000\185\000\185\000\185\000\147\000\
\185\000\180\002\043\005\147\000\248\002\185\002\249\004\185\000\
\251\002\143\000\248\002\185\000\191\004\250\002\185\000\185\000\
\175\002\166\000\250\002\061\003\250\002\223\005\147\000\185\000\
\185\000\180\002\134\002\185\000\185\000\246\002\223\001\202\005\
\203\005\147\000\206\005\207\005\166\000\224\005\192\004\183\000\
\043\005\150\003\183\000\166\000\236\005\183\000\135\002\248\002\
\255\005\090\003\000\006\147\000\147\000\183\000\248\002\244\005\
\184\000\147\000\147\000\250\003\163\000\240\001\088\005\225\005\
\006\002\166\000\185\000\185\000\185\000\185\000\137\005\185\000\
\006\004\236\005\236\005\101\005\043\005\166\000\041\003\009\006\
\010\006\054\001\147\000\051\000\166\000\166\000\112\004\166\000\
\069\005\147\000\069\005\091\003\205\003\183\000\122\000\147\000\
\206\003\136\002\138\003\014\002\152\005\183\000\137\002\207\003\
\023\006\050\000\208\003\200\005\139\003\051\000\184\000\254\004\
\215\005\250\002\183\000\209\003\147\000\034\006\144\001\147\000\
\122\000\180\001\144\001\088\000\018\001\147\000\147\000\015\002\
\166\000\144\001\155\000\092\003\144\001\185\000\185\000\194\000\
\044\006\250\002\048\006\183\000\157\000\236\005\250\002\250\002\
\018\002\218\001\183\000\054\006\055\006\088\000\032\006\183\000\
\250\002\213\001\183\000\048\002\155\000\214\001\020\002\157\000\
\227\001\039\006\183\000\230\003\215\001\151\002\157\000\216\001\
\151\002\185\000\019\001\049\002\046\006\047\006\027\006\183\000\
\020\001\250\002\151\002\184\000\144\001\108\004\109\004\254\002\
\041\003\069\000\170\000\250\002\157\000\232\002\233\002\151\002\
\189\004\151\002\151\002\119\004\120\004\173\002\028\006\175\001\
\157\000\014\006\126\004\175\001\129\002\170\000\151\002\175\001\
\157\000\175\001\157\000\140\004\170\000\175\001\179\001\183\000\
\008\002\175\001\179\001\009\002\130\002\050\003\191\002\193\002\
\195\002\151\002\175\001\051\003\179\001\142\002\199\002\151\002\
\151\002\151\002\170\000\170\000\250\002\179\001\142\002\151\002\
\052\003\232\002\235\002\231\003\178\001\151\002\170\000\027\002\
\178\001\185\000\185\000\157\000\250\002\170\000\170\000\145\001\
\170\000\151\002\178\001\145\001\242\002\151\002\142\002\250\002\
\183\000\142\002\145\001\178\001\173\002\145\001\034\002\185\000\
\175\001\151\002\142\002\133\001\151\002\173\002\145\001\133\001\
\136\001\250\002\183\000\066\001\136\001\185\000\133\001\198\003\
\016\003\185\000\175\001\175\001\008\002\175\001\175\001\009\002\
\051\005\170\000\133\001\170\004\185\000\029\000\254\002\136\001\
\032\002\208\005\229\003\052\005\184\002\171\004\050\002\239\003\
\175\001\186\000\044\003\055\002\193\000\145\001\184\002\195\000\
\196\000\097\001\017\002\197\000\198\000\199\000\200\000\201\000\
\227\001\202\000\035\002\227\001\036\002\227\001\007\004\227\001\
\116\002\133\001\183\000\066\001\053\001\017\002\037\002\055\001\
\056\001\250\002\250\002\109\002\017\002\017\002\234\002\236\002\
\061\001\062\001\224\004\211\000\063\001\064\001\227\004\156\002\
\157\002\149\002\047\004\231\004\213\001\227\001\150\002\227\001\
\214\001\153\002\017\002\017\002\155\002\236\001\099\004\215\001\
\162\002\141\002\216\001\076\001\242\004\243\004\017\002\227\001\
\154\002\163\002\247\004\164\002\143\000\017\002\017\002\141\002\
\017\002\176\002\141\002\125\001\126\001\127\001\128\001\091\002\
\130\001\185\000\180\001\099\002\141\002\204\002\170\002\082\001\
\083\001\084\001\085\001\000\005\175\002\224\002\191\001\205\002\
\180\002\214\002\181\002\104\002\208\002\105\002\209\002\245\002\
\091\002\254\002\183\000\218\001\092\004\005\003\183\000\106\002\
\210\002\017\002\185\000\087\001\088\001\017\003\218\001\019\003\
\022\003\069\000\030\003\032\003\069\000\135\003\031\003\090\001\
\091\001\092\001\093\001\218\001\218\001\016\004\069\000\017\004\
\227\001\034\003\227\001\050\000\196\001\146\003\189\001\190\001\
\095\001\018\004\035\003\069\000\141\002\069\000\069\000\036\003\
\141\002\218\001\091\002\091\002\134\000\077\004\038\003\078\004\
\056\003\069\000\069\000\147\004\148\004\227\001\085\001\227\001\
\253\002\079\004\050\000\077\005\091\002\170\003\057\003\134\000\
\073\003\049\003\233\001\158\004\080\003\069\000\134\000\084\003\
\069\000\135\000\085\005\086\005\069\000\069\000\095\003\103\003\
\166\004\088\003\107\003\069\000\101\003\117\003\185\000\125\000\
\126\003\069\000\185\001\132\003\135\000\134\000\140\003\147\003\
\174\004\215\001\155\003\135\000\038\002\069\000\168\003\232\002\
\134\000\069\000\069\000\062\002\063\002\064\002\065\002\134\000\
\134\000\041\003\134\000\181\003\067\002\069\000\163\000\066\002\
\069\000\194\003\135\000\211\003\212\003\029\000\067\005\213\003\
\029\000\214\003\030\000\197\004\215\003\135\000\038\005\068\005\
\008\004\219\003\029\000\029\000\135\000\135\000\029\000\135\000\
\251\003\002\004\029\002\030\002\029\004\040\005\042\004\029\000\
\029\000\029\000\029\000\134\000\033\004\147\005\062\002\063\002\
\064\002\065\002\049\004\067\002\010\000\029\000\029\000\064\004\
\039\002\255\002\066\002\168\002\062\004\084\004\227\001\083\004\
\089\004\227\001\221\004\093\003\143\000\246\002\047\002\067\004\
\135\000\029\000\053\002\215\000\029\000\090\004\029\000\029\000\
\029\000\029\000\103\004\098\004\100\004\236\001\029\000\029\000\
\246\002\122\004\104\004\105\004\248\002\029\000\089\002\246\002\
\248\002\128\004\236\001\162\004\248\002\248\002\067\002\150\004\
\167\004\029\000\164\004\029\000\066\004\029\000\029\000\236\001\
\175\004\236\001\236\001\248\002\218\001\246\002\176\004\186\004\
\177\004\029\000\201\005\181\004\029\000\182\004\236\001\183\004\
\029\000\246\002\002\005\188\004\004\005\195\004\218\001\199\004\
\218\001\246\002\218\001\246\002\200\004\202\004\218\001\215\004\
\217\004\236\001\248\002\209\004\222\004\233\004\248\004\236\001\
\236\001\236\001\228\004\019\005\229\004\242\002\232\004\236\001\
\250\004\023\005\059\005\227\001\072\005\236\001\066\003\075\005\
\082\005\084\005\232\005\055\005\102\005\006\005\118\005\119\005\
\058\005\236\001\241\005\123\005\246\002\236\001\135\004\137\004\
\139\004\218\001\159\002\246\002\142\004\120\005\227\001\253\002\
\124\005\236\001\242\002\014\000\236\001\127\005\074\005\130\005\
\150\005\180\001\155\005\180\001\158\005\173\005\181\005\185\005\
\184\005\198\005\015\000\016\000\011\006\189\005\180\001\218\001\
\222\005\242\002\231\005\184\002\214\005\233\005\234\005\023\000\
\239\005\210\003\230\005\240\005\250\002\250\002\089\005\090\005\
\253\002\022\006\002\006\250\002\242\005\105\005\007\006\021\006\
\012\006\250\002\031\000\218\001\014\000\069\001\038\006\042\006\
\250\002\106\005\035\000\037\006\045\006\116\005\250\002\051\006\
\039\000\052\006\051\000\015\000\016\000\088\000\041\000\008\000\
\246\002\051\000\185\000\076\001\250\002\248\002\049\006\053\002\
\023\000\250\002\250\002\128\005\074\002\248\002\045\000\088\000\
\071\002\073\002\001\003\174\000\120\000\221\001\093\003\191\000\
\002\003\171\002\049\000\031\000\193\000\052\000\069\001\248\002\
\083\001\084\001\085\001\035\000\076\002\144\005\191\000\023\003\
\169\002\039\000\169\002\170\002\142\001\030\004\170\002\041\000\
\172\002\245\001\227\001\025\006\114\002\093\003\102\004\180\001\
\191\000\175\002\176\002\087\001\088\001\177\002\173\002\126\000\
\118\000\220\005\180\001\174\003\076\003\059\003\218\001\090\001\
\091\001\092\001\093\001\049\000\170\005\180\001\052\000\139\002\
\001\003\218\001\153\005\082\000\174\005\113\002\089\002\071\003\
\095\001\089\002\110\004\200\002\191\000\198\002\191\000\191\000\
\134\003\199\001\227\001\089\002\173\004\180\001\073\005\089\002\
\246\002\218\001\035\005\193\005\146\002\164\003\195\005\166\002\
\089\002\089\002\089\002\089\002\131\002\171\000\001\000\002\000\
\003\000\004\000\005\000\006\000\007\000\146\005\141\005\089\002\
\172\005\054\005\227\001\000\000\000\000\000\000\000\000\133\000\
\204\000\134\000\135\000\030\000\000\000\136\000\000\000\000\000\
\137\000\138\000\089\002\000\000\000\000\089\002\000\000\146\002\
\089\002\089\002\089\002\000\000\000\000\093\003\253\002\089\002\
\089\002\139\000\000\000\000\000\000\000\000\000\089\002\227\001\
\227\001\140\000\113\003\000\000\000\000\174\000\174\000\000\000\
\174\000\142\000\089\002\000\000\089\002\000\000\089\002\089\002\
\180\001\000\000\174\000\174\000\124\004\143\000\144\000\000\000\
\246\002\000\000\089\002\160\001\000\000\089\002\191\000\000\000\
\000\000\089\002\000\000\000\000\000\000\000\000\000\000\246\002\
\246\002\174\000\250\001\000\000\248\002\248\002\191\000\000\000\
\000\000\000\000\000\000\248\002\246\002\000\000\019\006\000\000\
\227\001\000\000\093\003\133\000\000\000\134\000\135\000\030\000\
\248\002\136\000\093\003\000\000\162\001\138\000\248\002\246\002\
\000\000\000\000\246\002\000\000\227\001\010\000\000\000\246\002\
\035\006\036\006\000\000\000\000\177\001\246\002\000\000\000\000\
\043\006\218\001\248\002\246\002\000\000\000\000\141\000\000\000\
\000\000\000\000\000\000\000\000\000\000\142\000\192\001\171\000\
\171\000\053\006\171\000\246\002\246\002\000\000\000\000\165\002\
\165\002\143\000\144\000\000\000\171\000\171\000\165\002\246\002\
\000\000\000\000\246\002\000\000\000\000\191\000\133\000\000\000\
\134\000\135\000\030\000\165\002\136\000\000\000\000\000\151\001\
\138\000\165\002\093\003\171\000\171\000\180\001\000\000\002\002\
\000\000\000\000\191\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\165\002\165\002\218\001\000\000\
\218\001\141\000\218\001\003\004\180\001\218\001\000\000\000\000\
\142\000\093\003\000\000\082\000\000\000\000\000\180\001\014\000\
\000\000\227\001\000\000\227\001\143\000\144\000\155\002\000\000\
\082\000\000\000\000\000\000\000\082\000\000\000\015\000\016\000\
\246\002\000\000\000\000\253\002\000\000\082\000\082\000\082\000\
\082\000\000\000\000\000\023\000\000\000\246\002\000\000\000\000\
\000\000\000\000\191\000\191\000\082\000\000\000\191\000\000\000\
\000\000\191\000\246\002\093\003\246\002\246\002\031\000\000\000\
\093\003\069\001\000\000\000\000\000\000\000\000\035\000\082\000\
\227\001\246\002\082\000\000\000\039\000\082\000\082\000\082\000\
\000\000\000\000\041\000\182\002\082\000\082\000\000\000\000\000\
\000\000\180\001\000\000\082\000\246\002\180\001\000\000\246\002\
\000\000\000\000\253\002\000\000\246\002\000\000\000\000\082\000\
\000\000\082\000\246\002\082\000\082\000\000\000\049\000\000\000\
\246\002\052\000\253\002\093\003\000\000\180\001\000\000\082\000\
\000\000\000\000\082\000\000\000\246\002\000\000\082\000\000\000\
\246\002\174\000\250\001\180\001\182\002\000\000\182\002\182\002\
\182\002\000\000\182\002\000\000\246\002\182\002\182\002\246\002\
\000\000\000\000\102\002\000\000\000\000\000\000\000\000\000\000\
\001\003\000\000\174\000\174\000\174\000\000\000\000\000\227\001\
\000\000\000\000\174\000\000\000\129\005\000\000\000\000\182\002\
\093\003\253\002\000\000\000\000\000\000\000\000\182\002\093\003\
\138\002\000\000\000\000\000\000\000\000\000\000\000\000\250\001\
\174\000\000\000\182\002\182\002\250\001\129\005\000\000\000\000\
\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\180\001\000\000\000\000\000\000\000\000\133\000\
\000\000\134\000\135\000\030\000\000\000\136\000\000\000\000\000\
\137\000\138\000\180\001\000\000\174\000\000\000\000\000\227\001\
\177\001\000\000\000\000\171\000\171\000\174\000\000\000\000\000\
\000\000\139\000\000\000\000\000\129\005\000\000\000\000\000\000\
\000\000\140\000\141\000\000\000\000\000\000\000\174\000\000\000\
\177\000\142\000\000\000\000\000\171\000\171\000\171\000\000\000\
\000\000\000\000\191\000\000\000\171\000\143\000\144\000\000\000\
\000\000\227\001\000\000\206\002\000\000\000\000\180\001\000\000\
\000\000\180\001\000\000\000\000\000\000\125\002\000\000\000\000\
\227\001\171\000\171\000\000\000\180\001\000\000\171\000\000\000\
\227\001\174\000\171\000\155\002\000\000\002\002\000\000\000\000\
\000\000\000\000\227\001\000\000\000\000\192\001\000\000\000\000\
\000\000\000\000\155\002\155\002\192\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\171\000\155\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\171\000\
\000\000\000\000\000\000\175\000\000\000\002\002\000\000\192\000\
\227\001\227\001\155\002\000\000\000\000\155\002\180\001\000\000\
\171\000\000\000\155\002\048\003\000\000\227\001\192\000\000\000\
\155\002\133\002\000\000\180\001\204\000\000\000\155\002\000\000\
\000\000\000\000\000\000\180\001\227\001\000\000\000\000\000\000\
\192\000\000\000\227\001\227\001\227\001\227\001\155\002\155\002\
\000\000\174\000\000\000\000\000\000\000\000\000\000\000\000\000\
\180\001\180\001\155\002\171\000\000\000\155\002\000\000\000\000\
\174\000\174\000\000\000\000\000\000\000\000\000\180\001\129\005\
\000\000\129\005\177\000\177\000\192\000\177\000\192\000\192\000\
\000\000\180\001\000\000\000\000\000\000\176\000\163\003\177\000\
\177\000\000\000\000\000\000\000\160\001\000\000\000\000\180\001\
\000\000\174\000\000\000\000\000\000\000\180\001\180\001\000\000\
\000\000\161\001\174\000\000\000\250\001\241\001\177\000\177\000\
\000\000\133\000\000\000\134\000\135\000\030\000\000\000\136\000\
\000\000\000\000\151\001\138\000\133\000\000\000\134\000\135\000\
\030\000\152\001\136\000\000\000\000\000\162\001\138\000\159\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\192\001\171\000\141\000\250\001\000\000\000\000\
\000\000\000\000\000\000\142\000\000\000\175\000\175\000\141\000\
\175\000\000\000\171\000\171\000\000\000\000\000\142\000\143\000\
\144\000\000\000\175\000\175\000\000\000\000\000\000\000\000\000\
\000\000\000\000\143\000\144\000\000\000\000\000\192\000\000\000\
\162\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\175\000\251\001\171\000\000\000\000\000\192\000\000\000\
\000\000\000\000\003\003\000\000\171\000\125\002\171\000\000\000\
\125\002\000\000\000\000\000\000\000\000\125\002\000\000\000\000\
\002\002\000\000\125\002\125\002\000\000\000\000\000\000\000\000\
\125\002\000\000\000\000\146\002\000\000\000\000\000\000\125\002\
\057\002\125\002\125\002\000\000\000\000\000\000\000\000\176\000\
\176\000\068\002\176\000\000\000\000\000\197\003\125\002\171\000\
\000\000\000\000\000\000\000\000\176\000\176\000\000\000\000\000\
\174\000\133\000\000\000\134\000\135\000\030\000\002\002\136\000\
\000\000\125\002\137\000\138\000\125\002\000\000\146\002\125\002\
\125\002\125\002\000\000\176\000\176\000\192\000\000\000\125\002\
\000\000\133\002\000\000\139\000\125\002\125\002\000\000\000\000\
\000\000\133\002\000\000\140\000\141\000\000\000\133\002\000\000\
\000\000\125\002\192\000\142\000\000\000\125\002\125\002\000\000\
\000\000\174\000\000\000\133\002\000\000\133\002\133\002\143\000\
\144\000\125\002\000\000\000\000\125\002\000\000\000\000\044\004\
\000\000\000\000\133\002\000\000\000\000\174\000\000\000\000\000\
\250\001\000\000\174\000\174\000\174\000\000\000\000\000\000\000\
\174\000\000\000\000\000\000\000\000\000\133\002\174\000\177\001\
\133\002\000\000\000\000\133\002\133\002\133\002\000\000\000\000\
\000\000\000\000\171\000\133\002\000\000\000\000\177\000\177\000\
\246\002\133\002\192\000\192\000\000\000\174\000\192\000\000\000\
\000\000\192\000\000\000\000\000\000\000\133\002\000\000\000\000\
\000\000\133\002\133\002\000\000\000\000\000\000\189\002\177\000\
\177\000\177\000\000\000\000\000\000\000\133\002\000\000\177\000\
\133\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\152\001\171\000\159\002\000\000\000\000\000\000\
\000\000\152\001\000\000\152\001\177\000\177\000\000\000\000\000\
\000\000\177\000\000\000\159\002\159\002\177\000\000\000\171\000\
\000\000\000\000\171\000\000\000\171\000\171\000\171\000\068\002\
\159\002\000\000\171\000\000\000\000\000\000\000\000\000\000\000\
\171\000\175\000\251\001\000\000\000\000\000\000\000\000\000\000\
\000\000\177\000\000\000\159\002\000\000\000\000\159\002\000\000\
\000\000\248\002\025\003\159\002\000\000\000\000\000\000\171\000\
\000\000\159\002\175\000\175\000\175\000\000\000\248\002\159\002\
\000\000\000\000\175\000\177\000\000\000\000\000\250\001\000\000\
\000\000\002\002\000\000\248\002\000\000\248\002\248\002\159\002\
\159\002\000\000\000\000\000\000\000\000\000\000\000\000\251\001\
\175\000\000\000\248\002\159\002\251\001\000\000\159\002\000\000\
\175\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\240\001\193\004\000\000\000\000\248\002\025\003\000\000\
\000\000\000\000\000\000\176\000\176\000\248\002\000\000\000\000\
\000\000\000\000\000\000\248\002\175\000\000\000\000\000\000\000\
\000\000\248\002\000\000\000\000\000\000\175\000\000\000\000\000\
\000\000\000\000\000\000\000\000\176\000\176\000\176\000\000\000\
\000\000\248\002\000\000\000\000\176\000\176\000\175\000\000\000\
\000\000\000\000\000\000\000\000\000\000\248\002\000\000\000\000\
\248\002\000\000\192\000\000\000\000\000\000\000\000\000\000\000\
\171\000\176\000\176\000\000\000\000\000\000\000\176\000\000\000\
\000\000\000\000\176\000\000\000\000\000\000\000\002\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\093\002\175\000\000\000\095\002\000\000\096\002\177\000\097\002\
\000\000\000\000\000\000\000\000\250\001\000\000\176\000\000\000\
\246\002\000\000\000\000\246\002\091\000\177\000\177\000\176\000\
\000\000\000\000\000\000\002\002\000\000\246\002\000\000\000\000\
\000\000\000\000\000\000\092\000\016\000\132\002\000\000\133\002\
\176\000\000\000\246\002\000\000\246\002\246\002\000\000\000\000\
\093\000\000\000\000\000\000\000\000\000\000\000\177\000\148\002\
\246\002\246\002\152\001\000\000\000\000\000\000\000\000\177\000\
\000\000\177\000\000\000\031\000\002\002\000\000\000\000\000\000\
\192\001\000\000\000\000\035\000\246\002\000\000\089\002\246\002\
\000\000\094\000\000\000\176\000\246\002\000\000\000\000\041\000\
\000\000\175\000\246\002\000\000\000\000\000\000\000\000\000\000\
\246\002\000\000\000\000\000\000\000\000\000\000\000\000\095\000\
\175\000\175\000\177\000\000\000\246\002\000\000\171\000\000\000\
\246\002\246\002\000\000\096\000\000\000\000\000\052\000\000\000\
\250\001\000\000\000\000\000\000\246\002\000\000\000\000\246\002\
\202\002\000\000\203\002\000\000\000\000\000\000\000\000\000\000\
\000\000\175\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\175\000\000\000\251\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\246\002\000\000\249\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\240\001\000\000\176\000\240\001\000\000\000\000\000\000\
\000\000\240\001\000\000\000\000\000\000\000\000\240\001\000\000\
\068\002\000\000\176\000\176\000\240\001\251\001\216\000\216\000\
\000\000\250\001\000\000\240\001\000\000\240\001\240\001\000\000\
\000\000\000\000\000\000\000\000\218\005\000\000\000\000\000\000\
\000\000\240\001\240\001\000\000\000\000\177\000\000\000\000\000\
\000\000\000\000\171\000\176\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\176\000\240\001\176\000\000\000\
\240\001\000\000\000\000\240\001\240\001\240\001\000\000\000\000\
\000\000\000\000\240\001\240\001\000\000\000\000\123\001\124\001\
\000\000\240\001\000\000\000\000\245\005\000\000\000\000\010\000\
\000\000\150\001\000\000\000\000\000\000\240\001\177\000\000\000\
\000\000\240\001\240\001\000\000\000\000\152\001\000\000\176\000\
\000\000\000\000\055\004\000\000\000\000\240\001\086\003\000\000\
\240\001\089\003\177\000\000\000\000\000\177\000\133\004\177\000\
\177\000\177\000\004\001\171\000\000\000\177\000\000\000\000\000\
\175\000\000\000\000\000\177\000\000\000\000\000\162\003\000\000\
\133\000\000\000\134\000\135\000\030\000\000\000\136\000\000\000\
\000\000\137\000\138\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\177\000\000\000\000\000\000\000\000\000\000\000\
\141\003\000\000\139\000\000\000\000\000\000\000\089\002\000\000\
\000\000\089\002\140\000\141\000\000\000\000\000\000\000\000\000\
\000\000\175\000\142\000\089\002\000\000\000\000\162\003\089\002\
\000\000\000\000\000\000\248\005\147\002\000\000\143\000\144\000\
\089\002\089\002\089\002\089\002\000\000\175\000\000\000\000\000\
\251\001\000\000\175\000\175\000\175\000\000\000\000\000\089\002\
\175\000\000\000\176\000\165\003\000\000\000\000\175\000\133\000\
\000\000\134\000\135\000\030\000\000\000\136\000\000\000\000\000\
\137\000\138\000\089\002\000\000\000\000\089\002\000\000\147\002\
\089\002\089\002\089\002\000\000\000\000\175\000\185\003\089\002\
\089\002\139\000\000\000\000\000\000\000\000\000\089\002\000\000\
\000\000\140\000\141\000\000\000\000\000\000\000\000\000\000\000\
\000\000\142\000\089\002\176\000\089\002\000\000\089\002\089\002\
\000\000\000\000\000\000\177\000\000\000\143\000\144\000\000\000\
\000\000\000\000\089\002\000\000\000\000\089\002\000\000\176\000\
\248\002\089\002\176\000\000\000\176\000\176\000\176\000\000\000\
\000\000\000\000\176\000\000\000\000\000\248\002\000\000\000\000\
\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\206\004\000\000\000\000\000\000\
\248\002\000\000\248\002\248\002\248\002\000\000\248\002\176\000\
\000\000\248\002\248\002\069\002\070\002\071\002\072\002\073\002\
\074\002\075\002\076\002\077\002\078\002\079\002\080\002\081\002\
\082\002\083\002\084\002\085\002\086\002\087\002\088\002\089\002\
\000\000\092\002\000\000\248\002\000\000\000\000\251\001\000\000\
\000\000\000\000\248\002\000\000\000\000\098\002\000\000\000\000\
\000\000\000\000\060\004\000\000\000\000\000\000\248\002\248\002\
\000\000\000\000\115\002\180\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\001\004\001\004\001\004\001\000\000\000\000\
\000\000\000\000\004\001\004\001\004\001\000\000\000\000\004\001\
\004\001\004\001\004\001\004\001\004\001\004\001\004\001\004\001\
\004\001\177\000\004\001\004\001\004\001\004\001\004\001\004\001\
\000\000\000\000\091\004\000\000\000\000\000\000\004\001\004\001\
\000\000\000\000\004\001\004\001\004\001\004\001\004\001\004\001\
\004\001\004\001\000\000\004\001\000\000\004\001\000\000\000\000\
\176\000\000\000\000\000\000\000\000\000\000\000\004\001\004\001\
\000\000\004\001\121\004\000\000\004\001\004\001\004\001\000\000\
\004\001\004\001\004\001\004\001\004\001\000\000\000\000\000\000\
\000\000\000\000\004\001\004\001\004\001\004\001\004\001\004\001\
\004\001\000\000\000\000\004\001\000\000\004\001\004\001\000\000\
\004\001\004\001\004\001\004\001\004\001\000\000\004\001\152\004\
\153\004\004\001\004\001\004\001\251\001\000\000\004\001\000\000\
\000\000\004\001\000\000\000\000\000\000\004\001\190\002\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\177\000\000\000\000\000\
\000\000\000\000\000\000\000\000\152\001\000\000\000\000\000\000\
\000\000\007\003\158\000\000\000\017\000\018\000\009\003\000\000\
\000\000\000\000\000\000\005\001\000\000\000\000\000\000\010\000\
\190\004\150\001\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\152\001\159\000\160\000\000\000\161\000\162\000\000\000\
\000\000\030\000\000\000\000\000\204\004\000\000\163\000\164\000\
\000\000\000\000\000\000\000\000\000\000\165\000\176\000\000\000\
\000\000\000\000\216\000\216\000\000\000\000\000\000\000\000\000\
\000\000\000\000\166\000\000\000\000\000\000\000\177\000\000\000\
\133\000\000\000\134\000\135\000\030\000\000\000\136\000\167\000\
\251\001\151\001\138\000\046\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\050\000\168\000\075\003\000\000\000\000\
\000\000\000\000\081\003\082\003\083\003\000\000\000\000\000\000\
\000\000\000\000\000\000\141\000\000\000\214\002\000\000\000\000\
\000\000\000\000\142\000\180\000\180\000\180\000\180\000\000\000\
\000\000\000\000\000\000\180\000\180\000\180\000\143\000\144\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\000\000\000\000\180\000\180\000\180\000\180\000\180\000\
\180\000\001\005\000\000\003\005\000\000\000\000\000\000\180\000\
\180\000\251\001\246\002\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\176\000\000\000\180\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\180\000\
\180\000\000\000\000\000\000\000\000\000\180\000\180\000\180\000\
\000\000\180\000\000\000\000\000\180\000\180\000\000\000\000\000\
\000\000\000\000\000\000\180\000\000\000\180\000\000\000\000\000\
\061\005\180\000\151\003\152\003\153\003\000\000\180\000\180\000\
\000\000\180\000\180\000\180\000\180\000\000\000\000\000\180\000\
\000\000\000\000\180\000\000\000\180\000\000\000\000\000\180\000\
\000\000\000\000\180\000\000\000\000\000\000\000\180\000\000\000\
\000\000\000\000\000\000\176\000\000\000\000\000\000\000\182\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\201\000\
\000\000\000\000\000\000\005\001\005\001\005\001\005\001\000\000\
\000\000\000\000\000\000\005\001\005\001\005\001\000\000\125\005\
\005\001\005\001\005\001\005\001\005\001\005\001\005\001\005\001\
\005\001\005\001\000\000\005\001\005\001\005\001\005\001\005\001\
\005\001\000\000\000\000\000\000\000\000\000\000\000\000\005\001\
\005\001\000\000\000\000\005\001\005\001\005\001\005\001\005\001\
\005\001\005\001\005\001\000\000\005\001\000\000\005\001\000\000\
\000\000\000\000\019\004\000\000\000\000\000\000\000\000\005\001\
\005\001\000\000\005\001\000\000\000\000\005\001\005\001\005\001\
\000\000\005\001\005\001\005\001\005\001\005\001\000\000\164\005\
\000\000\000\000\000\000\005\001\005\001\005\001\005\001\005\001\
\005\001\005\001\073\001\074\001\005\001\000\000\005\001\005\001\
\000\000\005\001\005\001\005\001\005\001\005\001\000\000\005\001\
\076\001\000\000\005\001\005\001\005\001\000\000\000\000\005\001\
\000\000\000\000\005\001\000\000\079\001\000\000\005\001\000\000\
\000\000\197\005\000\000\000\000\000\000\080\001\000\000\000\000\
\000\000\000\000\000\000\081\001\082\001\083\001\084\001\085\001\
\210\005\000\000\246\002\000\000\000\000\246\002\000\000\000\000\
\219\005\000\000\000\000\000\000\000\000\000\000\086\001\246\002\
\000\000\000\000\221\005\183\000\000\000\246\002\000\000\000\000\
\087\001\088\001\091\002\114\004\246\002\000\000\246\002\246\002\
\000\000\000\000\000\000\000\000\090\001\091\001\092\001\093\001\
\000\000\000\000\246\002\246\002\000\000\000\000\000\000\000\000\
\000\000\000\000\246\002\246\002\000\000\095\001\000\000\000\000\
\246\005\247\005\000\000\000\000\000\000\000\000\246\002\000\000\
\000\000\246\002\000\000\000\000\000\000\003\006\246\002\000\000\
\246\002\000\000\000\000\000\000\246\002\000\000\000\000\000\000\
\000\000\000\000\246\002\000\000\013\006\000\000\000\000\000\000\
\000\000\000\000\015\006\016\006\017\006\018\006\246\002\000\000\
\000\000\000\000\246\002\246\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\246\002\000\000\
\000\000\246\002\178\004\179\004\180\004\000\000\000\000\201\000\
\201\000\201\000\201\000\000\000\000\000\000\000\000\000\201\000\
\201\000\201\000\000\000\000\000\201\000\201\000\201\000\201\000\
\201\000\201\000\201\000\201\000\201\000\000\000\000\000\201\000\
\201\000\201\000\201\000\201\000\201\000\000\000\000\000\000\000\
\000\000\000\000\000\000\201\000\201\000\000\000\000\000\201\000\
\201\000\201\000\201\000\201\000\201\000\201\000\000\000\000\000\
\201\000\000\000\000\000\000\000\000\000\000\000\000\000\212\004\
\213\004\214\004\000\000\201\000\201\000\000\000\201\000\012\001\
\000\000\201\000\201\000\201\000\000\000\201\000\201\000\201\000\
\201\000\201\000\000\000\000\000\000\000\000\000\000\000\201\000\
\000\000\201\000\201\000\201\000\201\000\201\000\000\000\000\000\
\000\000\234\004\201\000\201\000\000\000\201\000\201\000\201\000\
\201\000\000\000\000\000\201\000\000\000\000\000\201\000\000\000\
\201\000\000\000\000\000\201\000\000\000\000\000\201\000\000\000\
\000\000\000\000\201\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\005\025\005\000\000\000\000\000\000\032\005\
\033\005\034\005\091\002\091\002\091\002\091\002\000\000\000\000\
\091\002\091\002\091\002\091\002\091\002\091\002\091\002\091\002\
\091\002\091\002\091\002\091\002\091\002\091\002\091\002\091\002\
\091\002\018\001\091\002\091\002\091\002\091\002\091\002\091\002\
\091\002\091\002\000\000\000\000\000\000\000\000\091\002\091\002\
\000\000\000\000\091\002\091\002\091\002\091\002\091\002\091\002\
\091\002\091\002\000\000\091\002\091\002\091\002\000\000\091\002\
\091\002\091\002\091\002\000\000\000\000\091\002\091\002\091\002\
\079\002\091\002\091\002\091\002\091\002\091\002\091\002\000\000\
\091\002\091\002\091\002\091\002\091\002\000\000\000\000\000\000\
\000\000\000\000\091\002\091\002\091\002\091\002\091\002\091\002\
\091\002\091\002\000\000\091\002\000\000\091\002\091\002\000\000\
\091\002\091\002\091\002\091\002\091\002\000\000\091\002\091\002\
\000\000\091\002\091\002\091\002\091\002\000\000\091\002\091\002\
\000\000\091\002\000\000\000\000\000\000\091\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\001\
\012\001\012\001\012\001\000\000\000\000\012\001\012\001\012\001\
\012\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\
\012\001\012\001\012\001\012\001\012\001\012\001\000\000\012\001\
\012\001\012\001\012\001\012\001\012\001\012\001\012\001\000\000\
\175\005\176\005\177\005\012\001\012\001\000\000\000\000\012\001\
\012\001\012\001\012\001\012\001\012\001\012\001\012\001\000\000\
\012\001\012\001\012\001\000\000\012\001\012\001\012\001\012\001\
\000\000\000\000\012\001\012\001\012\001\000\000\012\001\012\001\
\012\001\012\001\012\001\012\001\000\000\012\001\012\001\012\001\
\012\001\012\001\000\000\000\000\000\000\000\000\000\000\012\001\
\012\001\012\001\012\001\012\001\012\001\012\001\012\001\000\000\
\012\001\000\000\012\001\012\001\000\000\012\001\012\001\012\001\
\012\001\012\001\024\001\012\001\012\001\000\000\012\001\012\001\
\012\001\012\001\000\000\012\001\012\001\000\000\012\001\000\000\
\000\000\000\000\012\001\000\000\000\000\000\000\000\000\000\000\
\000\000\018\001\018\001\018\001\018\001\000\000\000\000\018\001\
\018\001\018\001\018\001\018\001\018\001\018\001\018\001\018\001\
\018\001\018\001\018\001\018\001\018\001\018\001\018\001\018\001\
\000\000\018\001\018\001\018\001\018\001\018\001\018\001\018\001\
\018\001\000\000\000\000\000\000\000\000\018\001\018\001\000\000\
\000\000\018\001\018\001\018\001\018\001\018\001\018\001\018\001\
\018\001\000\000\018\001\018\001\018\001\000\000\018\001\018\001\
\018\001\018\001\000\000\000\000\018\001\018\001\018\001\000\000\
\018\001\018\001\018\001\018\001\018\001\018\001\000\000\018\001\
\018\001\018\001\018\001\018\001\000\000\000\000\000\000\000\000\
\000\000\018\001\018\001\018\001\018\001\018\001\018\001\018\001\
\018\001\000\000\018\001\000\000\018\001\018\001\020\001\018\001\
\018\001\018\001\018\001\018\001\000\000\018\001\018\001\000\000\
\018\001\018\001\018\001\018\001\000\000\018\001\018\001\000\000\
\018\001\000\000\000\000\000\000\018\001\016\001\016\001\016\001\
\016\001\000\000\000\000\016\001\016\001\016\001\016\001\016\001\
\016\001\016\001\016\001\016\001\016\001\016\001\016\001\016\001\
\016\001\016\001\016\001\016\001\000\000\016\001\016\001\016\001\
\016\001\016\001\016\001\016\001\016\001\000\000\000\000\000\000\
\000\000\016\001\016\001\000\000\000\000\016\001\016\001\016\001\
\016\001\016\001\016\001\016\001\016\001\000\000\016\001\016\001\
\016\001\000\000\016\001\016\001\016\001\016\001\000\000\000\000\
\016\001\016\001\016\001\000\000\016\001\016\001\016\001\016\001\
\016\001\016\001\000\000\016\001\016\001\016\001\016\001\016\001\
\000\000\000\000\000\000\000\000\000\000\016\001\016\001\016\001\
\016\001\016\001\016\001\016\001\016\001\000\000\016\001\000\000\
\016\001\016\001\022\001\016\001\016\001\016\001\016\001\016\001\
\000\000\016\001\016\001\000\000\016\001\016\001\016\001\016\001\
\000\000\016\001\016\001\000\000\016\001\000\000\000\000\000\000\
\016\001\000\000\024\001\024\001\024\001\024\001\000\000\000\000\
\024\001\024\001\024\001\024\001\024\001\024\001\024\001\024\001\
\024\001\024\001\024\001\024\001\024\001\024\001\024\001\024\001\
\024\001\000\000\024\001\024\001\024\001\024\001\024\001\024\001\
\024\001\024\001\000\000\000\000\000\000\000\000\024\001\024\001\
\000\000\000\000\024\001\024\001\024\001\024\001\024\001\024\001\
\024\001\024\001\000\000\024\001\024\001\024\001\000\000\024\001\
\024\001\024\001\024\001\000\000\000\000\024\001\024\001\024\001\
\000\000\024\001\024\001\024\001\024\001\024\001\024\001\000\000\
\024\001\024\001\024\001\024\001\024\001\000\000\000\000\000\000\
\000\000\000\000\024\001\024\001\024\001\024\001\024\001\024\001\
\024\001\024\001\000\000\024\001\000\000\024\001\024\001\030\001\
\024\001\024\001\024\001\024\001\024\001\000\000\024\001\024\001\
\000\000\024\001\024\001\024\001\024\001\000\000\024\001\024\001\
\000\000\024\001\000\000\000\000\000\000\024\001\020\001\020\001\
\020\001\020\001\000\000\000\000\020\001\020\001\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\000\000\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\000\000\000\000\
\000\000\000\000\020\001\020\001\000\000\000\000\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\000\000\020\001\
\020\001\020\001\000\000\020\001\020\001\020\001\020\001\000\000\
\000\000\020\001\020\001\020\001\000\000\020\001\020\001\020\001\
\020\001\020\001\020\001\000\000\020\001\020\001\020\001\020\001\
\020\001\000\000\000\000\000\000\000\000\000\000\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\000\000\020\001\
\000\000\020\001\020\001\026\001\020\001\020\001\020\001\020\001\
\020\001\000\000\020\001\020\001\000\000\020\001\020\001\020\001\
\020\001\000\000\020\001\020\001\000\000\020\001\000\000\000\000\
\000\000\020\001\022\001\022\001\022\001\022\001\000\000\000\000\
\022\001\022\001\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\022\001\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\000\000\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\022\001\000\000\000\000\000\000\000\000\022\001\022\001\
\000\000\000\000\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\022\001\000\000\022\001\022\001\022\001\000\000\022\001\
\022\001\022\001\022\001\000\000\000\000\022\001\022\001\022\001\
\000\000\022\001\022\001\022\001\022\001\022\001\022\001\000\000\
\022\001\022\001\022\001\022\001\022\001\000\000\000\000\000\000\
\000\000\000\000\022\001\022\001\022\001\022\001\022\001\022\001\
\022\001\022\001\000\000\022\001\000\000\022\001\022\001\028\001\
\022\001\022\001\022\001\022\001\022\001\000\000\022\001\022\001\
\000\000\022\001\022\001\022\001\022\001\000\000\022\001\022\001\
\000\000\022\001\000\000\000\000\000\000\022\001\000\000\030\001\
\030\001\030\001\030\001\000\000\000\000\030\001\030\001\030\001\
\030\001\030\001\030\001\030\001\030\001\030\001\030\001\030\001\
\030\001\030\001\030\001\030\001\030\001\030\001\000\000\030\001\
\030\001\030\001\030\001\030\001\030\001\030\001\030\001\000\000\
\000\000\000\000\000\000\030\001\030\001\000\000\000\000\030\001\
\030\001\030\001\030\001\030\001\030\001\030\001\030\001\000\000\
\030\001\030\001\030\001\000\000\030\001\030\001\030\001\030\001\
\000\000\000\000\030\001\030\001\030\001\000\000\030\001\030\001\
\030\001\030\001\030\001\030\001\000\000\030\001\030\001\030\001\
\030\001\030\001\000\000\000\000\000\000\000\000\000\000\030\001\
\030\001\030\001\030\001\030\001\030\001\030\001\030\001\000\000\
\030\001\000\000\030\001\030\001\133\002\030\001\030\001\030\001\
\030\001\030\001\000\000\030\001\030\001\000\000\030\001\030\001\
\030\001\030\001\000\000\030\001\030\001\000\000\030\001\000\000\
\000\000\000\000\030\001\026\001\026\001\026\001\026\001\000\000\
\000\000\026\001\026\001\026\001\026\001\026\001\026\001\026\001\
\026\001\026\001\026\001\026\001\026\001\026\001\026\001\026\001\
\026\001\026\001\000\000\026\001\026\001\026\001\026\001\026\001\
\026\001\026\001\026\001\000\000\000\000\000\000\000\000\026\001\
\026\001\000\000\000\000\026\001\026\001\026\001\026\001\026\001\
\026\001\026\001\026\001\000\000\026\001\026\001\026\001\000\000\
\026\001\026\001\026\001\026\001\000\000\000\000\026\001\026\001\
\026\001\000\000\026\001\026\001\026\001\026\001\026\001\026\001\
\000\000\026\001\026\001\026\001\026\001\026\001\000\000\000\000\
\000\000\000\000\000\000\026\001\026\001\026\001\026\001\026\001\
\026\001\026\001\026\001\000\000\026\001\000\000\026\001\026\001\
\057\001\026\001\026\001\026\001\026\001\026\001\000\000\026\001\
\026\001\000\000\026\001\026\001\026\001\026\001\000\000\026\001\
\026\001\000\000\026\001\000\000\000\000\000\000\026\001\028\001\
\028\001\028\001\028\001\000\000\000\000\028\001\028\001\028\001\
\028\001\028\001\028\001\028\001\028\001\028\001\028\001\028\001\
\028\001\028\001\028\001\028\001\028\001\028\001\000\000\028\001\
\028\001\028\001\028\001\028\001\028\001\028\001\028\001\000\000\
\000\000\000\000\000\000\028\001\028\001\000\000\000\000\028\001\
\028\001\028\001\028\001\028\001\028\001\028\001\028\001\000\000\
\028\001\028\001\028\001\000\000\028\001\028\001\028\001\028\001\
\000\000\000\000\028\001\028\001\028\001\000\000\028\001\028\001\
\028\001\028\001\028\001\028\001\000\000\028\001\028\001\028\001\
\028\001\028\001\000\000\000\000\000\000\000\000\000\000\028\001\
\028\001\028\001\028\001\028\001\028\001\028\001\028\001\000\000\
\028\001\000\000\028\001\028\001\066\001\028\001\028\001\028\001\
\028\001\028\001\000\000\028\001\028\001\000\000\028\001\028\001\
\028\001\028\001\000\000\028\001\028\001\000\000\028\001\000\000\
\000\000\000\000\028\001\000\000\133\002\133\002\133\002\133\002\
\000\000\000\000\133\002\133\002\133\002\133\002\133\002\133\002\
\133\002\133\002\133\002\133\002\133\002\133\002\133\002\133\002\
\133\002\133\002\000\000\000\000\133\002\133\002\133\002\133\002\
\133\002\133\002\133\002\133\002\000\000\000\000\000\000\000\000\
\133\002\133\002\000\000\000\000\133\002\133\002\133\002\133\002\
\133\002\133\002\133\002\133\002\000\000\133\002\133\002\133\002\
\000\000\133\002\133\002\133\002\133\002\000\000\000\000\133\002\
\133\002\133\002\000\000\133\002\133\002\133\002\133\002\133\002\
\133\002\000\000\133\002\133\002\133\002\133\002\133\002\000\000\
\000\000\000\000\000\000\000\000\133\002\133\002\133\002\133\002\
\133\002\133\002\133\002\133\002\000\000\133\002\000\000\133\002\
\133\002\068\001\133\002\133\002\133\002\133\002\133\002\000\000\
\133\002\133\002\000\000\133\002\133\002\133\002\133\002\000\000\
\133\002\133\002\000\000\133\002\000\000\000\000\000\000\133\002\
\057\001\057\001\057\001\057\001\000\000\000\000\057\001\057\001\
\057\001\057\001\057\001\057\001\057\001\057\001\057\001\057\001\
\057\001\057\001\057\001\057\001\057\001\057\001\000\000\000\000\
\057\001\057\001\057\001\057\001\057\001\057\001\057\001\057\001\
\000\000\000\000\000\000\000\000\057\001\057\001\000\000\000\000\
\057\001\057\001\057\001\057\001\057\001\057\001\057\001\000\000\
\000\000\057\001\057\001\057\001\000\000\057\001\057\001\057\001\
\057\001\000\000\000\000\057\001\057\001\057\001\000\000\057\001\
\057\001\057\001\057\001\057\001\057\001\000\000\057\001\057\001\
\057\001\057\001\057\001\000\000\000\000\000\000\000\000\000\000\
\057\001\057\001\057\001\057\001\057\001\057\001\057\001\057\001\
\000\000\057\001\000\000\057\001\057\001\071\001\057\001\057\001\
\057\001\057\001\057\001\000\000\057\001\057\001\000\000\057\001\
\057\001\057\001\057\001\000\000\057\001\057\001\000\000\057\001\
\000\000\000\000\000\000\057\001\066\001\066\001\066\001\066\001\
\000\000\000\000\066\001\066\001\066\001\066\001\066\001\066\001\
\066\001\066\001\066\001\066\001\066\001\066\001\066\001\066\001\
\066\001\066\001\000\000\000\000\066\001\066\001\066\001\066\001\
\066\001\066\001\066\001\066\001\000\000\000\000\000\000\000\000\
\066\001\066\001\000\000\000\000\066\001\066\001\066\001\066\001\
\066\001\066\001\066\001\000\000\000\000\066\001\066\001\066\001\
\000\000\066\001\066\001\066\001\066\001\000\000\000\000\066\001\
\066\001\066\001\000\000\066\001\066\001\066\001\066\001\066\001\
\066\001\000\000\066\001\066\001\066\001\066\001\066\001\000\000\
\000\000\000\000\000\000\000\000\066\001\066\001\066\001\066\001\
\066\001\066\001\066\001\066\001\000\000\066\001\000\000\066\001\
\066\001\200\000\066\001\066\001\066\001\000\000\000\000\000\000\
\066\001\066\001\000\000\066\001\066\001\066\001\066\001\000\000\
\066\001\066\001\000\000\066\001\000\000\000\000\000\000\066\001\
\000\000\068\001\068\001\068\001\068\001\000\000\000\000\068\001\
\068\001\068\001\068\001\068\001\068\001\068\001\068\001\068\001\
\068\001\068\001\068\001\068\001\068\001\068\001\068\001\000\000\
\000\000\068\001\068\001\068\001\068\001\068\001\068\001\068\001\
\068\001\000\000\000\000\000\000\000\000\068\001\068\001\000\000\
\000\000\068\001\068\001\068\001\068\001\068\001\068\001\068\001\
\000\000\000\000\068\001\068\001\068\001\000\000\068\001\068\001\
\068\001\068\001\000\000\000\000\068\001\068\001\068\001\000\000\
\068\001\068\001\068\001\068\001\068\001\068\001\000\000\068\001\
\068\001\068\001\068\001\068\001\000\000\000\000\000\000\000\000\
\000\000\068\001\068\001\068\001\068\001\068\001\068\001\068\001\
\068\001\000\000\068\001\000\000\068\001\068\001\212\000\068\001\
\068\001\068\001\000\000\000\000\000\000\068\001\068\001\000\000\
\068\001\068\001\068\001\068\001\000\000\068\001\068\001\000\000\
\068\001\000\000\000\000\000\000\068\001\071\001\071\001\071\001\
\071\001\000\000\000\000\071\001\071\001\071\001\071\001\071\001\
\071\001\071\001\071\001\071\001\071\001\071\001\071\001\071\001\
\071\001\071\001\071\001\000\000\000\000\071\001\071\001\071\001\
\071\001\071\001\071\001\071\001\071\001\000\000\000\000\000\000\
\000\000\071\001\071\001\000\000\000\000\071\001\071\001\071\001\
\071\001\071\001\071\001\071\001\000\000\000\000\071\001\071\001\
\071\001\000\000\071\001\071\001\071\001\071\001\000\000\000\000\
\071\001\071\001\071\001\000\000\071\001\071\001\071\001\071\001\
\071\001\071\001\000\000\071\001\071\001\071\001\071\001\071\001\
\000\000\000\000\000\000\000\000\000\000\071\001\071\001\071\001\
\071\001\071\001\071\001\071\001\071\001\000\000\071\001\000\000\
\071\001\071\001\213\000\071\001\071\001\071\001\000\000\000\000\
\000\000\071\001\071\001\000\000\071\001\071\001\071\001\071\001\
\000\000\071\001\071\001\000\000\071\001\000\000\000\000\000\000\
\071\001\200\000\200\000\200\000\200\000\000\000\000\000\000\000\
\000\000\200\000\200\000\200\000\000\000\000\000\200\000\200\000\
\200\000\200\000\200\000\200\000\200\000\200\000\200\000\000\000\
\000\000\200\000\200\000\200\000\200\000\200\000\200\000\000\000\
\000\000\000\000\000\000\000\000\000\000\200\000\200\000\000\000\
\000\000\200\000\200\000\200\000\200\000\200\000\200\000\200\000\
\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\200\000\200\000\000\000\
\200\000\000\000\000\000\200\000\200\000\200\000\000\000\200\000\
\200\000\200\000\200\000\200\000\000\000\000\000\000\000\000\000\
\000\000\200\000\000\000\200\000\200\000\200\000\200\000\200\000\
\000\000\000\000\000\000\000\000\200\000\200\000\214\000\200\000\
\200\000\200\000\000\000\000\000\000\000\200\000\000\000\000\000\
\200\000\000\000\200\000\000\000\000\000\200\000\000\000\000\000\
\200\000\000\000\000\000\000\000\200\000\000\000\212\000\212\000\
\212\000\212\000\000\000\000\000\000\000\000\000\212\000\212\000\
\212\000\000\000\000\000\212\000\212\000\212\000\212\000\212\000\
\000\000\212\000\212\000\212\000\000\000\000\000\212\000\212\000\
\212\000\212\000\212\000\212\000\000\000\000\000\000\000\000\000\
\000\000\000\000\212\000\212\000\000\000\000\000\212\000\212\000\
\212\000\212\000\212\000\212\000\212\000\000\000\000\000\212\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\212\000\212\000\000\000\212\000\000\000\000\000\
\212\000\212\000\212\000\000\000\212\000\212\000\212\000\212\000\
\212\000\000\000\000\000\000\000\000\000\000\000\212\000\000\000\
\212\000\212\000\212\000\212\000\212\000\000\000\000\000\000\000\
\000\000\212\000\212\000\252\000\212\000\212\000\212\000\212\000\
\000\000\000\000\212\000\000\000\000\000\212\000\000\000\212\000\
\000\000\000\000\212\000\000\000\000\000\212\000\000\000\000\000\
\000\000\212\000\213\000\213\000\213\000\213\000\000\000\000\000\
\000\000\000\000\213\000\213\000\213\000\000\000\000\000\213\000\
\213\000\213\000\213\000\213\000\213\000\213\000\213\000\213\000\
\000\000\000\000\213\000\213\000\213\000\213\000\213\000\213\000\
\000\000\000\000\000\000\000\000\000\000\000\000\213\000\213\000\
\000\000\000\000\213\000\213\000\213\000\213\000\213\000\213\000\
\213\000\000\000\000\000\213\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\213\000\213\000\
\000\000\213\000\000\000\000\000\213\000\213\000\213\000\000\000\
\213\000\213\000\213\000\213\000\213\000\000\000\000\000\000\000\
\000\000\000\000\213\000\000\000\213\000\213\000\213\000\213\000\
\213\000\000\000\000\000\000\000\000\000\213\000\213\000\253\000\
\213\000\213\000\213\000\000\000\000\000\000\000\213\000\000\000\
\000\000\213\000\000\000\213\000\000\000\000\000\213\000\000\000\
\000\000\213\000\000\000\000\000\000\000\213\000\214\000\214\000\
\214\000\214\000\000\000\000\000\000\000\000\000\214\000\214\000\
\214\000\000\000\000\000\214\000\214\000\214\000\214\000\214\000\
\214\000\214\000\214\000\214\000\000\000\000\000\214\000\214\000\
\214\000\214\000\214\000\214\000\000\000\000\000\000\000\000\000\
\000\000\000\000\214\000\214\000\000\000\000\000\214\000\214\000\
\214\000\214\000\214\000\214\000\214\000\000\000\000\000\214\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\214\000\214\000\000\000\214\000\000\000\000\000\
\214\000\214\000\214\000\000\000\214\000\214\000\214\000\214\000\
\214\000\000\000\000\000\000\000\000\000\000\000\214\000\000\000\
\214\000\214\000\214\000\214\000\214\000\000\000\000\000\000\000\
\000\000\214\000\214\000\223\000\214\000\214\000\214\000\000\000\
\000\000\000\000\214\000\000\000\000\000\214\000\000\000\214\000\
\000\000\000\000\214\000\000\000\000\000\214\000\000\000\000\000\
\000\000\214\000\000\000\252\000\252\000\252\000\252\000\000\000\
\000\000\000\000\000\000\252\000\252\000\252\000\000\000\000\000\
\252\000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\
\252\000\000\000\000\000\252\000\252\000\252\000\252\000\252\000\
\252\000\000\000\000\000\000\000\000\000\000\000\000\000\252\000\
\252\000\000\000\000\000\252\000\252\000\252\000\252\000\252\000\
\252\000\252\000\000\000\000\000\252\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252\000\
\252\000\000\000\252\000\000\000\000\000\252\000\252\000\252\000\
\000\000\252\000\252\000\252\000\252\000\252\000\000\000\000\000\
\000\000\000\000\000\000\252\000\000\000\252\000\252\000\252\000\
\252\000\252\000\000\000\000\000\000\000\000\000\252\000\252\000\
\224\000\252\000\252\000\252\000\000\000\000\000\000\000\252\000\
\000\000\000\000\252\000\000\000\252\000\000\000\000\000\252\000\
\000\000\000\000\252\000\000\000\000\000\000\000\252\000\253\000\
\253\000\253\000\253\000\000\000\000\000\000\000\000\000\253\000\
\253\000\253\000\000\000\000\000\253\000\253\000\253\000\253\000\
\253\000\253\000\253\000\253\000\253\000\000\000\000\000\253\000\
\253\000\253\000\253\000\253\000\253\000\000\000\000\000\000\000\
\000\000\000\000\000\000\253\000\253\000\000\000\000\000\253\000\
\253\000\253\000\253\000\253\000\253\000\253\000\000\000\000\000\
\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\253\000\253\000\000\000\253\000\000\000\
\000\000\253\000\253\000\253\000\000\000\253\000\253\000\253\000\
\253\000\253\000\000\000\000\000\000\000\000\000\000\000\253\000\
\000\000\253\000\253\000\253\000\253\000\253\000\000\000\000\000\
\000\000\000\000\253\000\253\000\231\000\253\000\253\000\253\000\
\000\000\000\000\000\000\253\000\000\000\000\000\253\000\000\000\
\253\000\000\000\000\000\253\000\000\000\000\000\253\000\000\000\
\000\000\000\000\253\000\223\000\223\000\223\000\223\000\000\000\
\000\000\000\000\000\000\223\000\223\000\223\000\000\000\000\000\
\223\000\223\000\223\000\223\000\223\000\223\000\223\000\223\000\
\223\000\000\000\000\000\223\000\223\000\223\000\223\000\223\000\
\223\000\000\000\000\000\000\000\000\000\000\000\000\000\223\000\
\223\000\000\000\000\000\223\000\223\000\223\000\223\000\223\000\
\223\000\000\000\000\000\000\000\223\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\223\000\
\223\000\000\000\223\000\000\000\000\000\223\000\223\000\223\000\
\000\000\223\000\223\000\223\000\223\000\223\000\000\000\000\000\
\000\000\000\000\000\000\223\000\000\000\223\000\223\000\223\000\
\223\000\223\000\000\000\000\000\000\000\000\000\223\000\223\000\
\230\000\223\000\223\000\223\000\223\000\000\000\000\000\223\000\
\000\000\000\000\223\000\000\000\223\000\000\000\000\000\223\000\
\000\000\000\000\223\000\000\000\000\000\000\000\223\000\000\000\
\224\000\224\000\224\000\224\000\000\000\000\000\000\000\000\000\
\224\000\224\000\224\000\000\000\000\000\224\000\224\000\224\000\
\224\000\224\000\224\000\224\000\224\000\224\000\000\000\000\000\
\224\000\224\000\224\000\224\000\224\000\224\000\000\000\000\000\
\000\000\000\000\000\000\000\000\224\000\224\000\000\000\000\000\
\224\000\224\000\224\000\224\000\224\000\224\000\000\000\000\000\
\000\000\224\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\224\000\224\000\000\000\224\000\
\000\000\000\000\224\000\224\000\224\000\000\000\224\000\224\000\
\224\000\224\000\224\000\000\000\000\000\000\000\000\000\000\000\
\224\000\000\000\224\000\224\000\224\000\224\000\224\000\000\000\
\000\000\000\000\000\000\224\000\224\000\206\000\224\000\224\000\
\224\000\224\000\000\000\000\000\224\000\000\000\000\000\224\000\
\000\000\224\000\000\000\000\000\224\000\000\000\000\000\224\000\
\000\000\000\000\000\000\224\000\231\000\231\000\231\000\231\000\
\000\000\000\000\000\000\000\000\231\000\231\000\231\000\000\000\
\000\000\231\000\231\000\231\000\231\000\231\000\231\000\231\000\
\231\000\231\000\000\000\000\000\231\000\231\000\231\000\231\000\
\231\000\231\000\000\000\000\000\000\000\000\000\000\000\000\000\
\231\000\231\000\000\000\000\000\231\000\231\000\231\000\231\000\
\231\000\231\000\000\000\000\000\000\000\231\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\231\000\231\000\000\000\231\000\000\000\000\000\231\000\231\000\
\231\000\000\000\231\000\231\000\231\000\231\000\231\000\000\000\
\000\000\000\000\000\000\000\000\231\000\000\000\231\000\231\000\
\231\000\231\000\231\000\000\000\000\000\000\000\000\000\231\000\
\231\000\209\000\231\000\231\000\231\000\231\000\000\000\000\000\
\231\000\000\000\000\000\231\000\000\000\231\000\000\000\000\000\
\231\000\000\000\000\000\231\000\000\000\000\000\000\000\231\000\
\230\000\230\000\230\000\230\000\000\000\000\000\000\000\000\000\
\230\000\230\000\230\000\000\000\000\000\230\000\230\000\230\000\
\230\000\230\000\230\000\230\000\230\000\230\000\000\000\000\000\
\230\000\230\000\230\000\230\000\230\000\230\000\000\000\000\000\
\000\000\000\000\000\000\000\000\230\000\230\000\000\000\000\000\
\230\000\230\000\230\000\230\000\230\000\230\000\000\000\000\000\
\000\000\230\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\230\000\230\000\000\000\230\000\
\000\000\000\000\230\000\230\000\230\000\000\000\230\000\230\000\
\230\000\230\000\230\000\000\000\000\000\000\000\000\000\000\000\
\230\000\000\000\230\000\230\000\230\000\230\000\230\000\000\000\
\000\000\000\000\000\000\230\000\230\000\210\000\230\000\230\000\
\230\000\230\000\000\000\000\000\230\000\000\000\000\000\230\000\
\000\000\230\000\000\000\000\000\230\000\000\000\000\000\230\000\
\000\000\000\000\000\000\230\000\000\000\206\000\206\000\206\000\
\206\000\000\000\000\000\000\000\000\000\000\000\206\000\206\000\
\000\000\000\000\206\000\206\000\206\000\206\000\206\000\206\000\
\206\000\206\000\206\000\000\000\000\000\206\000\206\000\206\000\
\206\000\206\000\206\000\000\000\000\000\000\000\000\000\000\000\
\000\000\206\000\206\000\000\000\000\000\206\000\206\000\206\000\
\206\000\206\000\206\000\206\000\000\000\000\000\206\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\206\000\206\000\000\000\206\000\000\000\000\000\206\000\
\206\000\206\000\000\000\206\000\206\000\206\000\206\000\206\000\
\000\000\000\000\000\000\000\000\000\000\206\000\000\000\206\000\
\206\000\206\000\206\000\206\000\000\000\000\000\000\000\000\000\
\206\000\206\000\222\000\206\000\206\000\206\000\206\000\000\000\
\000\000\206\000\000\000\000\000\206\000\000\000\206\000\000\000\
\000\000\206\000\000\000\000\000\206\000\000\000\000\000\000\000\
\206\000\209\000\209\000\209\000\209\000\000\000\000\000\000\000\
\000\000\000\000\209\000\209\000\000\000\000\000\209\000\209\000\
\209\000\209\000\209\000\209\000\209\000\209\000\209\000\000\000\
\000\000\209\000\209\000\209\000\209\000\209\000\209\000\000\000\
\000\000\000\000\000\000\000\000\000\000\209\000\209\000\000\000\
\000\000\209\000\209\000\209\000\209\000\209\000\209\000\209\000\
\000\000\000\000\209\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\209\000\209\000\000\000\
\209\000\000\000\000\000\209\000\209\000\209\000\000\000\209\000\
\209\000\209\000\209\000\209\000\000\000\000\000\000\000\000\000\
\000\000\209\000\000\000\209\000\209\000\209\000\209\000\209\000\
\000\000\000\000\000\000\000\000\209\000\209\000\228\000\209\000\
\209\000\209\000\209\000\000\000\000\000\209\000\000\000\000\000\
\209\000\000\000\209\000\000\000\000\000\209\000\000\000\000\000\
\209\000\000\000\000\000\000\000\209\000\210\000\210\000\210\000\
\210\000\000\000\000\000\000\000\000\000\000\000\210\000\210\000\
\000\000\000\000\210\000\210\000\210\000\210\000\210\000\210\000\
\210\000\210\000\210\000\000\000\000\000\210\000\210\000\210\000\
\210\000\210\000\210\000\000\000\000\000\000\000\000\000\000\000\
\000\000\210\000\210\000\000\000\000\000\210\000\210\000\210\000\
\210\000\210\000\210\000\210\000\000\000\000\000\210\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\210\000\210\000\000\000\210\000\000\000\000\000\210\000\
\210\000\210\000\000\000\210\000\210\000\210\000\210\000\210\000\
\000\000\000\000\000\000\000\000\000\000\210\000\000\000\210\000\
\210\000\210\000\210\000\210\000\000\000\000\000\000\000\000\000\
\210\000\210\000\229\000\210\000\210\000\210\000\210\000\000\000\
\000\000\210\000\000\000\000\000\210\000\000\000\210\000\000\000\
\000\000\210\000\000\000\000\000\210\000\000\000\000\000\000\000\
\210\000\000\000\222\000\222\000\222\000\222\000\000\000\000\000\
\000\000\000\000\222\000\222\000\222\000\000\000\000\000\222\000\
\222\000\222\000\222\000\222\000\222\000\222\000\222\000\222\000\
\000\000\000\000\222\000\222\000\222\000\222\000\222\000\222\000\
\000\000\000\000\000\000\000\000\000\000\000\000\222\000\222\000\
\000\000\000\000\222\000\222\000\222\000\222\000\222\000\000\000\
\000\000\000\000\000\000\222\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\222\000\222\000\
\000\000\222\000\000\000\000\000\222\000\222\000\222\000\000\000\
\222\000\222\000\222\000\222\000\222\000\000\000\000\000\000\000\
\000\000\000\000\222\000\000\000\222\000\000\000\222\000\222\000\
\222\000\000\000\000\000\000\000\000\000\222\000\222\000\225\000\
\222\000\222\000\222\000\222\000\000\000\000\000\000\000\000\000\
\000\000\222\000\000\000\222\000\000\000\000\000\222\000\000\000\
\000\000\222\000\000\000\000\000\000\000\222\000\228\000\228\000\
\228\000\228\000\000\000\000\000\000\000\000\000\228\000\228\000\
\228\000\000\000\000\000\228\000\228\000\228\000\228\000\228\000\
\228\000\228\000\228\000\228\000\000\000\000\000\228\000\228\000\
\228\000\228\000\228\000\228\000\000\000\000\000\000\000\000\000\
\000\000\000\000\228\000\228\000\000\000\000\000\228\000\228\000\
\228\000\228\000\228\000\000\000\000\000\000\000\000\000\228\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\228\000\228\000\000\000\228\000\000\000\000\000\
\228\000\228\000\228\000\000\000\228\000\228\000\228\000\228\000\
\228\000\000\000\000\000\000\000\000\000\000\000\228\000\000\000\
\228\000\000\000\228\000\228\000\228\000\000\000\000\000\000\000\
\000\000\228\000\228\000\226\000\228\000\228\000\228\000\228\000\
\000\000\000\000\000\000\000\000\000\000\228\000\000\000\228\000\
\000\000\000\000\228\000\000\000\000\000\228\000\000\000\000\000\
\000\000\228\000\229\000\229\000\229\000\229\000\000\000\000\000\
\000\000\000\000\229\000\229\000\229\000\000\000\000\000\229\000\
\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\
\000\000\000\000\229\000\229\000\229\000\229\000\229\000\229\000\
\000\000\000\000\000\000\000\000\000\000\000\000\229\000\229\000\
\000\000\000\000\229\000\229\000\229\000\229\000\229\000\000\000\
\000\000\000\000\000\000\229\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\229\000\229\000\
\000\000\229\000\000\000\000\000\229\000\229\000\229\000\000\000\
\229\000\229\000\229\000\229\000\229\000\000\000\000\000\000\000\
\000\000\000\000\229\000\000\000\229\000\000\000\229\000\229\000\
\229\000\000\000\000\000\000\000\000\000\229\000\229\000\227\000\
\229\000\229\000\229\000\229\000\000\000\000\000\000\000\000\000\
\000\000\229\000\000\000\229\000\000\000\000\000\229\000\000\000\
\000\000\229\000\000\000\000\000\000\000\229\000\000\000\225\000\
\225\000\225\000\225\000\000\000\000\000\000\000\000\000\225\000\
\225\000\225\000\000\000\000\000\225\000\225\000\225\000\225\000\
\225\000\225\000\225\000\225\000\225\000\000\000\000\000\225\000\
\225\000\225\000\225\000\225\000\225\000\000\000\000\000\000\000\
\000\000\000\000\000\000\225\000\225\000\000\000\000\000\225\000\
\225\000\225\000\225\000\225\000\000\000\000\000\000\000\000\000\
\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\225\000\225\000\000\000\225\000\000\000\
\000\000\225\000\225\000\225\000\000\000\225\000\225\000\225\000\
\225\000\225\000\000\000\000\000\000\000\000\000\000\000\225\000\
\000\000\225\000\000\000\225\000\225\000\225\000\000\000\000\000\
\000\000\000\000\225\000\225\000\219\000\225\000\225\000\225\000\
\225\000\000\000\000\000\000\000\000\000\000\000\225\000\000\000\
\225\000\000\000\000\000\225\000\000\000\000\000\225\000\000\000\
\000\000\000\000\225\000\226\000\226\000\226\000\226\000\000\000\
\000\000\000\000\000\000\226\000\226\000\226\000\000\000\000\000\
\226\000\226\000\226\000\226\000\226\000\226\000\226\000\226\000\
\226\000\000\000\000\000\226\000\226\000\226\000\226\000\226\000\
\226\000\000\000\000\000\000\000\000\000\000\000\000\000\226\000\
\226\000\000\000\000\000\226\000\226\000\226\000\226\000\226\000\
\000\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\226\000\
\226\000\000\000\226\000\000\000\000\000\226\000\226\000\226\000\
\000\000\226\000\226\000\226\000\226\000\226\000\000\000\000\000\
\000\000\000\000\000\000\226\000\000\000\226\000\000\000\226\000\
\226\000\226\000\000\000\000\000\000\000\000\000\226\000\226\000\
\232\000\226\000\226\000\226\000\226\000\000\000\000\000\000\000\
\000\000\000\000\226\000\000\000\226\000\000\000\000\000\226\000\
\000\000\000\000\226\000\000\000\000\000\000\000\226\000\227\000\
\227\000\227\000\227\000\000\000\000\000\000\000\000\000\227\000\
\227\000\227\000\000\000\000\000\227\000\227\000\227\000\227\000\
\227\000\227\000\227\000\227\000\227\000\000\000\000\000\227\000\
\227\000\227\000\227\000\227\000\227\000\000\000\000\000\000\000\
\000\000\000\000\000\000\227\000\227\000\000\000\000\000\227\000\
\227\000\227\000\227\000\227\000\000\000\000\000\000\000\000\000\
\227\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\227\000\227\000\000\000\227\000\000\000\
\000\000\227\000\227\000\227\000\000\000\227\000\227\000\227\000\
\227\000\227\000\000\000\000\000\000\000\000\000\000\000\227\000\
\000\000\227\000\000\000\227\000\227\000\227\000\000\000\000\000\
\000\000\000\000\227\000\227\000\234\000\227\000\227\000\227\000\
\227\000\000\000\000\000\000\000\000\000\000\000\227\000\000\000\
\227\000\000\000\000\000\227\000\000\000\000\000\227\000\010\000\
\000\000\150\001\227\000\000\000\219\000\219\000\219\000\219\000\
\000\000\000\000\000\000\000\000\219\000\219\000\219\000\000\000\
\000\000\219\000\219\000\000\000\219\000\219\000\219\000\219\000\
\219\000\219\000\000\000\000\000\219\000\219\000\219\000\219\000\
\219\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\
\219\000\219\000\000\000\000\000\219\000\219\000\219\000\219\000\
\133\000\000\000\134\000\135\000\030\000\219\000\136\000\000\000\
\000\000\151\001\138\000\000\000\000\000\000\000\000\000\000\000\
\219\000\219\000\000\000\219\000\000\000\000\000\219\000\219\000\
\219\000\000\000\219\000\000\000\000\000\219\000\219\000\000\000\
\000\000\000\000\000\000\141\000\219\000\000\000\219\000\000\000\
\000\000\000\000\142\000\000\000\000\000\000\000\000\000\219\000\
\219\000\220\000\219\000\219\000\219\000\219\000\143\000\144\000\
\000\000\000\000\000\000\219\000\000\000\219\000\000\000\000\000\
\219\000\000\000\000\000\219\000\000\000\000\000\000\000\219\000\
\232\000\232\000\232\000\232\000\000\000\000\000\000\000\000\000\
\232\000\232\000\232\000\000\000\000\000\232\000\232\000\000\000\
\232\000\232\000\232\000\232\000\232\000\232\000\000\000\000\000\
\232\000\232\000\232\000\232\000\232\000\232\000\000\000\000\000\
\000\000\000\000\000\000\000\000\232\000\232\000\000\000\000\000\
\232\000\232\000\232\000\000\000\000\000\000\000\000\000\000\000\
\000\000\232\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\232\000\232\000\000\000\232\000\
\000\000\000\000\000\000\232\000\232\000\000\000\232\000\000\000\
\000\000\232\000\232\000\000\000\000\000\000\000\000\000\000\000\
\232\000\000\000\232\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\232\000\232\000\221\000\232\000\232\000\
\232\000\232\000\000\000\000\000\000\000\000\000\000\000\232\000\
\000\000\232\000\000\000\000\000\232\000\000\000\000\000\232\000\
\000\000\000\000\000\000\232\000\234\000\234\000\234\000\234\000\
\000\000\000\000\000\000\000\000\234\000\234\000\234\000\000\000\
\000\000\234\000\234\000\000\000\234\000\234\000\234\000\234\000\
\234\000\234\000\000\000\000\000\234\000\234\000\234\000\234\000\
\234\000\234\000\000\000\000\000\000\000\000\000\000\000\000\000\
\234\000\234\000\000\000\000\000\234\000\234\000\234\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\234\000\234\000\000\000\234\000\000\000\000\000\000\000\234\000\
\234\000\000\000\234\000\000\000\000\000\234\000\234\000\000\000\
\000\000\000\000\000\000\000\000\234\000\000\000\234\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\234\000\
\234\000\233\000\234\000\234\000\234\000\234\000\000\000\000\000\
\000\000\000\000\000\000\234\000\000\000\234\000\000\000\000\000\
\234\000\000\000\000\000\234\000\000\000\000\000\000\000\234\000\
\000\000\220\000\220\000\220\000\220\000\000\000\000\000\000\000\
\000\000\220\000\220\000\220\000\000\000\000\000\220\000\220\000\
\000\000\220\000\220\000\220\000\220\000\220\000\220\000\000\000\
\000\000\220\000\220\000\220\000\220\000\220\000\220\000\000\000\
\000\000\000\000\000\000\000\000\000\000\220\000\220\000\000\000\
\000\000\220\000\220\000\220\000\000\000\000\000\000\000\000\000\
\000\000\000\000\220\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\220\000\220\000\000\000\
\220\000\000\000\000\000\000\000\220\000\220\000\000\000\220\000\
\000\000\000\000\220\000\220\000\000\000\000\000\000\000\000\000\
\000\000\220\000\000\000\220\000\000\000\000\000\238\000\000\000\
\000\000\000\000\000\000\000\000\220\000\220\000\000\000\220\000\
\220\000\220\000\220\000\000\000\000\000\000\000\000\000\000\000\
\220\000\000\000\220\000\000\000\000\000\220\000\000\000\000\000\
\220\000\000\000\000\000\000\000\220\000\221\000\221\000\221\000\
\221\000\000\000\000\000\000\000\000\000\221\000\221\000\221\000\
\000\000\000\000\221\000\221\000\000\000\221\000\221\000\221\000\
\221\000\221\000\221\000\000\000\000\000\221\000\221\000\221\000\
\221\000\221\000\221\000\000\000\000\000\000\000\000\000\000\000\
\000\000\221\000\221\000\000\000\000\000\221\000\221\000\221\000\
\000\000\000\000\000\000\000\000\000\000\000\000\221\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\221\000\221\000\000\000\221\000\000\000\000\000\000\000\
\221\000\221\000\000\000\221\000\000\000\000\000\221\000\221\000\
\000\000\000\000\000\000\237\000\000\000\221\000\000\000\221\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\221\000\221\000\000\000\221\000\221\000\221\000\221\000\000\000\
\000\000\000\000\000\000\000\000\221\000\000\000\221\000\000\000\
\000\000\221\000\000\000\000\000\221\000\000\000\000\000\000\000\
\221\000\233\000\233\000\233\000\233\000\000\000\000\000\000\000\
\000\000\233\000\233\000\233\000\000\000\000\000\233\000\233\000\
\000\000\233\000\233\000\233\000\233\000\233\000\233\000\000\000\
\000\000\233\000\233\000\233\000\233\000\233\000\233\000\000\000\
\000\000\000\000\000\000\000\000\000\000\233\000\233\000\000\000\
\000\000\233\000\233\000\233\000\000\000\000\000\000\000\000\000\
\000\000\000\000\233\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\233\000\233\000\000\000\
\233\000\000\000\000\000\236\000\233\000\233\000\000\000\233\000\
\000\000\000\000\233\000\233\000\000\000\000\000\000\000\000\000\
\000\000\233\000\000\000\233\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\233\000\233\000\000\000\233\000\
\233\000\233\000\233\000\000\000\000\000\000\000\000\000\000\000\
\233\000\000\000\233\000\000\000\000\000\233\000\238\000\000\000\
\233\000\238\000\000\000\000\000\233\000\000\000\238\000\238\000\
\238\000\000\000\000\000\238\000\238\000\000\000\238\000\238\000\
\238\000\238\000\238\000\238\000\000\000\000\000\238\000\238\000\
\238\000\000\000\238\000\238\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\238\000\000\000\000\000\238\000\238\000\
\156\003\000\000\133\000\000\000\134\000\135\000\030\000\238\000\
\136\000\000\000\000\000\151\001\138\000\000\000\000\000\000\000\
\000\000\000\000\238\000\100\001\000\000\238\000\000\000\000\000\
\000\000\238\000\238\000\000\000\238\000\000\000\000\000\238\000\
\238\000\000\000\000\000\000\000\000\000\141\000\238\000\000\000\
\238\000\000\000\000\000\000\000\142\000\000\000\000\000\000\000\
\000\000\238\000\238\000\000\000\238\000\238\000\238\000\238\000\
\143\000\144\000\000\000\000\000\000\000\238\000\000\000\238\000\
\000\000\000\000\238\000\237\000\000\000\238\000\237\000\000\000\
\000\000\238\000\000\000\237\000\237\000\237\000\000\000\000\000\
\237\000\237\000\000\000\237\000\237\000\237\000\237\000\237\000\
\237\000\000\000\000\000\237\000\237\000\237\000\000\000\237\000\
\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\237\000\000\000\000\000\237\000\237\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\
\000\000\000\000\000\000\235\000\000\000\000\000\000\000\237\000\
\000\000\000\000\237\000\000\000\000\000\000\000\237\000\237\000\
\000\000\237\000\000\000\000\000\237\000\237\000\000\000\000\000\
\000\000\000\000\000\000\237\000\000\000\237\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\237\000\237\000\
\000\000\237\000\237\000\237\000\237\000\000\000\000\000\000\000\
\000\000\000\000\237\000\236\000\237\000\000\000\236\000\237\000\
\000\000\000\000\237\000\236\000\000\000\236\000\237\000\000\000\
\236\000\236\000\000\000\236\000\236\000\236\000\236\000\236\000\
\236\000\000\000\000\000\236\000\236\000\236\000\000\000\236\000\
\236\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\236\000\000\000\000\000\236\000\236\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\236\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\001\000\000\000\000\000\000\236\000\
\000\000\000\000\236\000\000\000\000\000\000\000\236\000\236\000\
\000\000\236\000\000\000\000\000\236\000\236\000\000\000\000\000\
\000\000\000\000\000\000\236\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\236\000\236\000\
\000\000\236\000\236\000\236\000\236\000\000\000\000\000\000\000\
\000\000\000\000\236\000\100\001\236\000\000\000\100\001\236\000\
\000\000\000\000\236\000\100\001\000\000\100\001\236\000\000\000\
\100\001\100\001\000\000\100\001\100\001\100\001\100\001\100\001\
\100\001\000\000\000\000\100\001\100\001\100\001\000\000\100\001\
\100\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\100\001\000\000\000\000\100\001\100\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\100\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\001\
\000\000\142\002\100\001\000\000\000\000\000\000\100\001\100\001\
\000\000\100\001\000\000\000\000\100\001\100\001\000\000\000\000\
\000\000\000\000\000\000\100\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\100\001\100\001\
\000\000\100\001\100\001\100\001\100\001\000\000\000\000\000\000\
\000\000\000\000\100\001\235\000\100\001\000\000\235\000\100\001\
\000\000\000\000\100\001\235\000\000\000\235\000\100\001\000\000\
\235\000\235\000\000\000\235\000\235\000\235\000\235\000\235\000\
\235\000\000\000\000\000\235\000\235\000\235\000\000\000\235\000\
\235\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\235\000\000\000\000\000\235\000\235\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\235\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\235\000\
\000\000\239\000\235\000\000\000\000\000\000\000\235\000\235\000\
\000\000\235\000\000\000\000\000\235\000\235\000\000\000\000\000\
\000\000\000\000\000\000\235\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\235\000\235\000\
\000\000\235\000\235\000\235\000\235\000\000\000\000\000\000\000\
\000\000\000\000\235\000\099\001\235\000\000\000\099\001\235\000\
\000\000\000\000\235\000\099\001\000\000\099\001\235\000\000\000\
\099\001\099\001\000\000\099\001\099\001\099\001\099\001\099\001\
\099\001\000\000\000\000\099\001\099\001\099\001\000\000\099\001\
\099\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\001\000\000\000\000\099\001\099\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\099\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\251\000\000\000\000\000\099\001\
\000\000\000\000\099\001\000\000\000\000\000\000\099\001\099\001\
\000\000\099\001\000\000\000\000\099\001\099\001\000\000\000\000\
\000\000\000\000\000\000\099\001\000\000\000\000\000\000\000\000\
\000\000\000\000\246\002\000\000\000\000\000\000\099\001\099\001\
\000\000\099\001\099\001\099\001\099\001\000\000\000\000\000\000\
\000\000\000\000\099\001\000\000\099\001\000\000\000\000\099\001\
\000\000\142\002\099\001\142\002\142\002\142\002\099\001\000\000\
\000\000\142\002\000\000\000\000\000\000\000\000\142\002\000\000\
\000\000\000\000\142\002\142\002\142\002\000\000\000\000\000\000\
\000\000\000\000\000\000\142\002\142\002\142\002\142\002\000\000\
\000\000\000\000\000\000\000\000\000\000\142\002\000\000\000\000\
\000\000\000\000\142\002\000\000\000\000\000\000\000\000\242\000\
\000\000\142\002\142\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\142\002\000\000\000\000\
\142\002\142\002\000\000\142\002\142\002\142\002\000\000\142\002\
\000\000\000\000\142\002\142\002\000\000\000\000\000\000\000\000\
\000\000\142\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\142\002\142\002\000\000\142\002\
\142\002\142\002\142\002\000\000\000\000\142\002\000\000\000\000\
\000\000\239\000\000\000\000\000\239\000\142\002\142\002\000\000\
\142\002\239\000\000\000\239\000\142\002\000\000\239\000\239\000\
\000\000\000\000\239\000\000\000\239\000\239\000\239\000\000\000\
\000\000\239\000\239\000\239\000\000\000\239\000\239\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\239\000\000\000\
\000\000\239\000\239\000\000\000\000\000\000\000\000\000\215\000\
\000\000\000\000\239\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\239\000\000\000\000\000\
\239\000\000\000\000\000\000\000\239\000\239\000\000\000\239\000\
\000\000\000\000\239\000\239\000\000\000\103\000\000\000\000\000\
\000\000\239\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\239\000\239\000\000\000\239\000\
\239\000\239\000\239\000\000\000\251\000\000\000\000\000\251\000\
\239\000\000\000\239\000\000\000\251\000\239\000\251\000\000\000\
\239\000\251\000\251\000\000\000\239\000\251\000\000\000\251\000\
\251\000\251\000\000\000\000\000\251\000\251\000\251\000\000\000\
\251\000\251\000\246\002\000\000\000\000\246\002\000\000\000\000\
\000\000\251\000\000\000\000\000\251\000\251\000\000\000\246\002\
\000\000\000\000\244\000\000\000\000\000\251\000\000\000\000\000\
\000\000\000\000\000\000\000\000\246\002\000\000\246\002\246\002\
\251\000\000\000\000\000\251\000\000\000\000\000\000\000\251\000\
\251\000\000\000\251\000\246\002\000\000\251\000\251\000\000\000\
\246\002\000\000\000\000\000\000\251\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\246\002\251\000\
\251\000\000\000\251\000\251\000\251\000\251\000\246\002\242\000\
\000\000\000\000\242\000\251\000\246\002\251\000\000\000\242\000\
\251\000\242\000\246\002\251\000\242\000\242\000\000\000\251\000\
\242\000\000\000\242\000\242\000\242\000\000\000\246\002\242\000\
\242\000\242\000\246\002\242\000\242\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\242\000\000\000\246\002\242\000\
\242\000\246\002\000\000\000\000\000\000\243\000\000\000\000\000\
\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\242\000\000\000\000\000\242\000\000\000\
\000\000\000\000\242\000\242\000\000\000\242\000\000\000\000\000\
\242\000\242\000\000\000\000\000\000\000\000\000\000\000\242\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\242\000\242\000\000\000\242\000\242\000\242\000\
\242\000\000\000\000\000\000\000\000\000\000\000\242\000\215\000\
\242\000\000\000\215\000\242\000\000\000\000\000\242\000\215\000\
\000\000\215\000\242\000\000\000\215\000\215\000\000\000\000\000\
\215\000\000\000\215\000\215\000\215\000\000\000\000\000\215\000\
\215\000\215\000\000\000\215\000\215\000\103\000\000\000\000\000\
\000\000\000\000\000\000\000\000\215\000\000\000\000\000\215\000\
\215\000\000\000\103\000\000\000\000\000\247\000\000\000\000\000\
\215\000\000\000\000\000\000\000\000\000\000\000\000\000\103\000\
\000\000\103\000\103\000\215\000\000\000\000\000\215\000\000\000\
\000\000\000\000\215\000\215\000\000\000\215\000\103\000\000\000\
\215\000\215\000\000\000\098\000\000\000\000\000\000\000\215\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\103\000\215\000\215\000\000\000\215\000\215\000\215\000\
\215\000\103\000\244\000\000\000\000\000\244\000\215\000\103\000\
\215\000\000\000\244\000\215\000\244\000\103\000\215\000\244\000\
\244\000\000\000\215\000\244\000\000\000\244\000\244\000\244\000\
\000\000\103\000\244\000\244\000\244\000\103\000\244\000\244\000\
\246\002\000\000\000\000\000\000\000\000\000\000\000\000\244\000\
\000\000\103\000\244\000\244\000\103\000\246\002\000\000\000\000\
\245\000\000\000\000\000\244\000\000\000\000\000\000\000\000\000\
\000\000\000\000\246\002\000\000\246\002\246\002\244\000\000\000\
\000\000\244\000\000\000\000\000\000\000\244\000\244\000\000\000\
\244\000\246\002\000\000\244\000\244\000\000\000\102\000\000\000\
\000\000\000\000\244\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\246\002\244\000\244\000\000\000\
\244\000\244\000\244\000\244\000\246\002\243\000\000\000\000\000\
\243\000\244\000\246\002\244\000\000\000\243\000\244\000\243\000\
\246\002\244\000\243\000\243\000\000\000\244\000\243\000\000\000\
\243\000\243\000\243\000\000\000\246\002\243\000\243\000\243\000\
\246\002\243\000\243\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\243\000\000\000\246\002\243\000\243\000\246\002\
\000\000\000\000\000\000\246\000\000\000\000\000\243\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\243\000\000\000\000\000\243\000\000\000\000\000\000\000\
\243\000\243\000\000\000\243\000\000\000\000\000\243\000\243\000\
\000\000\000\000\000\000\000\000\000\000\243\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\243\000\243\000\000\000\243\000\243\000\243\000\243\000\000\000\
\000\000\000\000\000\000\000\000\243\000\247\000\243\000\000\000\
\247\000\243\000\000\000\000\000\243\000\247\000\000\000\247\000\
\243\000\000\000\247\000\247\000\000\000\000\000\247\000\000\000\
\247\000\247\000\247\000\000\000\000\000\247\000\247\000\247\000\
\000\000\247\000\247\000\098\000\000\000\000\000\000\000\000\000\
\000\000\000\000\247\000\000\000\000\000\247\000\247\000\000\000\
\098\000\000\000\000\000\250\000\000\000\000\000\247\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\000\000\000\098\000\
\098\000\247\000\000\000\000\000\247\000\000\000\000\000\000\000\
\247\000\247\000\000\000\247\000\098\000\000\000\247\000\247\000\
\000\000\000\000\000\000\000\000\000\000\247\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\098\000\
\247\000\247\000\000\000\247\000\247\000\247\000\247\000\098\000\
\245\000\000\000\000\000\245\000\247\000\098\000\247\000\000\000\
\245\000\247\000\245\000\098\000\247\000\245\000\245\000\000\000\
\247\000\245\000\000\000\245\000\245\000\245\000\000\000\098\000\
\245\000\245\000\245\000\098\000\245\000\245\000\102\000\000\000\
\000\000\000\000\000\000\000\000\000\000\245\000\000\000\098\000\
\245\000\245\000\098\000\102\000\000\000\000\000\248\000\000\000\
\000\000\245\000\000\000\000\000\000\000\000\000\000\000\000\000\
\102\000\000\000\102\000\102\000\245\000\000\000\000\000\245\000\
\000\000\000\000\000\000\245\000\245\000\000\000\245\000\102\000\
\000\000\245\000\245\000\000\000\000\000\000\000\000\000\000\000\
\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\102\000\245\000\245\000\000\000\245\000\245\000\
\245\000\245\000\102\000\246\000\000\000\000\000\246\000\245\000\
\102\000\245\000\000\000\246\000\245\000\246\000\102\000\245\000\
\246\000\246\000\000\000\245\000\246\000\000\000\246\000\246\000\
\246\000\000\000\102\000\246\000\246\000\246\000\102\000\246\000\
\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\246\000\000\000\102\000\246\000\246\000\102\000\000\000\000\000\
\000\000\249\000\000\000\000\000\246\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\000\
\000\000\000\000\246\000\000\000\000\000\000\000\246\000\246\000\
\000\000\246\000\000\000\000\000\246\000\246\000\000\000\000\000\
\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\246\000\246\000\
\000\000\246\000\246\000\246\000\246\000\000\000\000\000\000\000\
\000\000\000\000\246\000\250\000\246\000\000\000\250\000\246\000\
\000\000\000\000\246\000\250\000\000\000\250\000\246\000\000\000\
\250\000\250\000\000\000\000\000\250\000\000\000\250\000\250\000\
\250\000\000\000\000\000\250\000\250\000\250\000\000\000\250\000\
\250\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\250\000\000\000\000\000\250\000\250\000\000\000\000\000\000\000\
\000\000\179\000\000\000\000\000\250\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\250\000\
\000\000\000\000\250\000\000\000\000\000\000\000\250\000\250\000\
\000\000\250\000\000\000\000\000\250\000\250\000\000\000\000\000\
\000\000\000\000\000\000\250\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\250\000\250\000\
\000\000\250\000\250\000\250\000\250\000\000\000\248\000\000\000\
\000\000\248\000\250\000\000\000\250\000\000\000\248\000\250\000\
\248\000\000\000\250\000\248\000\248\000\000\000\250\000\248\000\
\000\000\248\000\248\000\248\000\000\000\000\000\248\000\248\000\
\248\000\000\000\248\000\248\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\248\000\000\000\000\000\248\000\248\000\
\000\000\000\000\000\000\000\000\216\000\000\000\000\000\248\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\248\000\000\000\000\000\248\000\000\000\000\000\
\000\000\248\000\248\000\000\000\248\000\000\000\000\000\248\000\
\248\000\000\000\000\000\000\000\000\000\000\000\248\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\248\000\248\000\000\000\248\000\248\000\248\000\248\000\
\000\000\249\000\000\000\000\000\249\000\248\000\000\000\248\000\
\000\000\249\000\248\000\249\000\000\000\248\000\249\000\249\000\
\000\000\248\000\249\000\000\000\249\000\249\000\249\000\000\000\
\000\000\249\000\249\000\249\000\000\000\249\000\249\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\249\000\000\000\
\000\000\249\000\249\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\249\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\002\000\000\000\000\249\000\000\000\000\000\
\249\000\000\000\000\000\000\000\249\000\249\000\000\000\249\000\
\000\000\000\000\249\000\249\000\000\000\000\000\000\000\000\000\
\000\000\249\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\249\000\249\000\000\000\249\000\
\249\000\249\000\249\000\000\000\000\000\000\000\000\000\000\000\
\249\000\179\000\249\000\000\000\179\000\249\000\000\000\000\000\
\249\000\179\000\000\000\179\000\249\000\000\000\179\000\179\000\
\000\000\000\000\179\000\000\000\179\000\179\000\179\000\000\000\
\000\000\179\000\179\000\179\000\000\000\179\000\179\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\179\000\000\000\
\000\000\179\000\179\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\179\000\000\000\000\000\030\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\179\000\000\000\000\000\
\179\000\000\000\000\000\000\000\179\000\179\000\000\000\179\000\
\000\000\000\000\179\000\179\000\000\000\000\000\000\000\000\000\
\000\000\179\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\179\000\179\000\000\000\179\000\
\000\000\179\000\179\000\000\000\216\000\000\000\000\000\216\000\
\179\000\000\000\179\000\000\000\216\000\179\000\216\000\000\000\
\179\000\216\000\216\000\000\000\179\000\216\000\000\000\216\000\
\216\000\216\000\000\000\000\000\216\000\000\000\216\000\000\000\
\216\000\216\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\216\000\000\000\000\000\216\000\216\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\216\000\000\000\000\000\
\063\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\216\000\000\000\000\000\216\000\000\000\000\000\000\000\216\000\
\216\000\000\000\216\000\000\000\000\000\216\000\216\000\000\000\
\000\000\000\000\000\000\000\000\216\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216\000\
\216\000\000\000\216\000\216\000\216\000\216\000\000\000\000\000\
\000\000\000\000\000\000\216\000\000\000\216\000\000\000\000\000\
\216\000\000\000\029\002\216\000\029\002\029\002\029\002\216\000\
\000\000\000\000\029\002\000\000\000\000\000\000\000\000\029\002\
\000\000\000\000\000\000\029\002\029\002\029\002\000\000\000\000\
\000\000\000\000\000\000\000\000\029\002\029\002\029\002\029\002\
\000\000\000\000\006\005\000\000\000\000\000\000\029\002\000\000\
\000\000\000\000\029\002\029\002\000\000\064\002\000\000\000\000\
\000\000\098\005\029\002\029\002\000\000\000\000\000\000\000\000\
\234\001\000\000\000\000\000\000\000\000\000\000\029\002\000\000\
\000\000\029\002\000\000\000\000\029\002\029\002\029\002\000\000\
\029\002\000\000\000\000\029\002\029\002\000\000\000\000\000\000\
\000\000\008\005\029\002\134\000\135\000\030\000\000\000\136\000\
\000\000\000\000\137\000\009\005\000\000\029\002\029\002\000\000\
\029\002\029\002\029\002\000\000\000\000\030\002\029\002\030\002\
\030\002\030\002\000\000\139\000\000\000\030\002\029\002\000\000\
\000\000\029\002\030\002\140\000\141\000\029\002\030\002\030\002\
\030\002\000\000\000\000\142\000\000\000\000\000\000\000\030\002\
\030\002\030\002\030\002\000\000\237\001\000\000\000\000\011\005\
\144\000\030\002\000\000\000\000\000\000\030\002\030\002\000\000\
\028\002\000\000\000\000\000\000\000\000\030\002\030\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\002\000\000\000\000\030\002\000\000\000\000\030\002\
\030\002\030\002\000\000\030\002\000\000\000\000\030\002\030\002\
\000\000\000\000\000\000\000\000\133\000\030\002\134\000\135\000\
\030\000\000\000\136\000\000\000\000\000\137\000\138\000\000\000\
\030\002\030\002\000\000\030\002\030\002\030\002\000\000\170\001\
\063\002\030\002\063\002\063\002\063\002\000\000\139\000\000\000\
\063\002\030\002\000\000\000\000\030\002\063\002\140\000\141\000\
\030\002\063\002\063\002\063\002\000\000\000\000\142\000\000\000\
\000\000\000\000\063\002\063\002\063\002\063\002\000\000\000\000\
\000\000\000\000\143\000\144\000\063\002\000\000\000\000\000\000\
\000\000\063\002\000\000\026\002\000\000\000\000\000\000\000\000\
\063\002\063\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\002\000\000\000\000\063\002\
\000\000\000\000\063\002\063\002\063\002\000\000\063\002\000\000\
\000\000\063\002\063\002\000\000\000\000\000\000\000\000\000\000\
\063\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\002\063\002\000\000\063\002\063\002\
\063\002\063\002\000\000\000\000\000\000\064\002\000\000\064\002\
\064\002\064\002\000\000\000\000\063\002\064\002\000\000\063\002\
\000\000\000\000\064\002\063\002\000\000\000\000\064\002\064\002\
\064\002\000\000\000\000\000\000\000\000\000\000\000\000\064\002\
\064\002\064\002\064\002\000\000\000\000\000\000\000\000\000\000\
\000\000\064\002\000\000\000\000\000\000\000\000\064\002\000\000\
\027\002\000\000\000\000\000\000\000\000\064\002\064\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\002\000\000\000\000\064\002\000\000\000\000\064\002\
\064\002\064\002\000\000\064\002\000\000\000\000\064\002\064\002\
\000\000\000\000\000\000\000\000\133\000\064\002\134\000\135\000\
\030\000\000\000\136\000\000\000\000\000\137\000\138\000\000\000\
\064\002\064\002\000\000\064\002\064\002\064\002\064\002\000\000\
\028\002\000\000\028\002\028\002\028\002\000\000\139\000\000\000\
\028\002\064\002\000\000\000\000\064\002\028\002\140\000\113\003\
\064\002\028\002\028\002\028\002\000\000\000\000\142\000\000\000\
\000\000\000\000\028\002\028\002\028\002\028\002\000\000\000\000\
\000\000\235\005\143\000\144\000\028\002\000\000\000\000\000\000\
\000\000\028\002\000\000\025\002\000\000\000\000\000\000\000\000\
\028\002\028\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\002\000\000\000\000\028\002\
\000\000\000\000\028\002\028\002\028\002\000\000\028\002\000\000\
\000\000\000\000\028\002\000\000\000\000\000\000\000\000\133\000\
\028\002\134\000\135\000\030\000\000\000\136\000\000\000\000\000\
\137\000\138\000\000\000\028\002\028\002\000\000\028\002\028\002\
\028\002\028\002\000\000\026\002\000\000\026\002\026\002\026\002\
\000\000\139\000\000\000\026\002\028\002\000\000\000\000\028\002\
\026\002\140\000\141\000\028\002\026\002\026\002\026\002\000\000\
\000\000\142\000\000\000\000\000\000\000\026\002\026\002\026\002\
\026\002\000\000\000\000\000\000\000\000\143\000\144\000\026\002\
\000\000\000\000\000\000\000\000\026\002\000\000\022\002\000\000\
\000\000\000\000\000\000\026\002\026\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\002\
\000\000\000\000\026\002\000\000\000\000\026\002\026\002\026\002\
\000\000\026\002\000\000\000\000\000\000\026\002\000\000\000\000\
\000\000\000\000\000\000\026\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\002\026\002\
\000\000\026\002\026\002\026\002\026\002\000\000\000\000\000\000\
\027\002\032\000\027\002\027\002\027\002\000\000\000\000\026\002\
\027\002\000\000\026\002\000\000\000\000\027\002\026\002\000\000\
\000\000\027\002\027\002\027\002\000\000\000\000\000\000\000\000\
\000\000\000\000\027\002\027\002\027\002\027\002\000\000\000\000\
\000\000\000\000\000\000\000\000\027\002\000\000\000\000\000\000\
\000\000\027\002\000\000\000\000\000\000\000\000\000\000\000\000\
\027\002\027\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\002\027\002\000\000\000\000\027\002\
\000\000\000\000\027\002\027\002\027\002\000\000\027\002\000\000\
\000\000\000\000\027\002\000\000\000\000\000\000\000\000\000\000\
\027\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\002\027\002\000\000\027\002\027\002\
\027\002\027\002\000\000\025\002\000\000\025\002\025\002\025\002\
\000\000\000\000\000\000\025\002\027\002\000\000\000\000\027\002\
\025\002\000\000\000\000\027\002\025\002\025\002\025\002\000\000\
\000\000\010\002\000\000\000\000\000\000\025\002\025\002\025\002\
\025\002\000\000\000\000\000\000\000\000\000\000\000\000\025\002\
\000\000\000\000\000\000\000\000\025\002\000\000\000\000\000\000\
\000\000\000\000\000\000\025\002\025\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\002\
\000\000\000\000\025\002\000\000\000\000\025\002\025\002\025\002\
\000\000\025\002\000\000\000\000\000\000\025\002\000\000\000\000\
\000\000\000\000\000\000\025\002\008\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\002\025\002\
\000\000\025\002\025\002\025\002\025\002\000\000\022\002\000\000\
\022\002\022\002\000\000\000\000\000\000\000\000\022\002\025\002\
\000\000\000\000\025\002\022\002\000\000\000\000\025\002\022\002\
\022\002\022\002\000\000\000\000\000\000\000\000\000\000\000\000\
\022\002\022\002\022\002\022\002\000\000\000\000\000\000\000\000\
\000\000\000\000\022\002\000\000\000\000\000\000\169\000\022\002\
\000\000\000\000\000\000\000\000\000\000\000\000\022\002\022\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\022\002\000\000\032\000\022\002\000\000\000\000\
\022\002\022\002\022\002\000\000\022\002\000\000\032\000\032\000\
\022\002\000\000\032\000\000\000\000\000\000\000\022\002\000\000\
\000\000\000\000\000\000\032\000\032\000\032\000\032\000\083\000\
\000\000\022\002\022\002\000\000\022\002\022\002\022\002\022\002\
\000\000\032\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\002\000\000\000\000\022\002\000\000\000\000\
\000\000\022\002\000\000\011\002\000\000\032\000\011\002\000\000\
\032\000\000\000\000\000\000\000\032\000\032\000\000\000\000\000\
\011\002\000\000\032\000\032\000\011\002\000\000\000\000\000\000\
\000\000\032\000\000\000\000\000\000\000\011\002\011\002\011\002\
\011\002\000\000\000\000\000\000\000\000\032\000\000\000\032\000\
\000\000\032\000\032\000\000\000\011\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\032\000\000\000\000\000\000\000\032\000\000\000\000\000\011\002\
\000\000\010\002\011\002\000\000\010\002\011\002\011\002\011\002\
\000\000\000\000\000\000\000\000\011\002\011\002\010\002\000\000\
\000\000\000\000\010\002\011\002\000\000\000\000\000\000\000\000\
\248\002\000\000\000\000\010\002\010\002\010\002\010\002\011\002\
\000\000\011\002\000\000\011\002\011\002\000\000\000\000\000\000\
\000\000\000\000\010\002\000\000\000\000\000\000\000\000\011\002\
\000\000\000\000\011\002\000\000\000\000\000\000\011\002\000\000\
\000\000\000\000\000\000\000\000\008\002\010\002\000\000\008\002\
\010\002\000\000\000\000\010\002\010\002\010\002\000\000\000\000\
\000\000\008\002\010\002\010\002\000\000\008\002\000\000\000\000\
\000\000\010\002\000\000\000\000\000\000\000\000\008\002\008\002\
\008\002\008\002\000\000\000\000\000\000\010\002\000\000\010\002\
\000\000\010\002\010\002\000\000\000\000\008\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\002\000\000\000\000\
\010\002\000\000\000\000\000\000\010\002\000\000\169\000\000\000\
\008\002\169\000\000\000\008\002\000\000\000\000\008\002\008\002\
\008\002\000\000\000\000\169\000\000\000\008\002\008\002\169\000\
\125\000\169\000\000\000\000\000\008\002\000\000\000\000\000\000\
\169\000\169\000\169\000\169\000\000\000\000\000\000\000\000\000\
\008\002\000\000\008\002\000\000\008\002\008\002\000\000\169\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\
\008\002\000\000\083\000\008\002\000\000\000\000\000\000\008\002\
\000\000\000\000\169\000\000\000\083\000\169\000\000\000\000\000\
\083\000\169\000\169\000\000\000\000\000\000\000\000\000\169\000\
\169\000\083\000\083\000\083\000\083\000\000\000\169\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\000\000\169\000\000\000\169\000\000\000\169\000\169\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\117\000\
\000\000\000\000\169\000\083\000\000\000\169\000\083\000\000\000\
\000\000\169\000\083\000\083\000\000\000\000\000\000\000\000\000\
\083\000\083\000\037\005\000\000\134\000\135\000\030\000\083\000\
\136\000\000\000\038\005\039\005\138\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\000\000\000\083\000\000\000\083\000\
\083\000\040\005\000\000\000\000\041\005\000\000\000\000\000\000\
\000\000\000\000\000\000\083\000\042\005\141\000\083\000\000\000\
\248\002\000\000\083\000\248\002\142\000\248\002\248\002\248\002\
\248\002\000\000\000\000\248\002\248\002\248\002\000\000\000\000\
\143\000\144\000\000\000\248\002\000\000\000\000\000\000\248\002\
\000\000\000\000\248\002\000\000\248\002\248\002\248\002\248\002\
\248\002\248\002\248\002\248\002\248\002\000\000\000\000\248\002\
\248\002\248\002\000\000\000\000\000\000\000\000\000\000\000\000\
\248\002\248\002\248\002\248\002\248\002\248\002\248\002\248\002\
\248\002\248\002\248\002\248\002\248\002\248\002\143\001\248\002\
\248\002\248\002\000\000\248\002\248\002\248\002\248\002\248\002\
\248\002\000\000\248\002\248\002\000\000\248\002\248\002\000\000\
\248\002\248\002\000\000\000\000\248\002\248\002\000\000\248\002\
\248\002\248\002\248\002\248\002\248\002\248\002\000\000\248\002\
\248\002\248\002\000\000\248\002\000\000\248\002\248\002\000\000\
\248\002\000\000\248\002\248\002\248\002\248\002\248\002\248\002\
\248\002\000\000\248\002\000\000\000\000\009\000\010\000\011\000\
\000\000\000\000\000\000\012\000\013\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\000\000\000\000\000\000\000\000\022\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\025\000\026\000\027\000\028\000\
\029\000\000\000\000\000\030\000\031\000\000\000\133\002\032\000\
\033\000\034\000\000\000\000\000\035\000\036\000\000\000\037\000\
\038\000\000\000\039\000\000\000\000\000\000\000\040\000\000\000\
\041\000\143\000\000\000\000\000\042\000\043\000\000\000\044\000\
\000\000\000\000\000\000\000\000\009\000\010\000\011\000\000\000\
\126\000\118\000\012\000\013\000\014\000\046\000\000\000\000\000\
\000\000\000\000\047\000\048\000\049\000\050\000\051\000\052\000\
\000\000\000\000\053\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\000\000\000\000\000\000\000\000\022\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\025\000\026\000\027\000\028\000\029\000\
\000\000\000\000\030\000\031\000\000\000\000\000\032\000\033\000\
\034\000\000\000\000\000\035\000\036\000\000\000\037\000\038\000\
\000\000\039\000\000\000\000\000\000\000\040\000\000\000\041\000\
\000\000\000\000\147\001\042\000\043\000\133\000\044\000\134\000\
\135\000\030\000\000\000\136\000\000\000\000\000\137\000\138\000\
\118\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\047\000\048\000\049\000\050\000\051\000\052\000\139\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\140\000\
\113\003\000\000\000\000\009\000\010\000\011\000\000\000\142\000\
\000\000\012\000\013\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\143\000\144\000\000\000\000\000\000\000\
\000\000\000\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\000\000\000\000\000\000\239\001\022\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\025\000\026\000\027\000\028\000\029\000\000\000\
\000\000\030\000\031\000\000\000\000\000\032\000\033\000\034\000\
\000\000\000\000\035\000\036\000\000\000\037\000\038\000\000\000\
\039\000\000\000\000\000\000\000\040\000\000\000\041\000\000\000\
\000\000\000\000\042\000\043\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\153\000\118\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\047\000\048\000\049\000\050\000\051\000\052\000\133\002\000\000\
\053\000\000\000\133\002\000\000\133\002\000\000\133\002\000\000\
\133\002\000\000\133\002\000\000\133\002\133\002\000\000\133\002\
\133\002\143\000\000\000\000\000\143\000\000\000\000\000\000\000\
\000\000\133\002\133\002\000\000\133\002\133\002\143\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\152\002\000\000\000\000\143\000\000\000\143\000\143\000\000\000\
\133\002\133\002\133\002\133\002\000\000\133\002\133\002\000\000\
\000\000\133\002\143\000\000\000\000\000\000\000\133\002\133\002\
\133\002\000\000\000\000\000\000\000\000\133\002\000\000\133\002\
\000\000\000\000\000\000\000\000\000\000\143\000\000\000\133\002\
\000\000\000\000\133\002\000\000\143\000\143\000\000\000\133\002\
\000\000\133\002\133\002\143\000\133\002\133\002\000\000\133\002\
\000\000\143\000\081\000\133\002\000\000\000\000\133\002\000\000\
\133\002\000\000\147\001\133\002\133\002\143\000\147\001\133\002\
\147\001\143\000\147\001\000\000\147\001\000\000\147\001\000\000\
\147\001\147\001\000\000\147\001\147\001\143\000\000\000\000\000\
\143\000\000\000\000\000\000\000\000\000\147\001\000\000\000\000\
\147\001\147\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\147\001\147\001\000\000\147\001\
\236\001\147\001\147\001\000\000\000\000\147\001\000\000\000\000\
\000\000\000\000\147\001\147\001\147\001\000\000\000\000\000\000\
\000\000\147\001\000\000\147\001\239\001\000\000\000\000\239\001\
\000\000\000\000\000\000\147\001\239\001\000\000\147\001\000\000\
\000\000\239\001\000\000\147\001\000\000\147\001\147\001\239\001\
\147\001\147\001\000\000\147\001\000\000\000\000\239\001\147\001\
\239\001\239\001\147\001\000\000\147\001\000\000\000\000\147\001\
\147\001\000\000\080\000\147\001\239\001\239\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\153\000\000\000\
\239\001\153\000\000\000\239\001\000\000\000\000\239\001\239\001\
\239\001\000\000\000\000\153\000\000\000\067\002\239\001\000\000\
\000\000\000\000\000\000\058\002\239\001\058\002\058\002\058\002\
\153\000\058\002\153\000\153\000\058\002\058\002\000\000\000\000\
\239\001\000\000\000\000\000\000\239\001\239\001\000\000\153\000\
\067\002\000\000\000\000\000\000\000\000\058\002\000\000\000\000\
\239\001\000\000\154\000\239\001\000\000\058\002\058\002\000\000\
\152\002\000\000\153\000\152\002\000\000\058\002\049\002\000\000\
\153\000\153\000\153\000\000\000\000\000\152\002\000\000\049\002\
\153\000\058\002\058\002\000\000\000\000\000\000\153\000\000\000\
\000\000\000\000\152\002\000\000\152\002\152\002\000\000\000\000\
\000\000\000\000\153\000\000\000\000\000\000\000\153\000\049\002\
\000\000\152\002\049\002\000\000\000\000\000\000\000\000\201\001\
\000\000\000\000\153\000\049\002\000\000\153\000\000\000\000\000\
\000\000\000\000\081\000\000\000\152\002\081\000\000\000\000\000\
\143\002\000\000\152\002\152\002\152\002\000\000\000\000\081\000\
\000\000\143\002\152\002\081\000\000\000\000\000\000\000\000\000\
\152\002\000\000\000\000\000\000\081\000\081\000\081\000\081\000\
\000\000\000\000\000\000\000\000\152\002\000\000\000\000\000\000\
\152\002\143\002\000\000\081\000\143\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\152\002\143\002\000\000\152\002\
\000\000\000\000\000\000\000\000\000\000\000\000\081\000\000\000\
\236\001\081\000\248\002\236\001\000\000\081\000\081\000\000\000\
\236\001\000\000\000\000\000\000\081\000\236\001\000\000\000\000\
\000\000\000\000\081\000\236\001\000\000\000\000\000\000\000\000\
\000\000\000\000\236\001\000\000\236\001\236\001\081\000\000\000\
\081\000\000\000\081\000\081\000\000\000\000\000\000\000\000\000\
\000\000\236\001\000\000\000\000\000\000\000\000\081\000\000\000\
\000\000\081\000\000\000\000\000\000\000\000\000\000\000\201\001\
\000\000\000\000\080\000\000\000\236\001\080\000\000\000\236\001\
\070\000\000\000\236\001\236\001\236\001\000\000\000\000\080\000\
\000\000\000\000\236\001\080\000\000\000\000\000\000\000\000\000\
\236\001\000\000\000\000\000\000\080\000\080\000\080\000\080\000\
\000\000\000\000\000\000\000\000\236\001\000\000\000\000\000\000\
\236\001\236\001\000\000\080\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\236\001\000\000\000\000\236\001\
\000\000\000\000\000\000\000\000\000\000\202\001\080\000\000\000\
\000\000\080\000\000\000\000\000\000\000\080\000\080\000\000\000\
\000\000\000\000\154\000\000\000\080\000\154\000\000\000\000\000\
\000\000\000\000\080\000\000\000\000\000\000\000\000\000\154\000\
\000\000\000\000\000\000\000\000\000\000\154\000\080\000\000\000\
\080\000\000\000\080\000\080\000\154\000\000\000\154\000\154\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\000\000\000\
\000\000\080\000\204\001\154\000\000\000\000\000\000\000\000\000\
\000\000\000\000\154\000\000\000\000\000\000\000\000\000\201\001\
\000\000\000\000\201\001\000\000\000\000\000\000\154\000\000\000\
\000\000\154\000\000\000\000\000\201\001\154\000\154\000\000\000\
\154\000\000\000\201\001\000\000\154\000\000\000\000\000\000\000\
\000\000\201\001\154\000\201\001\201\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\154\000\203\001\
\201\001\000\000\154\000\154\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\154\000\000\000\
\000\000\154\000\000\000\201\001\000\000\000\000\201\001\000\000\
\000\000\000\000\201\001\201\001\000\000\000\000\000\000\000\000\
\000\000\201\001\248\002\000\000\000\000\248\002\000\000\201\001\
\000\000\000\000\248\002\000\000\000\000\142\002\000\000\248\002\
\000\000\000\000\000\000\201\001\205\001\248\002\000\000\201\001\
\201\001\000\000\000\000\000\000\248\002\236\001\248\002\248\002\
\000\000\000\000\000\000\201\001\000\000\000\000\201\001\000\000\
\000\000\000\000\000\000\248\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\201\001\
\000\000\000\000\201\001\000\000\000\000\000\000\248\002\000\000\
\070\000\248\002\000\000\070\000\201\001\248\002\248\002\000\000\
\000\000\000\000\201\001\000\000\248\002\070\000\000\000\000\000\
\000\000\201\001\248\002\201\001\201\001\000\000\000\000\000\000\
\000\000\000\000\070\000\000\000\070\000\070\000\248\002\000\000\
\201\001\000\000\248\002\248\002\000\000\209\001\000\000\000\000\
\070\000\070\000\000\000\000\000\000\000\000\000\248\002\000\000\
\000\000\248\002\000\000\201\001\000\000\202\001\201\001\000\000\
\202\001\000\000\201\001\201\001\070\000\000\000\000\000\070\000\
\000\000\201\001\202\001\070\000\070\000\000\000\000\000\201\001\
\202\001\000\000\070\000\000\000\000\000\000\000\000\000\202\001\
\070\000\202\001\202\001\201\001\000\000\000\000\236\001\201\001\
\201\001\000\000\000\000\000\000\070\000\000\000\202\001\248\002\
\070\000\070\000\000\000\201\001\000\000\000\000\201\001\000\000\
\000\000\000\000\204\001\000\000\070\000\204\001\000\000\070\000\
\000\000\202\001\000\000\000\000\202\001\000\000\000\000\204\001\
\202\001\202\001\000\000\000\000\000\000\204\001\000\000\202\001\
\000\000\000\000\000\000\000\000\204\001\202\001\204\001\204\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\248\002\202\001\000\000\204\001\000\000\202\001\202\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\203\001\
\000\000\202\001\203\001\000\000\202\001\000\000\204\001\000\000\
\000\000\204\001\000\000\000\000\203\001\204\001\204\001\000\000\
\000\000\000\000\203\001\000\000\204\001\000\000\000\000\000\000\
\000\000\203\001\204\001\203\001\203\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\204\001\000\000\
\203\001\117\000\204\001\204\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\205\001\000\000\204\001\205\001\
\000\000\204\001\000\000\203\001\000\000\236\001\203\001\000\000\
\000\000\205\001\203\001\203\001\000\000\236\001\000\000\205\001\
\000\000\203\001\236\001\000\000\000\000\000\000\205\001\203\001\
\205\001\205\001\000\000\000\000\000\000\246\002\000\000\236\001\
\000\000\236\001\236\001\203\001\000\000\205\001\118\000\203\001\
\203\001\000\000\000\000\000\000\000\000\000\000\236\001\000\000\
\000\000\000\000\000\000\203\001\000\000\000\000\203\001\000\000\
\205\001\000\000\000\000\205\001\000\000\000\000\000\000\205\001\
\205\001\236\001\000\000\000\000\236\001\000\000\205\001\236\001\
\236\001\236\001\000\000\000\000\205\001\209\001\000\000\236\001\
\209\001\000\000\000\000\000\000\000\000\236\001\000\000\192\001\
\205\001\000\000\209\001\000\000\205\001\205\001\000\000\000\000\
\209\001\236\001\000\000\000\000\000\000\236\001\236\001\209\001\
\205\001\209\001\209\001\205\001\000\000\000\000\000\000\000\000\
\000\000\236\001\000\000\000\000\236\001\000\000\209\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\236\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\248\002\
\000\000\209\001\000\000\236\001\209\001\000\000\000\000\248\002\
\209\001\209\001\000\000\000\000\248\002\000\000\000\000\209\001\
\236\001\000\000\236\001\236\001\000\000\209\001\000\000\000\000\
\236\001\248\002\000\000\248\002\248\002\000\000\000\000\236\001\
\000\000\209\001\000\000\000\000\000\000\209\001\209\001\000\000\
\248\002\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\248\002\209\001\236\001\000\000\209\001\236\001\057\000\000\000\
\236\001\236\001\236\001\248\002\000\000\248\002\248\002\000\000\
\236\001\000\000\248\002\248\002\000\000\000\000\236\001\000\000\
\000\000\248\002\248\002\000\000\248\002\248\002\000\000\248\002\
\000\000\000\000\236\001\000\000\000\000\000\000\236\001\236\001\
\000\000\248\002\000\000\248\002\000\000\000\000\000\000\248\002\
\248\002\000\000\236\001\000\000\000\000\236\001\000\000\000\000\
\000\000\117\000\000\000\248\002\248\002\000\000\248\002\248\002\
\000\000\000\000\000\000\248\002\248\002\000\000\117\000\000\000\
\000\000\000\000\248\002\000\000\000\000\000\000\061\000\000\000\
\248\002\000\000\000\000\117\000\000\000\117\000\117\000\000\000\
\000\000\000\000\000\000\000\000\248\002\000\000\000\000\000\000\
\248\002\248\002\117\000\064\000\000\000\246\002\000\000\000\000\
\246\002\000\000\000\000\000\000\248\002\000\000\118\000\248\002\
\000\000\000\000\246\002\000\000\000\000\117\000\000\000\000\000\
\117\000\000\000\000\000\118\000\117\000\117\000\000\000\246\002\
\000\000\246\002\246\002\117\000\000\000\000\000\000\000\000\000\
\118\000\117\000\118\000\118\000\000\000\000\000\246\002\246\002\
\000\000\000\000\000\000\000\000\000\000\117\000\000\000\118\000\
\000\000\117\000\117\000\000\000\000\000\000\000\000\000\192\001\
\000\000\246\002\000\000\000\000\246\002\117\000\000\000\000\000\
\117\000\246\002\118\000\000\000\192\001\118\000\000\000\246\002\
\000\000\118\000\118\000\000\000\000\000\246\002\000\000\000\000\
\118\000\192\001\000\000\192\001\192\001\000\000\118\000\000\000\
\108\000\246\002\000\000\000\000\000\000\246\002\246\002\000\000\
\192\001\000\000\118\000\000\000\000\000\000\000\118\000\118\000\
\000\000\246\002\000\000\000\000\246\002\000\000\000\000\000\000\
\000\000\000\000\118\000\192\001\000\000\118\000\192\001\000\000\
\000\000\000\000\192\001\192\001\000\000\000\000\000\000\000\000\
\236\001\192\001\000\000\000\000\000\000\000\000\000\000\192\001\
\236\001\000\000\000\000\000\000\000\000\236\001\000\000\000\000\
\000\000\000\000\000\000\192\001\000\000\054\000\000\000\192\001\
\192\001\000\000\236\001\000\000\236\001\236\001\057\000\000\000\
\000\000\000\000\054\000\192\001\000\000\000\000\192\001\000\000\
\000\000\236\001\000\000\057\000\000\000\000\000\000\000\054\000\
\000\000\054\000\054\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\057\000\057\000\236\001\000\000\054\000\000\000\
\000\000\000\000\236\001\236\001\236\001\000\000\000\000\057\000\
\000\000\000\000\236\001\000\000\000\000\000\000\000\000\000\000\
\236\001\054\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\054\000\057\000\000\000\236\001\057\000\000\000\054\000\
\236\001\000\000\057\000\000\000\000\000\054\000\061\000\000\000\
\057\000\000\000\000\000\000\000\236\001\000\000\057\000\236\001\
\000\000\054\000\000\000\061\000\000\000\054\000\054\000\000\000\
\000\000\000\000\057\000\064\000\000\000\000\000\057\000\057\000\
\061\000\054\000\061\000\061\000\054\000\000\000\000\000\000\000\
\064\000\000\000\057\000\000\000\000\000\057\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\064\000\000\000\064\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\000\000\064\000\061\000\000\000\246\002\
\000\000\000\000\061\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\000\000\000\000\246\002\000\000\061\000\064\000\
\000\000\000\000\064\000\000\000\000\000\000\000\000\000\064\000\
\000\000\246\002\061\000\246\002\246\002\064\000\061\000\061\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\246\002\000\000\061\000\000\000\000\000\061\000\000\000\064\000\
\108\000\000\000\000\000\064\000\064\000\000\000\000\000\000\000\
\000\000\000\000\000\000\246\002\000\000\108\000\246\002\064\000\
\000\000\000\000\064\000\246\002\000\000\000\000\000\000\000\000\
\000\000\246\002\108\000\000\000\108\000\108\000\000\000\246\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\108\000\000\000\246\002\000\000\000\000\000\000\246\002\
\246\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\246\002\108\000\000\000\246\002\000\000\
\000\000\000\000\000\000\108\000\108\000\000\000\000\000\241\002\
\000\000\000\000\108\000\000\000\241\002\241\002\241\002\241\002\
\108\000\000\000\241\002\241\002\241\002\241\002\000\000\000\000\
\000\000\000\000\241\002\000\000\108\000\000\000\000\000\000\000\
\108\000\241\002\000\000\241\002\241\002\241\002\241\002\241\002\
\241\002\241\002\241\002\000\000\108\000\000\000\241\002\108\000\
\241\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\241\002\241\002\241\002\241\002\241\002\241\002\241\002\241\002\
\000\000\000\000\241\002\241\002\000\000\000\000\241\002\241\002\
\241\002\241\002\000\000\241\002\241\002\241\002\241\002\241\002\
\000\000\241\002\000\000\000\000\241\002\241\002\000\000\241\002\
\241\002\000\000\000\000\241\002\241\002\000\000\241\002\000\000\
\241\002\241\002\000\000\241\002\241\002\000\000\000\000\241\002\
\241\002\000\000\241\002\000\000\241\002\241\002\000\000\241\002\
\000\000\241\002\241\002\241\002\241\002\241\002\241\002\241\002\
\248\002\241\002\000\000\000\000\000\000\248\002\248\002\248\002\
\248\002\000\000\000\000\248\002\248\002\000\000\000\000\000\000\
\000\000\000\000\000\000\248\002\000\000\000\000\000\000\000\000\
\000\000\000\000\248\002\000\000\248\002\000\000\248\002\248\002\
\248\002\248\002\248\002\248\002\000\000\000\000\000\000\248\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\248\002\248\002\248\002\248\002\248\002\248\002\248\002\
\248\002\000\000\000\000\248\002\248\002\000\000\000\000\248\002\
\248\002\248\002\000\000\000\000\248\002\248\002\248\002\248\002\
\248\002\000\000\248\002\000\000\000\000\248\002\248\002\000\000\
\000\000\248\002\000\000\000\000\248\002\248\002\000\000\248\002\
\000\000\248\002\248\002\000\000\000\000\248\002\000\000\000\000\
\000\000\248\002\000\000\248\002\000\000\248\002\248\002\000\000\
\248\002\000\000\248\002\248\002\000\000\248\002\248\002\248\002\
\248\002\000\000\248\002\022\001\023\001\024\001\000\000\000\000\
\009\000\010\000\025\001\000\000\026\001\000\000\012\000\013\000\
\000\000\000\000\027\001\028\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\001\000\000\
\000\000\017\000\018\000\019\000\020\000\021\000\000\000\030\001\
\000\000\000\000\022\000\000\000\000\000\031\001\032\001\033\001\
\034\001\035\001\036\001\000\000\000\000\024\000\000\000\025\000\
\026\000\027\000\028\000\029\000\000\000\000\000\030\000\000\000\
\037\001\000\000\032\000\033\000\034\000\000\000\000\000\000\000\
\036\000\000\000\038\001\039\001\000\000\040\001\000\000\000\000\
\000\000\040\000\000\000\000\000\000\000\041\001\042\001\043\001\
\044\001\045\001\046\001\000\000\000\000\000\000\000\000\000\000\
\000\000\047\001\000\000\000\000\000\000\048\001\000\000\049\001\
\046\000\000\000\000\000\000\000\000\000\047\000\048\000\000\000\
\050\000\051\000\022\001\023\001\024\001\053\000\000\000\009\000\
\010\000\025\001\000\000\026\001\000\000\012\000\013\000\000\000\
\000\000\066\003\028\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\001\000\000\000\000\
\017\000\018\000\019\000\020\000\021\000\000\000\030\001\000\000\
\000\000\022\000\000\000\000\000\031\001\032\001\033\001\034\001\
\035\001\036\001\000\000\000\000\024\000\000\000\025\000\026\000\
\027\000\028\000\029\000\000\000\000\000\030\000\000\000\037\001\
\000\000\032\000\033\000\034\000\000\000\000\000\000\000\036\000\
\000\000\038\001\039\001\000\000\067\003\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\041\001\042\001\043\001\044\001\
\045\001\046\001\000\000\000\000\000\000\000\000\000\000\248\002\
\068\003\248\002\248\002\248\002\048\001\248\002\049\001\046\000\
\248\002\248\002\000\000\000\000\047\000\048\000\000\000\050\000\
\051\000\248\002\000\000\000\000\053\000\000\000\248\002\248\002\
\248\002\248\002\000\000\000\000\248\002\248\002\248\002\000\000\
\000\000\248\002\248\002\000\000\000\000\000\000\000\000\000\000\
\000\000\248\002\000\000\248\002\000\000\248\002\248\002\248\002\
\248\002\248\002\248\002\248\002\000\000\248\002\248\002\000\000\
\248\002\000\000\248\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\248\002\000\000\248\002\248\002\248\002\
\248\002\248\002\000\000\000\000\248\002\248\002\000\000\000\000\
\248\002\248\002\248\002\000\000\000\000\248\002\248\002\000\000\
\248\002\248\002\000\000\248\002\000\000\000\000\000\000\248\002\
\000\000\248\002\000\000\000\000\000\000\248\002\248\002\112\002\
\248\002\000\000\000\000\000\000\186\002\186\002\186\002\000\000\
\000\000\248\002\186\002\186\002\000\000\000\000\248\002\000\000\
\000\000\000\000\000\000\248\002\248\002\248\002\248\002\248\002\
\248\002\000\000\000\000\248\002\000\000\186\002\186\002\186\002\
\186\002\186\002\000\000\000\000\000\000\000\000\186\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\186\002\000\000\186\002\186\002\186\002\186\002\186\002\
\000\000\000\000\186\002\000\000\000\000\000\000\186\002\186\002\
\186\002\000\000\000\000\000\000\186\002\000\000\186\002\186\002\
\000\000\000\000\000\000\000\000\000\000\186\002\000\000\000\000\
\000\000\000\000\000\000\186\002\186\002\113\002\186\002\000\000\
\000\000\000\000\187\002\187\002\187\002\112\002\000\000\000\000\
\187\002\187\002\000\000\000\000\186\002\000\000\000\000\000\000\
\000\000\186\002\186\002\000\000\186\002\186\002\000\000\000\000\
\000\000\186\002\000\000\187\002\187\002\187\002\187\002\187\002\
\000\000\000\000\000\000\000\000\187\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\187\002\
\000\000\187\002\187\002\187\002\187\002\187\002\000\000\000\000\
\187\002\000\000\000\000\000\000\187\002\187\002\187\002\000\000\
\000\000\000\000\187\002\000\000\187\002\187\002\000\000\000\000\
\000\000\000\000\000\000\187\002\000\000\000\000\000\000\000\000\
\000\000\187\002\187\002\110\002\187\002\000\000\000\000\000\000\
\188\002\188\002\188\002\113\002\000\000\000\000\188\002\188\002\
\000\000\000\000\187\002\000\000\000\000\000\000\000\000\187\002\
\187\002\000\000\187\002\187\002\000\000\000\000\000\000\187\002\
\000\000\188\002\188\002\188\002\188\002\188\002\000\000\000\000\
\000\000\000\000\188\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\188\002\000\000\188\002\
\188\002\188\002\188\002\188\002\000\000\000\000\188\002\000\000\
\000\000\000\000\188\002\188\002\188\002\000\000\000\000\000\000\
\188\002\000\000\188\002\188\002\000\000\000\000\000\000\000\000\
\000\000\188\002\000\000\000\000\000\000\000\000\000\000\188\002\
\188\002\111\002\188\002\000\000\000\000\000\000\189\002\189\002\
\189\002\110\002\000\000\000\000\189\002\189\002\000\000\000\000\
\188\002\000\000\000\000\000\000\000\000\188\002\188\002\000\000\
\188\002\188\002\000\000\000\000\000\000\188\002\000\000\189\002\
\189\002\189\002\189\002\189\002\000\000\000\000\000\000\000\000\
\189\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\189\002\000\000\189\002\189\002\189\002\
\189\002\189\002\000\000\000\000\189\002\000\000\000\000\000\000\
\189\002\189\002\189\002\000\000\000\000\000\000\189\002\000\000\
\189\002\189\002\000\000\000\000\000\000\000\000\000\000\189\002\
\000\000\000\000\000\000\000\000\000\000\189\002\189\002\000\000\
\189\002\000\000\000\000\000\000\000\000\000\000\000\000\111\002\
\220\000\221\000\222\000\000\000\000\000\000\000\189\002\000\000\
\223\000\000\000\224\000\189\002\189\002\000\000\189\002\189\002\
\225\000\226\000\227\000\189\002\000\000\228\000\229\000\230\000\
\000\000\231\000\232\000\233\000\000\000\234\000\235\000\236\000\
\237\000\000\000\000\000\000\000\238\000\239\000\240\000\000\000\
\000\000\000\000\000\000\000\000\000\000\241\000\242\000\000\000\
\000\000\243\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\244\000\245\000\000\000\000\000\
\000\000\031\002\246\000\247\000\000\000\031\002\000\000\248\000\
\249\000\250\000\251\000\252\000\253\000\254\000\000\000\255\000\
\000\000\000\000\031\002\000\000\031\002\000\001\000\000\014\002\
\000\000\000\000\001\001\031\002\031\002\000\000\000\000\000\000\
\002\001\000\000\000\000\003\001\004\001\031\002\005\001\006\001\
\007\001\008\001\009\001\000\000\010\001\011\001\012\001\013\001\
\014\001\031\002\031\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\002\000\000\000\000\
\000\000\031\002\000\000\031\002\031\002\031\002\000\000\031\002\
\000\000\000\000\031\002\000\000\000\000\000\000\022\001\023\001\
\024\001\000\000\000\000\000\000\010\000\200\001\000\000\026\001\
\000\000\000\000\013\000\014\002\031\002\027\001\028\001\000\000\
\031\002\000\000\031\002\000\000\000\000\031\002\000\000\000\000\
\000\000\029\001\158\000\000\000\017\000\018\000\031\002\000\000\
\031\002\000\000\030\001\000\000\000\000\000\000\000\000\000\000\
\031\001\032\001\033\001\034\001\035\001\036\001\000\000\000\000\
\024\000\000\000\159\000\160\000\000\000\161\000\162\000\000\000\
\000\000\030\000\000\000\037\001\000\000\000\000\163\000\164\000\
\000\000\000\000\000\000\000\000\000\000\201\001\202\001\000\000\
\203\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\001\042\001\204\001\205\001\045\001\206\001\000\000\000\000\
\000\000\000\000\000\000\000\000\047\001\000\000\000\000\167\000\
\048\001\000\000\049\001\046\000\000\000\000\000\000\000\000\000\
\047\000\000\000\227\002\050\000\168\000\022\001\023\001\024\001\
\000\000\000\000\000\000\010\000\200\001\000\000\026\001\000\000\
\000\000\013\000\000\000\000\000\027\001\028\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\001\158\000\000\000\017\000\018\000\000\000\000\000\000\000\
\000\000\030\001\000\000\000\000\000\000\000\000\000\000\031\001\
\032\001\033\001\034\001\035\001\036\001\000\000\000\000\024\000\
\000\000\159\000\160\000\000\000\161\000\162\000\000\000\000\000\
\030\000\000\000\037\001\000\000\000\000\163\000\164\000\000\000\
\000\000\000\000\000\000\000\000\201\001\202\001\000\000\203\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\001\
\042\001\204\001\205\001\045\001\206\001\000\000\000\000\000\000\
\000\000\000\000\000\000\047\001\000\000\000\000\167\000\048\001\
\000\000\049\001\046\000\000\000\000\000\000\000\000\000\047\000\
\000\000\176\003\050\000\168\000\022\001\023\001\024\001\000\000\
\000\000\000\000\010\000\200\001\000\000\026\001\000\000\000\000\
\013\000\000\000\000\000\027\001\028\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\001\
\158\000\000\000\017\000\018\000\000\000\000\000\000\000\000\000\
\030\001\000\000\000\000\000\000\000\000\000\000\031\001\032\001\
\033\001\034\001\035\001\036\001\000\000\000\000\024\000\000\000\
\159\000\160\000\000\000\161\000\162\000\000\000\000\000\030\000\
\000\000\037\001\000\000\000\000\163\000\164\000\000\000\000\000\
\000\000\000\000\000\000\201\001\202\001\000\000\203\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\001\042\001\
\204\001\205\001\045\001\206\001\000\000\000\000\000\000\000\000\
\000\000\000\000\047\001\000\000\000\000\167\000\048\001\000\000\
\049\001\046\000\000\000\000\000\000\000\000\000\047\000\000\000\
\127\004\050\000\168\000\022\001\023\001\024\001\000\000\000\000\
\000\000\010\000\200\001\000\000\026\001\000\000\000\000\013\000\
\000\000\000\000\027\001\028\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\001\158\000\
\000\000\017\000\018\000\000\000\000\000\000\000\000\000\030\001\
\000\000\000\000\000\000\000\000\000\000\031\001\032\001\033\001\
\034\001\035\001\036\001\000\000\000\000\024\000\000\000\159\000\
\160\000\000\000\161\000\162\000\000\000\000\000\030\000\000\000\
\037\001\000\000\000\000\163\000\164\000\000\000\000\000\000\000\
\000\000\000\000\201\001\202\001\000\000\203\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\001\042\001\204\001\
\205\001\045\001\206\001\000\000\000\000\144\003\000\000\000\000\
\000\000\047\001\000\000\010\000\167\000\048\001\000\000\049\001\
\046\000\013\000\000\000\000\000\066\003\047\000\000\000\000\000\
\050\000\168\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\158\000\000\000\017\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\159\000\160\000\000\000\161\000\162\000\000\000\000\000\
\030\000\000\000\192\002\000\000\000\000\163\000\164\000\000\000\
\010\000\000\000\000\000\000\000\165\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\166\000\000\000\000\000\000\000\000\000\158\000\000\000\
\017\000\018\000\000\000\145\003\000\000\000\000\167\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\050\000\168\000\024\000\000\000\159\000\160\000\
\000\000\161\000\162\000\000\000\000\000\030\000\000\000\194\002\
\000\000\000\000\163\000\164\000\000\000\010\000\000\000\000\000\
\000\000\165\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\166\000\000\000\
\000\000\000\000\000\000\158\000\000\000\017\000\018\000\000\000\
\000\000\000\000\000\000\167\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\050\000\
\168\000\024\000\000\000\159\000\160\000\000\000\161\000\162\000\
\000\000\000\000\030\000\000\000\134\004\000\000\000\000\163\000\
\164\000\000\000\010\000\000\000\000\000\000\000\165\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\166\000\000\000\000\000\000\000\000\000\
\158\000\000\000\017\000\018\000\000\000\000\000\000\000\000\000\
\167\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\047\000\000\000\000\000\050\000\168\000\024\000\000\000\
\159\000\160\000\000\000\161\000\162\000\000\000\000\000\030\000\
\000\000\136\004\000\000\000\000\163\000\164\000\000\000\010\000\
\000\000\000\000\000\000\165\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\166\000\000\000\000\000\000\000\000\000\158\000\000\000\017\000\
\018\000\000\000\000\000\000\000\000\000\167\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\050\000\168\000\024\000\000\000\159\000\160\000\000\000\
\161\000\162\000\000\000\000\000\030\000\000\000\138\004\000\000\
\000\000\163\000\164\000\000\000\010\000\000\000\000\000\000\000\
\165\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\166\000\000\000\000\000\
\000\000\000\000\158\000\000\000\017\000\018\000\000\000\000\000\
\000\000\000\000\167\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\050\000\168\000\
\024\000\000\000\159\000\160\000\000\000\161\000\162\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\163\000\164\000\
\009\000\010\000\011\000\000\000\000\000\165\000\012\000\013\000\
\014\000\023\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\166\000\000\000\000\000\000\000\000\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\000\000\167\000\
\000\000\000\000\022\000\046\000\023\000\000\000\000\000\000\000\
\047\000\000\000\000\000\050\000\168\000\024\000\000\000\025\000\
\026\000\027\000\028\000\029\000\000\000\000\000\030\000\031\000\
\000\000\000\000\032\000\033\000\034\000\000\000\000\000\035\000\
\036\000\000\000\037\000\038\000\000\000\039\000\000\000\000\000\
\000\000\040\000\000\000\041\000\000\000\000\000\000\000\042\000\
\043\000\000\000\044\000\000\000\024\002\000\000\000\000\009\000\
\010\000\011\000\000\000\045\000\000\000\012\000\013\000\014\000\
\046\000\000\000\000\000\000\000\000\000\047\000\048\000\049\000\
\050\000\051\000\052\000\000\000\000\000\053\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\000\000\
\000\000\022\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\025\000\026\000\
\027\000\028\000\029\000\000\000\000\000\030\000\031\000\000\000\
\000\000\032\000\033\000\034\000\000\000\000\000\035\000\036\000\
\000\000\037\000\038\000\000\000\039\000\000\000\000\000\000\000\
\040\000\000\000\041\000\000\000\000\000\000\000\042\000\043\000\
\000\000\044\000\000\000\000\000\000\000\009\000\010\000\011\000\
\000\000\000\000\045\000\012\000\013\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\047\000\048\000\049\000\050\000\
\051\000\052\000\000\000\000\000\053\000\000\000\017\000\018\000\
\019\000\020\000\021\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\025\000\026\000\027\000\028\000\
\029\000\000\000\000\000\030\000\000\000\000\000\000\000\032\000\
\033\000\034\000\000\000\000\000\000\000\036\000\000\000\037\000\
\038\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\042\000\043\000\000\000\044\000\
\000\000\000\000\000\000\000\000\215\000\009\000\010\000\011\000\
\000\000\000\000\218\000\012\000\013\000\046\000\000\000\000\000\
\000\000\000\000\047\000\048\000\000\000\050\000\051\000\000\000\
\000\000\000\000\053\000\000\000\000\000\000\000\017\000\018\000\
\019\000\020\000\021\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\025\000\026\000\027\000\028\000\
\029\000\000\000\000\000\030\000\000\000\000\000\000\000\032\000\
\033\000\034\000\000\000\000\000\000\000\036\000\000\000\037\000\
\038\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\042\000\043\000\000\000\044\000\
\000\000\000\000\009\000\010\000\011\000\000\000\000\000\000\000\
\012\000\013\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\047\000\048\000\000\000\050\000\051\000\231\001\
\000\000\000\000\053\000\017\000\018\000\019\000\020\000\021\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\025\000\026\000\027\000\028\000\029\000\000\000\000\000\
\030\000\000\000\000\000\000\000\032\000\033\000\034\000\000\000\
\000\000\000\000\036\000\000\000\037\000\038\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\042\000\043\000\000\000\044\000\000\000\000\000\009\000\
\010\000\011\000\000\000\000\000\000\000\012\000\013\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\047\000\
\048\000\000\000\050\000\051\000\000\000\000\000\000\000\053\000\
\017\000\018\000\019\000\020\000\021\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\025\000\026\000\
\027\000\028\000\029\000\000\000\000\000\030\000\000\000\000\000\
\000\000\032\000\033\000\034\000\000\000\000\000\000\000\036\000\
\000\000\037\000\038\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\090\002\042\000\043\000\
\000\000\044\000\000\000\000\000\009\000\010\000\011\000\000\000\
\000\000\000\000\012\000\013\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\047\000\048\000\000\000\050\000\
\051\000\000\000\000\000\000\000\053\000\017\000\018\000\019\000\
\020\000\021\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\025\000\026\000\027\000\028\000\029\000\
\000\000\000\000\030\000\000\000\000\000\000\000\032\000\033\000\
\034\000\000\000\000\000\000\000\036\000\000\000\037\000\038\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\042\000\043\000\000\000\044\000\000\000\
\000\000\000\000\000\000\062\003\009\000\010\000\011\000\000\000\
\000\000\064\003\012\000\013\000\046\000\000\000\000\000\000\000\
\000\000\047\000\048\000\000\000\050\000\051\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\017\000\018\000\019\000\
\020\000\021\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\025\000\026\000\027\000\028\000\029\000\
\000\000\000\000\030\000\000\000\000\000\000\000\032\000\033\000\
\034\000\000\000\000\000\000\000\036\000\000\000\037\000\038\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\042\000\043\000\000\000\044\000\000\000\
\000\000\000\000\009\000\010\000\011\000\000\000\000\000\000\000\
\012\000\013\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\047\000\048\000\107\004\050\000\051\000\000\000\000\000\
\000\000\053\000\000\000\017\000\018\000\019\000\020\000\021\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\025\000\026\000\027\000\028\000\029\000\000\000\000\000\
\030\000\000\000\000\000\000\000\032\000\033\000\034\000\000\000\
\000\000\000\000\036\000\000\000\037\000\038\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\042\000\043\000\000\000\044\000\000\000\000\000\250\002\
\250\002\250\002\000\000\000\000\000\000\250\002\250\002\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\047\000\
\048\000\000\000\050\000\051\000\250\002\000\000\000\000\053\000\
\250\002\250\002\250\002\250\002\250\002\000\000\000\000\000\000\
\000\000\250\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\250\002\000\000\250\002\250\002\
\250\002\250\002\250\002\000\000\000\000\250\002\000\000\000\000\
\000\000\250\002\250\002\250\002\000\000\000\000\000\000\250\002\
\000\000\250\002\250\002\000\000\000\000\000\000\000\000\000\000\
\250\002\000\000\000\000\000\000\000\000\000\000\250\002\250\002\
\000\000\250\002\000\000\000\000\009\000\010\000\011\000\000\000\
\000\000\000\000\012\000\013\000\000\000\000\000\000\000\250\002\
\000\000\000\000\000\000\000\000\250\002\250\002\000\000\250\002\
\250\002\000\000\000\000\000\000\250\002\017\000\018\000\019\000\
\020\000\021\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\025\000\026\000\027\000\028\000\029\000\
\000\000\000\000\030\000\000\000\000\000\000\000\032\000\033\000\
\034\000\000\000\000\000\000\000\036\000\000\000\037\000\038\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\042\000\043\000\000\000\044\000\000\000\
\000\000\250\002\250\002\250\002\000\000\000\000\000\000\250\002\
\250\002\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\047\000\048\000\000\000\050\000\051\000\000\000\000\000\
\000\000\053\000\250\002\250\002\250\002\250\002\250\002\000\000\
\000\000\000\000\000\000\250\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\250\002\000\000\
\250\002\250\002\250\002\250\002\250\002\000\000\000\000\250\002\
\000\000\000\000\000\000\250\002\250\002\250\002\000\000\000\000\
\000\000\250\002\000\000\250\002\250\002\000\000\000\000\000\000\
\000\000\000\000\250\002\000\000\000\000\000\000\000\000\000\000\
\250\002\250\002\000\000\250\002\000\000\000\000\248\002\248\002\
\248\002\000\000\000\000\000\000\248\002\248\002\000\000\000\000\
\000\000\250\002\000\000\000\000\000\000\000\000\250\002\250\002\
\000\000\250\002\250\002\000\000\000\000\000\000\250\002\248\002\
\248\002\248\002\248\002\248\002\000\000\000\000\000\000\000\000\
\248\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\248\002\000\000\248\002\248\002\248\002\
\248\002\248\002\000\000\000\000\248\002\000\000\000\000\000\000\
\248\002\248\002\248\002\000\000\000\000\010\000\248\002\000\000\
\248\002\248\002\000\000\013\000\000\000\199\003\000\000\248\002\
\009\002\000\000\000\000\000\000\000\000\248\002\248\002\000\000\
\248\002\000\000\200\003\000\000\000\000\017\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\248\002\000\000\
\000\000\000\000\000\000\248\002\248\002\000\000\248\002\248\002\
\000\000\024\000\243\001\248\002\160\000\000\000\161\000\162\000\
\000\000\000\000\030\000\000\000\000\000\000\000\000\000\163\000\
\201\003\000\000\010\000\000\000\000\000\000\000\165\000\000\000\
\013\000\000\000\008\002\000\000\000\000\009\002\000\000\000\000\
\245\001\000\000\000\000\166\000\000\000\000\000\000\000\200\003\
\246\001\000\000\017\000\018\000\000\000\010\000\000\000\000\000\
\167\000\000\000\000\000\013\000\046\000\237\002\000\000\247\001\
\000\000\047\000\000\000\000\000\050\000\168\000\024\000\243\001\
\000\000\160\000\000\000\161\000\162\000\017\000\018\000\030\000\
\000\000\000\000\000\000\000\000\163\000\201\003\000\000\000\000\
\000\000\000\000\000\000\165\000\000\000\000\000\000\000\000\000\
\000\000\024\000\243\001\000\000\160\000\245\001\161\000\162\000\
\166\000\000\000\030\000\000\000\000\000\246\001\000\000\163\000\
\238\002\000\000\000\000\000\000\000\000\167\000\165\000\000\000\
\239\002\046\000\000\000\000\000\247\001\000\000\047\000\000\000\
\245\001\050\000\168\000\166\000\000\000\000\000\010\000\000\000\
\246\001\000\000\000\000\000\000\013\000\000\000\204\005\000\000\
\167\000\000\000\000\000\000\000\046\000\000\000\000\000\247\001\
\000\000\047\000\000\000\200\003\050\000\168\000\017\000\018\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\243\001\000\000\160\000\000\000\161\000\
\162\000\017\000\018\000\030\000\000\000\000\000\000\000\000\000\
\163\000\201\003\000\000\000\000\000\000\000\000\000\000\165\000\
\000\000\000\000\000\000\000\000\000\000\024\000\243\001\000\000\
\160\000\245\001\161\000\162\000\166\000\000\000\030\000\000\000\
\000\000\246\001\000\000\163\000\244\001\000\000\250\002\000\000\
\000\000\167\000\165\000\000\000\250\002\046\000\000\000\000\000\
\247\001\000\000\047\000\000\000\245\001\050\000\168\000\166\000\
\000\000\000\000\000\000\000\000\246\001\000\000\250\002\250\002\
\000\000\000\000\000\000\000\000\167\000\000\000\000\000\000\000\
\046\000\000\000\000\000\247\001\000\000\047\000\000\000\000\000\
\050\000\168\000\250\002\250\002\000\000\250\002\000\000\250\002\
\250\002\000\000\000\000\250\002\000\000\000\000\000\000\000\000\
\250\002\250\002\000\000\000\000\010\000\000\000\000\000\250\002\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\250\002\000\000\000\000\250\002\000\000\000\000\000\000\
\000\000\250\002\158\000\000\000\017\000\018\000\000\000\000\000\
\000\000\250\002\000\000\000\000\000\000\250\002\000\000\000\000\
\250\002\000\000\250\002\000\000\000\000\250\002\250\002\000\000\
\024\000\000\000\159\000\160\000\000\000\161\000\162\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\163\000\164\000\
\000\000\000\000\000\000\010\000\000\000\165\000\000\000\198\001\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\166\000\000\000\000\000\000\000\000\000\000\000\
\000\000\158\000\215\000\017\000\018\000\000\000\000\000\167\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\050\000\168\000\000\000\000\000\024\000\
\000\000\159\000\160\000\000\000\161\000\162\000\000\000\000\000\
\030\000\000\000\000\000\000\000\000\000\163\000\164\000\000\000\
\010\000\000\000\000\000\000\000\165\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\011\000\000\000\
\000\000\166\000\012\000\013\000\000\000\000\000\158\000\000\000\
\017\000\018\000\000\000\000\000\000\000\000\000\167\000\000\000\
\000\000\000\000\046\000\000\000\000\000\017\000\018\000\047\000\
\000\000\000\000\050\000\168\000\024\000\000\000\159\000\160\000\
\000\000\161\000\162\000\000\000\000\000\030\000\000\000\000\000\
\000\000\024\000\163\000\164\000\026\000\027\000\028\000\029\000\
\000\000\165\000\030\000\000\000\250\002\000\000\250\002\163\000\
\034\000\000\000\250\002\000\000\000\000\000\000\166\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\143\003\000\000\
\000\000\000\000\250\002\167\000\250\002\250\002\044\000\046\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\050\000\
\168\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\250\002\047\000\250\002\250\002\050\000\250\002\250\002\000\000\
\000\000\250\002\000\000\000\000\000\000\000\000\250\002\250\002\
\000\000\010\000\000\000\000\000\000\000\250\002\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\250\002\000\000\000\000\000\000\000\000\158\000\
\000\000\017\000\018\000\000\000\000\000\000\000\000\000\250\002\
\000\000\000\000\000\000\250\002\000\000\000\000\000\000\000\000\
\250\002\000\000\000\000\250\002\250\002\024\000\000\000\159\000\
\160\000\000\000\161\000\162\000\000\000\000\000\030\000\000\000\
\000\000\000\000\000\000\163\000\164\000\000\000\250\002\000\000\
\000\000\000\000\165\000\000\000\250\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\166\000\
\000\000\000\000\000\000\000\000\250\002\000\000\250\002\250\002\
\000\000\250\002\000\000\000\000\167\000\000\000\000\000\250\002\
\046\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\050\000\168\000\250\002\000\000\250\002\250\002\000\000\250\002\
\250\002\250\002\250\002\250\002\000\000\000\000\000\000\000\000\
\250\002\250\002\000\000\000\000\000\000\000\000\000\000\250\002\
\000\000\000\000\000\000\000\000\000\000\250\002\000\000\250\002\
\250\002\000\000\250\002\250\002\250\002\000\000\250\002\000\000\
\000\000\000\000\000\000\250\002\250\002\000\000\182\002\000\000\
\000\000\250\002\250\002\000\000\182\002\250\002\000\000\000\000\
\000\000\000\000\250\002\000\000\000\000\250\002\250\002\250\002\
\000\000\000\000\000\000\000\000\182\002\000\000\182\002\182\002\
\250\002\010\000\000\000\000\000\250\002\000\000\000\000\013\000\
\250\002\000\000\000\000\000\000\000\000\250\002\000\000\000\000\
\250\002\250\002\182\002\000\000\182\002\182\002\000\000\182\002\
\182\002\017\000\018\000\182\002\000\000\000\000\000\000\000\000\
\182\002\182\002\000\000\000\000\000\000\000\000\000\000\182\002\
\000\000\000\000\000\000\000\000\000\000\024\000\000\000\159\000\
\160\000\000\000\161\000\162\000\182\002\000\000\030\000\000\000\
\000\000\000\000\000\000\163\000\164\000\000\000\163\002\000\000\
\000\000\182\002\165\000\000\000\163\002\182\002\000\000\000\000\
\000\000\000\000\182\002\000\000\000\000\182\002\182\002\166\000\
\000\000\000\000\000\000\000\000\000\000\000\000\163\002\163\002\
\000\000\248\002\000\000\000\000\167\000\000\000\000\000\248\002\
\046\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\050\000\168\000\163\002\000\000\163\002\163\002\000\000\163\002\
\163\002\248\002\248\002\163\002\000\000\000\000\000\000\000\000\
\163\002\163\002\000\000\000\000\000\000\000\000\000\000\163\002\
\000\000\000\000\000\000\000\000\000\000\248\002\000\000\248\002\
\248\002\000\000\248\002\248\002\163\002\000\000\248\002\000\000\
\000\000\000\000\000\000\248\002\248\002\000\000\010\000\000\000\
\000\000\163\002\248\002\000\000\013\000\163\002\000\000\000\000\
\000\000\000\000\163\002\000\000\000\000\163\002\163\002\248\002\
\000\000\000\000\000\000\000\000\000\000\000\000\017\000\018\000\
\000\000\250\002\000\000\000\000\248\002\000\000\000\000\250\002\
\248\002\000\000\000\000\000\000\000\000\248\002\000\000\000\000\
\248\002\248\002\024\000\000\000\000\000\160\000\000\000\161\000\
\162\000\250\002\250\002\030\000\000\000\000\000\000\000\000\000\
\163\000\164\000\000\000\000\000\000\000\000\000\000\000\165\000\
\000\000\000\000\000\000\000\000\000\000\250\002\000\000\000\000\
\250\002\000\000\250\002\250\002\166\000\000\000\250\002\000\000\
\000\000\000\000\000\000\250\002\250\002\000\000\000\000\000\000\
\000\000\167\000\250\002\000\000\000\000\046\000\010\000\011\000\
\000\000\000\000\047\000\012\000\013\000\050\000\168\000\250\002\
\000\000\000\000\000\000\000\000\000\000\000\000\108\001\000\000\
\000\000\000\000\000\000\000\000\250\002\000\000\017\000\018\000\
\250\002\000\000\000\000\000\000\000\000\250\002\000\000\000\000\
\250\002\250\002\000\000\000\000\000\000\000\000\000\000\109\001\
\000\000\000\000\024\000\110\001\000\000\026\000\027\000\028\000\
\029\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\
\163\000\034\000\010\000\011\000\000\000\000\000\000\000\012\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\111\001\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\112\001\017\000\018\000\000\000\000\000\000\000\000\000\
\000\000\113\001\114\001\000\000\000\000\046\000\000\000\000\000\
\115\001\000\000\047\000\000\000\000\000\050\000\024\000\110\001\
\000\000\026\000\027\000\028\000\029\000\000\000\000\000\030\000\
\000\000\000\000\000\000\000\000\163\000\034\000\010\000\011\000\
\000\000\000\000\000\000\012\000\013\000\250\002\250\002\000\000\
\000\000\000\000\250\002\250\002\000\000\111\001\000\000\000\000\
\000\000\000\000\000\000\044\000\000\000\112\001\017\000\018\000\
\000\000\000\000\000\000\000\000\000\000\250\002\250\002\000\000\
\000\000\046\000\000\000\000\000\115\001\000\000\047\000\000\000\
\000\000\050\000\024\000\000\000\000\000\026\000\027\000\028\000\
\029\000\250\002\000\000\030\000\250\002\250\002\250\002\250\002\
\203\000\034\000\250\002\000\000\006\005\000\000\000\000\250\002\
\250\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\005\000\000\000\000\000\000\044\000\
\000\000\000\000\234\001\000\000\000\000\000\000\250\002\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\047\000\000\000\250\002\050\000\000\000\000\000\
\000\000\250\002\000\000\008\005\250\002\134\000\135\000\030\000\
\000\000\136\000\000\000\000\000\137\000\009\005\000\000\000\000\
\000\000\236\004\073\001\074\001\000\000\000\000\000\000\000\000\
\000\000\000\000\075\001\000\000\000\000\139\000\000\000\237\004\
\076\001\077\001\238\004\078\001\010\005\140\000\141\000\000\000\
\000\000\000\000\000\000\000\000\079\001\142\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\080\001\237\001\000\000\
\000\000\011\005\144\000\081\001\082\001\083\001\084\001\085\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\086\001\000\000\
\215\002\000\000\000\000\183\000\000\000\000\000\000\000\000\000\
\087\001\088\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\001\090\001\091\001\092\001\093\001\
\000\000\022\001\023\001\024\001\000\000\000\000\000\000\239\004\
\200\001\000\000\026\001\000\000\000\000\095\001\000\000\000\000\
\133\000\028\001\134\000\135\000\030\000\000\000\136\000\000\000\
\000\000\137\000\138\000\000\000\029\001\000\000\000\000\000\000\
\000\000\000\000\000\000\170\001\000\000\030\001\000\000\000\000\
\000\000\000\000\139\000\031\001\032\001\033\001\034\001\035\001\
\036\001\000\000\140\000\141\000\000\000\000\000\000\000\216\002\
\000\000\000\000\142\000\000\000\000\000\000\000\037\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\143\000\144\000\
\221\002\202\001\000\000\222\002\000\000\000\000\000\000\000\000\
\020\004\073\001\074\001\041\001\042\001\223\002\205\001\045\001\
\206\001\075\001\000\000\000\000\000\000\000\000\000\000\076\001\
\077\001\000\000\078\001\048\001\000\000\049\001\000\000\000\000\
\000\000\000\000\000\000\079\001\000\000\000\000\000\000\000\000\
\022\004\073\001\074\001\000\000\080\001\000\000\000\000\000\000\
\000\000\075\001\081\001\082\001\083\001\084\001\085\001\076\001\
\077\001\000\000\078\001\000\000\000\000\000\000\012\002\000\000\
\012\002\012\002\012\002\079\001\012\002\086\001\000\000\012\002\
\012\002\000\000\183\000\000\000\080\001\000\000\000\000\087\001\
\088\001\000\000\081\001\082\001\083\001\084\001\085\001\000\000\
\012\002\000\000\089\001\090\001\091\001\092\001\093\001\000\000\
\012\002\012\002\000\000\021\004\000\000\086\001\000\000\000\000\
\012\002\000\000\183\000\000\000\095\001\000\000\000\000\087\001\
\088\001\000\000\000\000\000\000\012\002\012\002\024\004\073\001\
\074\001\000\000\089\001\090\001\091\001\092\001\093\001\075\001\
\000\000\000\000\000\000\000\000\023\004\076\001\077\001\000\000\
\078\001\000\000\000\000\000\000\095\001\000\000\000\000\000\000\
\000\000\079\001\000\000\000\000\000\000\000\000\020\004\073\001\
\074\001\000\000\080\001\000\000\000\000\000\000\000\000\075\001\
\081\001\082\001\083\001\084\001\085\001\076\001\077\001\000\000\
\078\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\079\001\000\000\086\001\000\000\000\000\000\000\000\000\
\183\000\000\000\080\001\000\000\000\000\087\001\088\001\000\000\
\081\001\082\001\083\001\084\001\085\001\000\000\000\000\000\000\
\089\001\090\001\091\001\092\001\093\001\000\000\000\000\000\000\
\000\000\000\000\000\000\086\001\025\004\000\000\000\000\000\000\
\183\000\000\000\095\001\000\000\000\000\087\001\088\001\000\000\
\000\000\000\000\000\000\000\000\022\004\073\001\074\001\000\000\
\089\001\090\001\091\001\092\001\093\001\075\001\000\000\000\000\
\000\000\080\004\000\000\076\001\077\001\000\000\078\001\000\000\
\000\000\000\000\095\001\000\000\000\000\000\000\000\000\079\001\
\000\000\000\000\000\000\000\000\024\004\073\001\074\001\000\000\
\080\001\000\000\000\000\000\000\000\000\075\001\081\001\082\001\
\083\001\084\001\085\001\076\001\077\001\000\000\078\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\001\
\000\000\086\001\000\000\000\000\000\000\000\000\183\000\000\000\
\080\001\000\000\000\000\087\001\088\001\000\000\081\001\082\001\
\083\001\084\001\085\001\000\000\000\000\000\000\089\001\090\001\
\091\001\092\001\093\001\000\000\000\000\000\000\000\000\000\000\
\081\004\086\001\000\000\000\000\000\000\000\000\183\000\000\000\
\095\001\000\000\000\000\087\001\088\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\089\001\090\001\
\091\001\092\001\093\001\026\005\073\001\074\001\000\000\000\000\
\000\000\000\000\082\004\000\000\075\001\000\000\000\000\000\000\
\095\001\000\000\076\001\077\001\000\000\078\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\001\000\000\
\000\000\000\000\000\000\028\005\073\001\074\001\000\000\080\001\
\000\000\000\000\000\000\000\000\075\001\081\001\082\001\083\001\
\084\001\085\001\076\001\077\001\000\000\078\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\001\000\000\
\086\001\000\000\000\000\000\000\000\000\183\000\000\000\080\001\
\000\000\000\000\087\001\088\001\000\000\081\001\082\001\083\001\
\084\001\085\001\000\000\000\000\000\000\089\001\090\001\091\001\
\092\001\093\001\000\000\000\000\000\000\000\000\027\005\000\000\
\086\001\000\000\000\000\000\000\000\000\183\000\000\000\095\001\
\000\000\000\000\087\001\088\001\000\000\000\000\000\000\000\000\
\000\000\030\005\073\001\074\001\000\000\089\001\090\001\091\001\
\092\001\093\001\075\001\000\000\000\000\000\000\000\000\029\005\
\076\001\077\001\000\000\078\001\000\000\000\000\000\000\095\001\
\000\000\000\000\000\000\000\000\079\001\000\000\000\000\000\000\
\000\000\026\005\073\001\074\001\000\000\080\001\000\000\000\000\
\000\000\000\000\075\001\081\001\082\001\083\001\084\001\085\001\
\076\001\077\001\000\000\078\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\001\000\000\086\001\000\000\
\000\000\000\000\000\000\183\000\000\000\080\001\000\000\000\000\
\087\001\088\001\000\000\081\001\082\001\083\001\084\001\085\001\
\000\000\000\000\000\000\089\001\090\001\091\001\092\001\093\001\
\000\000\000\000\000\000\000\000\000\000\000\000\086\001\031\005\
\000\000\000\000\000\000\183\000\000\000\095\001\000\000\000\000\
\087\001\088\001\000\000\000\000\000\000\000\000\000\000\028\005\
\073\001\074\001\000\000\089\001\090\001\091\001\092\001\093\001\
\075\001\000\000\000\000\000\000\064\005\000\000\076\001\077\001\
\000\000\078\001\000\000\000\000\000\000\095\001\000\000\000\000\
\000\000\000\000\079\001\000\000\000\000\000\000\000\000\030\005\
\073\001\074\001\000\000\080\001\000\000\000\000\000\000\000\000\
\075\001\081\001\082\001\083\001\084\001\085\001\076\001\077\001\
\000\000\078\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\001\000\000\086\001\000\000\000\000\000\000\
\000\000\183\000\000\000\080\001\000\000\000\000\087\001\088\001\
\000\000\081\001\082\001\083\001\084\001\085\001\000\000\000\000\
\000\000\089\001\090\001\091\001\092\001\093\001\000\000\000\000\
\000\000\000\000\000\000\065\005\086\001\073\001\074\001\000\000\
\000\000\183\000\000\000\095\001\000\000\075\001\087\001\088\001\
\000\000\000\000\000\000\076\001\077\001\000\000\078\001\000\000\
\000\000\089\001\090\001\091\001\092\001\093\001\000\000\079\001\
\000\000\000\000\000\000\000\000\000\000\066\005\000\000\000\000\
\080\001\000\000\000\000\095\001\000\000\000\000\081\001\082\001\
\083\001\084\001\085\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\001\000\000\000\000\000\000\000\000\183\000\000\000\
\000\000\000\000\000\000\087\001\088\001\073\001\074\001\000\000\
\000\000\000\000\000\000\000\000\000\000\075\001\089\001\090\001\
\091\001\092\001\093\001\076\001\077\001\000\000\078\001\000\000\
\000\000\000\000\000\000\094\001\000\000\111\004\000\000\079\001\
\095\001\000\000\000\000\000\000\000\000\073\001\074\001\000\000\
\080\001\000\000\000\000\000\000\000\000\075\001\081\001\082\001\
\083\001\084\001\085\001\076\001\077\001\000\000\078\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\001\
\000\000\086\001\000\000\000\000\000\000\000\000\183\000\000\000\
\080\001\000\000\000\000\087\001\088\001\000\000\081\001\082\001\
\083\001\084\001\085\001\000\000\000\000\000\000\089\001\090\001\
\091\001\092\001\093\001\000\000\000\000\000\000\000\000\000\000\
\000\000\086\001\212\000\212\000\000\000\000\000\183\000\000\000\
\095\001\000\000\212\000\087\001\088\001\000\000\000\000\000\000\
\212\000\212\000\000\000\000\000\000\000\000\000\089\001\090\001\
\091\001\092\001\093\001\000\000\212\000\000\000\000\000\000\000\
\000\000\000\000\073\001\074\001\000\000\212\000\000\000\000\000\
\095\001\000\000\075\001\212\000\212\000\212\000\212\000\212\000\
\076\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\001\000\000\212\000\000\000\
\000\000\000\000\000\000\212\000\000\000\080\001\000\000\000\000\
\212\000\212\000\000\000\081\001\082\001\083\001\084\001\085\001\
\091\000\000\000\000\000\212\000\212\000\212\000\212\000\212\000\
\000\000\000\000\000\000\000\000\000\000\000\000\086\001\092\000\
\016\000\000\000\000\000\183\000\000\000\212\000\000\000\000\000\
\087\001\088\001\000\000\000\000\093\000\000\000\000\000\000\000\
\000\000\000\000\000\000\089\001\090\001\091\001\092\001\093\001\
\000\000\000\000\133\000\000\000\134\000\135\000\030\000\031\000\
\136\000\000\000\000\000\137\000\138\000\095\001\000\000\035\000\
\000\000\000\000\000\000\000\000\000\000\094\000\000\000\000\000\
\000\000\000\000\000\000\041\000\139\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\140\000\141\000\000\000\000\000\
\000\000\000\000\000\000\095\000\142\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\096\000\
\143\000\144\000\052\000"

let yycheck = "\005\000\
\002\000\007\000\002\000\198\000\206\000\198\000\195\000\133\000\
\127\001\133\000\133\000\010\000\136\000\020\001\233\001\201\000\
\160\000\002\000\001\002\002\000\002\000\005\000\095\000\001\000\
\153\002\217\000\153\002\219\000\139\000\127\001\025\003\186\001\
\021\003\095\002\107\000\050\003\002\000\168\003\002\000\154\000\
\240\002\029\000\002\000\002\000\216\003\176\003\088\004\135\000\
\084\003\045\004\003\000\004\000\167\000\128\000\000\000\130\000\
\010\005\031\000\000\000\003\005\173\004\035\000\215\004\000\000\
\183\001\017\001\246\002\045\000\057\000\131\002\213\002\157\001\
\000\001\159\001\059\005\014\005\064\001\003\000\218\003\027\000\
\074\001\000\001\037\001\094\001\066\001\000\001\091\001\075\001\
\064\001\065\001\095\001\000\001\164\004\095\000\188\004\095\000\
\000\000\079\001\109\001\027\001\052\001\241\003\000\001\091\001\
\050\001\107\000\000\001\107\000\000\000\064\001\095\000\199\000\
\095\000\095\000\108\001\000\001\010\001\000\001\027\001\118\000\
\035\001\000\001\107\000\000\001\107\000\107\000\023\005\133\000\
\200\004\095\000\136\000\095\000\138\000\139\000\097\002\095\000\
\095\000\000\001\000\001\037\001\015\001\107\000\141\000\107\000\
\059\001\130\005\015\001\107\000\107\000\064\001\065\001\095\005\
\000\001\069\004\000\001\161\000\162\000\008\001\164\000\074\001\
\000\001\100\005\086\003\091\001\000\001\027\001\094\001\095\001\
\174\000\175\000\133\002\124\000\091\001\126\000\010\001\128\000\
\095\001\130\000\001\000\030\001\003\000\004\000\091\001\066\001\
\099\001\001\005\095\001\074\003\136\000\066\001\073\001\197\000\
\198\000\126\001\109\001\201\000\073\001\095\001\092\001\184\005\
\126\000\095\001\004\001\041\005\055\001\000\001\008\001\092\001\
\162\005\183\000\184\000\094\001\091\001\015\001\065\001\102\003\
\018\001\094\001\000\001\094\001\108\001\059\005\045\000\000\001\
\000\001\094\001\066\001\000\001\091\001\091\001\000\001\000\001\
\115\001\095\001\057\000\108\003\022\001\222\005\115\001\014\001\
\000\001\010\001\037\001\091\001\065\001\000\001\019\001\095\001\
\094\001\124\004\037\005\190\001\127\004\026\001\094\001\106\001\
\092\001\120\002\109\001\095\001\184\003\197\001\000\001\199\001\
\066\001\248\002\066\001\027\001\071\001\006\001\018\001\073\001\
\224\001\002\006\213\005\048\001\092\005\000\001\120\002\065\001\
\067\005\084\001\150\001\083\001\000\001\101\005\124\005\060\001\
\109\001\157\001\065\001\159\001\130\005\000\001\067\001\068\001\
\159\002\070\001\166\001\167\001\095\001\124\000\000\001\126\000\
\243\001\128\000\033\003\130\000\094\001\248\001\000\001\113\001\
\094\001\181\001\169\001\092\001\102\005\011\000\094\001\000\001\
\150\002\237\004\238\004\092\001\094\001\144\001\095\001\146\001\
\199\003\148\001\185\001\091\001\026\000\190\005\067\001\095\001\
\026\001\000\001\111\001\094\001\000\001\229\001\000\001\031\006\
\092\001\026\001\184\005\185\005\066\001\008\001\044\000\000\001\
\029\002\091\001\014\001\092\001\004\001\095\001\000\001\017\001\
\008\001\021\005\030\004\059\002\000\001\039\002\000\001\015\001\
\004\001\000\001\018\001\094\001\008\001\014\006\010\001\016\006\
\092\001\127\001\014\001\015\001\066\001\004\001\018\001\008\001\
\222\005\008\001\080\000\094\001\082\000\083\000\000\001\027\001\
\015\001\027\001\033\002\018\001\094\001\137\005\094\001\000\001\
\150\001\160\004\092\001\000\001\184\004\065\001\066\001\157\001\
\108\001\159\001\098\004\092\001\000\001\109\001\110\001\007\001\
\166\001\167\001\066\001\169\001\002\006\113\001\008\001\008\001\
\008\001\000\001\212\005\000\001\000\001\092\001\066\001\181\001\
\039\003\092\001\094\001\185\001\094\001\073\001\023\001\189\001\
\190\001\058\004\091\001\066\001\030\001\030\001\030\001\144\001\
\015\001\146\001\017\001\148\001\094\001\039\003\093\002\091\001\
\092\001\091\001\094\001\095\001\094\001\095\001\023\002\094\001\
\214\001\215\001\216\001\092\001\053\001\055\001\055\001\055\001\
\222\001\024\001\166\001\167\001\000\001\113\001\121\003\065\001\
\065\001\065\001\000\001\090\003\094\001\052\001\010\001\037\004\
\148\005\096\003\113\001\092\001\186\000\243\001\244\001\027\001\
\223\003\094\001\248\001\000\000\067\001\000\001\252\001\091\001\
\090\003\255\001\000\001\095\001\202\000\014\001\096\003\010\001\
\090\001\022\001\008\002\009\002\000\000\092\001\091\001\091\001\
\106\001\106\001\106\001\109\001\109\001\109\001\014\001\008\001\
\000\001\023\002\024\002\036\001\110\001\023\002\066\001\023\002\
\008\002\009\002\150\002\033\002\017\005\073\001\022\001\000\001\
\232\004\039\002\008\001\018\001\180\002\014\001\023\002\023\002\
\023\002\023\002\105\001\036\001\050\002\240\002\161\002\064\001\
\047\002\008\001\008\001\162\002\163\002\027\002\017\001\047\001\
\092\001\023\002\027\001\023\002\057\005\091\001\036\001\023\002\
\023\002\144\001\141\002\146\001\187\003\148\001\018\002\115\001\
\000\001\094\001\203\004\025\001\064\002\065\002\095\001\025\003\
\097\001\092\001\000\001\018\001\095\001\091\001\025\003\093\002\
\025\003\187\003\017\001\019\001\109\001\217\002\094\001\219\002\
\046\001\216\003\026\001\092\001\219\003\018\001\079\001\037\001\
\235\005\097\001\098\001\091\001\097\005\092\001\040\003\094\001\
\109\005\237\002\120\002\063\002\090\002\019\001\092\001\108\005\
\048\001\219\003\091\001\115\001\018\001\094\001\095\001\063\003\
\064\001\065\003\064\001\094\001\060\001\092\001\092\001\000\001\
\012\001\065\001\000\000\066\001\068\001\004\001\070\001\140\005\
\150\002\224\001\048\001\153\002\066\001\014\001\139\005\022\001\
\017\001\159\002\160\002\031\001\162\002\163\002\060\001\094\001\
\110\001\111\001\157\005\027\001\114\001\083\001\068\001\117\001\
\070\001\014\001\176\002\170\002\018\001\109\001\050\001\181\002\
\160\002\094\001\167\005\042\004\186\002\003\000\004\000\111\001\
\006\000\000\001\049\004\022\001\141\002\172\004\196\002\197\002\
\176\002\008\001\053\003\071\001\000\001\133\003\092\001\072\005\
\042\004\072\005\186\002\192\005\036\003\064\001\069\004\049\004\
\084\001\111\001\073\001\217\002\034\000\219\002\027\001\019\001\
\022\001\049\003\224\002\090\001\065\001\066\001\026\001\229\002\
\027\001\101\001\047\001\234\003\235\003\094\001\094\001\237\002\
\238\002\027\001\240\002\105\003\059\002\105\003\033\002\067\001\
\224\002\100\003\003\001\000\001\250\002\049\001\092\001\004\001\
\094\001\094\001\109\001\008\001\235\004\010\001\000\001\090\001\
\060\001\014\001\126\003\233\005\234\005\134\005\117\003\136\005\
\068\001\204\003\070\001\204\003\251\004\000\000\027\001\249\002\
\089\003\019\001\030\001\025\003\097\001\098\001\000\001\040\001\
\026\001\094\001\004\001\066\001\090\001\030\001\008\001\150\004\
\015\001\039\003\040\003\094\001\014\001\015\001\115\001\002\001\
\018\001\000\001\093\002\055\001\094\001\047\003\048\001\047\003\
\126\000\022\001\056\003\111\001\150\004\065\001\055\001\094\001\
\003\001\090\001\060\001\018\001\073\001\022\001\141\002\000\001\
\065\001\067\001\068\001\050\005\070\001\188\004\189\004\045\006\
\056\003\003\004\008\001\000\001\008\001\110\001\091\001\092\001\
\199\004\094\001\095\001\066\001\090\003\014\001\047\001\089\003\
\066\001\089\003\096\003\189\004\036\001\064\001\106\001\094\003\
\215\004\109\001\027\001\105\003\113\001\199\004\108\003\066\001\
\089\003\106\001\089\003\089\003\109\001\111\001\035\001\117\003\
\062\002\000\001\113\003\193\000\094\001\088\001\237\004\238\004\
\126\003\016\001\200\000\089\003\007\002\089\003\132\003\064\001\
\065\001\089\003\089\003\014\002\027\001\067\001\059\001\067\001\
\097\001\098\001\000\001\064\001\065\001\112\001\004\001\053\001\
\030\001\055\001\008\001\064\001\010\001\074\001\079\001\095\001\
\014\001\015\001\064\001\065\001\018\001\055\001\021\005\098\004\
\023\005\053\001\066\001\055\001\056\001\027\001\064\001\019\001\
\000\001\055\001\249\002\022\003\004\001\065\001\099\001\181\003\
\008\001\064\001\065\001\065\001\097\001\187\003\112\004\015\001\
\109\001\191\003\018\001\038\003\051\005\052\005\094\001\042\003\
\109\001\199\003\022\001\201\003\059\005\049\001\204\003\109\001\
\206\003\207\003\208\003\000\000\066\001\211\003\212\003\191\003\
\060\001\064\004\216\003\073\001\218\003\219\003\112\001\199\003\
\068\001\109\001\070\001\149\004\106\001\089\004\073\003\109\001\
\230\003\014\001\062\001\211\003\035\001\091\001\092\001\053\001\
\094\001\095\001\066\001\241\003\022\001\065\001\027\001\061\001\
\055\001\022\001\064\001\045\001\046\001\022\001\230\003\246\003\
\066\001\064\001\018\001\113\001\059\001\003\004\040\001\000\000\
\008\001\074\000\065\001\111\001\190\004\014\001\094\001\019\001\
\003\001\083\001\047\001\130\005\000\001\000\001\047\001\023\001\
\094\001\004\001\027\001\066\001\098\001\008\001\030\001\010\001\
\064\001\083\001\073\001\014\001\015\001\148\005\015\001\019\001\
\105\000\018\001\079\001\109\001\042\004\232\004\026\001\102\001\
\027\001\112\001\100\001\049\004\000\000\053\001\109\001\055\001\
\111\001\122\000\194\004\014\001\058\004\000\001\035\001\067\001\
\129\000\065\001\064\004\178\005\059\004\049\001\000\001\069\004\
\027\001\184\005\000\001\030\006\115\001\109\001\079\001\004\001\
\060\001\006\005\003\001\008\001\010\001\065\001\059\001\066\001\
\068\001\066\001\070\001\089\004\065\001\018\001\073\001\020\005\
\035\001\064\001\000\001\064\001\098\004\099\004\027\001\075\001\
\000\001\103\004\106\001\037\001\064\001\109\001\065\001\222\005\
\091\001\092\001\112\004\094\001\095\001\014\001\000\000\075\001\
\059\001\094\001\022\001\099\004\123\005\064\001\065\001\103\004\
\064\001\102\001\026\001\111\001\057\005\035\001\113\001\074\001\
\109\001\014\001\111\001\003\001\112\001\066\001\109\001\110\001\
\109\001\085\004\008\005\002\006\008\005\008\005\027\001\149\004\
\150\004\084\005\152\004\084\005\112\001\059\001\064\001\014\006\
\099\001\016\006\064\001\065\001\162\004\065\001\064\001\000\001\
\065\001\066\001\109\001\003\001\074\001\109\001\035\001\037\005\
\152\004\037\005\037\005\064\001\065\001\014\001\107\005\000\001\
\017\001\064\001\162\004\066\001\065\001\022\001\188\004\189\004\
\190\004\091\001\027\001\186\004\075\001\099\001\059\001\007\000\
\000\001\199\004\019\001\109\001\065\001\203\004\035\001\109\001\
\031\001\026\001\027\001\000\001\064\001\138\005\047\001\004\001\
\064\001\215\004\000\001\008\001\040\001\010\001\160\005\075\001\
\109\001\014\001\157\005\050\001\157\005\018\001\059\001\048\001\
\049\001\112\001\232\004\064\001\065\001\037\001\027\001\237\004\
\238\004\102\001\022\001\060\001\026\001\074\001\066\001\245\004\
\109\001\097\001\067\001\068\001\066\002\070\001\064\001\065\001\
\064\001\096\001\091\001\068\001\112\001\109\001\095\001\000\001\
\097\001\098\001\008\005\009\005\010\005\245\004\099\001\066\001\
\067\001\000\001\088\001\027\001\013\001\066\001\073\001\021\005\
\109\001\023\005\115\001\064\001\073\001\065\001\100\002\101\002\
\022\001\026\001\010\005\028\001\029\001\064\001\111\001\037\005\
\064\001\096\001\112\001\041\005\110\001\109\001\091\001\092\001\
\041\001\094\001\095\001\004\001\000\001\090\001\037\001\008\001\
\004\001\022\001\066\001\064\001\008\001\059\005\010\001\090\001\
\115\001\018\001\014\001\060\001\113\001\067\005\018\001\022\001\
\109\001\110\001\072\005\068\001\031\001\067\001\004\001\027\001\
\145\001\074\001\008\001\110\001\082\005\109\001\084\005\080\001\
\008\001\015\001\088\005\014\001\018\001\000\000\066\001\050\001\
\064\001\161\000\162\000\092\001\065\001\027\001\000\001\096\001\
\109\001\004\001\082\005\105\005\064\001\008\001\174\000\175\000\
\088\005\066\001\065\001\108\001\015\001\066\001\111\001\018\001\
\073\001\019\001\100\001\000\001\073\001\073\001\124\005\000\000\
\026\001\105\005\035\001\064\001\130\005\197\000\204\002\205\002\
\134\005\109\001\136\005\092\001\066\001\109\001\000\000\091\001\
\092\001\094\001\094\001\095\001\064\001\026\001\148\005\049\001\
\000\001\093\005\059\001\225\002\096\005\064\001\018\002\157\005\
\065\001\064\001\060\001\066\001\035\001\113\001\115\001\066\001\
\009\000\239\002\068\001\012\000\070\001\022\001\015\000\016\000\
\109\001\018\001\019\000\020\000\021\000\022\000\023\000\181\005\
\025\000\088\001\184\005\185\005\059\001\037\001\027\001\032\000\
\001\002\109\001\065\001\036\000\000\001\102\001\039\000\040\000\
\022\001\000\001\109\001\063\002\109\001\181\005\204\005\048\000\
\049\000\112\001\030\001\052\000\053\000\111\001\023\001\155\005\
\156\005\215\005\158\005\159\005\019\001\000\001\026\001\066\001\
\222\005\047\001\066\001\026\001\204\005\066\001\050\001\102\001\
\226\005\073\001\226\005\233\005\234\005\066\001\109\001\215\005\
\083\001\239\005\240\005\057\003\064\001\065\001\027\001\026\001\
\022\001\048\001\091\000\092\000\093\000\094\000\094\001\096\000\
\070\003\233\005\234\005\027\001\002\006\060\001\065\001\239\005\
\240\005\108\001\008\006\000\001\067\001\068\001\073\001\070\001\
\014\006\015\006\016\006\115\001\004\001\066\001\000\001\021\006\
\008\001\101\001\000\001\095\001\027\001\066\001\106\001\015\001\
\008\006\109\001\018\001\027\001\010\001\026\001\083\001\015\006\
\027\001\035\001\066\001\027\001\042\006\021\006\004\001\045\006\
\026\001\146\000\008\001\000\001\028\001\051\006\052\006\027\001\
\111\001\015\001\000\001\124\002\018\001\158\000\159\000\108\001\
\027\001\059\001\042\006\066\001\000\001\045\006\064\001\065\001\
\095\001\170\000\066\001\051\006\052\006\026\001\018\006\066\001\
\074\001\004\001\066\001\093\001\026\001\008\001\095\001\019\001\
\185\000\029\006\066\001\014\001\015\001\000\001\026\001\018\001\
\003\001\194\000\074\001\109\001\040\006\041\006\088\001\066\001\
\080\001\099\001\013\001\083\001\066\001\179\003\180\003\022\001\
\065\001\000\000\000\001\109\001\048\001\064\001\065\001\026\001\
\073\001\028\001\029\001\193\003\194\003\189\001\112\001\000\001\
\060\001\040\001\200\003\004\001\093\001\019\001\041\001\008\001\
\068\001\010\001\070\001\209\003\026\001\014\001\004\001\066\001\
\014\001\018\001\008\001\017\001\109\001\065\001\214\001\215\001\
\216\001\060\001\027\001\071\001\018\001\064\001\222\001\066\001\
\067\001\068\001\048\001\049\001\093\001\027\001\073\001\074\001\
\084\001\064\001\065\001\094\001\004\001\080\001\060\001\022\001\
\008\001\018\001\019\001\111\001\109\001\067\001\068\001\004\001\
\070\001\092\001\018\001\008\001\252\001\096\001\097\001\065\001\
\066\001\100\001\015\001\027\001\055\001\018\001\094\001\040\001\
\073\001\108\001\109\001\004\001\111\001\064\001\027\001\008\001\
\004\001\065\001\066\001\067\001\008\001\054\001\015\001\024\003\
\024\002\058\001\091\001\092\001\014\001\094\001\095\001\017\001\
\016\001\111\001\027\001\000\001\069\001\000\000\022\001\027\001\
\093\001\027\001\043\003\027\001\000\001\010\001\065\001\048\003\
\113\001\009\000\050\002\077\001\012\000\066\001\010\001\015\000\
\016\000\003\001\000\001\019\000\020\000\021\000\022\000\023\000\
\097\001\025\000\053\001\100\001\055\001\102\001\071\003\104\001\
\112\001\066\001\066\001\067\001\036\000\019\001\065\001\039\000\
\040\000\064\001\065\001\064\001\026\001\027\001\246\001\247\001\
\048\000\049\000\096\004\064\001\052\000\053\000\100\004\166\001\
\167\001\092\001\099\003\105\004\004\001\134\001\008\001\136\001\
\008\001\014\001\048\001\049\001\036\001\000\000\014\001\015\001\
\073\001\000\001\018\001\015\001\122\004\123\004\060\001\152\001\
\095\001\014\001\128\004\022\001\109\001\067\001\068\001\014\001\
\070\001\014\001\017\001\091\000\092\000\093\000\094\000\022\001\
\096\000\170\001\171\001\053\001\027\001\055\001\090\001\043\001\
\044\001\045\001\046\001\153\004\022\001\014\001\064\001\065\001\
\095\001\092\001\095\001\053\001\053\001\055\001\055\001\103\001\
\047\001\022\001\066\001\196\001\165\003\027\001\066\001\065\001\
\065\001\111\001\203\001\071\001\072\001\092\001\207\001\092\001\
\109\001\000\001\091\001\094\001\003\001\181\002\092\001\083\001\
\084\001\085\001\086\001\220\001\221\001\053\001\013\001\055\001\
\225\001\094\001\227\001\109\001\196\002\197\002\158\000\159\000\
\100\001\065\001\092\001\026\001\091\001\028\001\029\001\115\001\
\095\001\242\001\097\001\098\001\000\001\053\001\109\001\055\001\
\014\001\040\001\041\001\220\003\221\003\254\001\046\001\000\002\
\001\002\065\001\109\001\233\004\115\001\229\002\020\001\019\001\
\109\001\115\001\194\000\236\003\062\001\060\001\026\001\055\001\
\063\001\000\001\248\004\249\004\067\001\068\001\109\001\022\001\
\249\003\108\001\002\001\074\001\109\001\073\001\031\002\000\000\
\100\001\080\001\073\001\027\001\019\001\049\001\109\001\092\001\
\009\004\015\001\094\001\026\001\000\001\092\001\064\001\064\001\
\060\001\096\001\097\001\053\001\054\001\055\001\056\001\067\001\
\068\001\065\001\070\001\008\001\109\001\108\001\064\001\065\001\
\111\001\040\001\049\001\014\001\018\001\000\001\055\001\062\001\
\003\001\062\001\059\001\044\004\062\001\060\001\063\001\064\001\
\064\001\027\001\013\001\014\001\067\001\068\001\017\001\070\001\
\092\001\094\001\018\001\019\001\064\001\078\001\014\001\026\001\
\027\001\028\001\029\001\111\001\079\001\075\005\053\001\054\001\
\055\001\056\001\014\001\109\001\006\001\040\001\041\001\073\001\
\040\001\064\001\065\001\109\001\094\001\075\001\119\002\064\001\
\073\001\122\002\091\004\124\002\109\001\000\001\054\001\095\001\
\111\001\060\001\058\001\092\001\063\001\022\001\065\001\066\001\
\067\001\068\001\014\001\094\001\027\001\000\001\073\001\074\001\
\019\001\040\001\094\001\073\001\055\001\080\001\000\000\026\001\
\059\001\027\001\013\001\027\001\063\001\064\001\109\001\014\001\
\021\001\092\001\086\001\094\001\132\003\096\001\097\001\026\001\
\064\001\028\001\029\001\078\001\173\002\048\001\062\001\090\001\
\062\001\108\001\152\005\062\001\111\001\062\001\041\001\062\001\
\115\001\060\001\155\004\014\001\157\004\003\001\191\002\014\001\
\193\002\068\001\195\002\070\001\086\001\064\001\199\002\027\001\
\091\001\060\001\109\001\095\001\101\001\073\001\027\001\066\001\
\067\001\068\001\094\001\088\001\094\001\181\003\094\001\074\001\
\094\001\027\001\014\001\220\002\014\001\080\001\015\001\020\001\
\022\001\094\001\200\005\196\004\053\001\008\001\062\001\062\001\
\201\004\092\001\208\005\080\001\111\001\096\001\206\003\207\003\
\208\003\242\002\170\001\000\000\212\003\062\001\247\002\248\002\
\014\001\108\001\218\003\013\001\111\001\064\001\223\004\073\001\
\094\001\002\003\112\001\004\003\112\001\094\001\065\001\014\001\
\073\001\021\001\028\001\029\001\242\005\088\001\015\003\016\003\
\073\001\241\003\094\001\203\001\091\001\014\001\014\001\041\001\
\014\001\026\003\095\001\014\001\064\001\065\001\255\004\000\005\
\033\003\007\006\073\001\071\001\027\001\019\001\027\001\022\001\
\091\001\077\001\060\001\044\003\013\001\063\001\088\001\014\001\
\084\001\018\005\068\001\112\001\014\001\022\005\090\001\014\001\
\074\001\014\001\000\000\028\001\029\001\000\000\080\001\096\001\
\096\001\092\001\067\003\015\001\109\001\109\001\044\006\008\001\
\041\001\109\001\110\001\044\005\036\001\065\001\096\001\092\001\
\036\001\036\001\092\001\007\000\064\001\090\001\087\003\011\000\
\092\001\064\001\108\001\060\001\094\001\111\001\063\001\040\001\
\044\001\045\001\046\001\068\001\036\001\070\005\026\000\031\002\
\053\001\074\001\064\001\053\001\124\000\086\003\064\001\080\001\
\064\001\091\001\115\003\015\006\117\001\118\003\172\003\120\003\
\044\000\064\001\064\001\071\001\072\001\064\001\064\001\096\001\
\097\001\178\005\131\003\235\002\099\002\062\002\135\003\083\001\
\084\001\085\001\086\001\108\001\109\005\142\003\111\001\138\001\
\000\001\146\003\084\005\000\000\117\005\115\001\000\001\093\002\
\100\001\003\001\181\003\223\001\080\000\219\001\082\000\083\000\
\180\002\162\000\163\003\013\001\008\004\166\003\222\004\017\001\
\000\000\170\003\184\004\140\005\022\001\219\002\143\005\181\001\
\026\001\027\001\028\001\029\001\130\001\007\000\001\000\002\000\
\003\000\004\000\005\000\006\000\007\000\072\005\057\005\041\001\
\109\005\195\004\195\003\255\255\255\255\255\255\255\255\055\001\
\026\000\057\001\058\001\059\001\255\255\061\001\255\255\255\255\
\064\001\065\001\060\001\255\255\255\255\063\001\255\255\065\001\
\066\001\067\001\068\001\255\255\255\255\222\003\223\003\073\001\
\074\001\081\001\255\255\255\255\255\255\255\255\080\001\232\003\
\233\003\089\001\090\001\255\255\255\255\161\000\162\000\255\255\
\164\000\097\001\092\001\255\255\094\001\255\255\096\001\097\001\
\249\003\255\255\174\000\175\000\108\001\109\001\110\001\255\255\
\013\001\255\255\108\001\023\001\255\255\111\001\186\000\255\255\
\255\255\115\001\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\197\000\198\000\255\255\064\001\065\001\202\000\255\255\
\255\255\255\255\255\255\071\001\041\001\255\255\255\005\255\255\
\033\004\255\255\035\004\055\001\255\255\057\001\058\001\059\001\
\084\001\061\001\043\004\255\255\064\001\065\001\090\001\060\001\
\255\255\255\255\063\001\255\255\053\004\006\001\255\255\068\001\
\025\006\026\006\255\255\255\255\142\000\074\001\255\255\255\255\
\033\006\066\004\110\001\080\001\255\255\255\255\090\001\255\255\
\255\255\255\255\255\255\255\255\255\255\097\001\160\000\161\000\
\162\000\050\006\164\000\096\001\097\001\255\255\255\255\064\001\
\065\001\109\001\110\001\255\255\174\000\175\000\071\001\108\001\
\255\255\255\255\111\001\255\255\255\255\025\001\055\001\255\255\
\057\001\058\001\059\001\084\001\061\001\255\255\255\255\064\001\
\065\001\090\001\115\004\197\000\198\000\118\004\255\255\201\000\
\255\255\255\255\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\109\001\110\001\135\004\255\255\
\137\004\090\001\139\004\067\003\141\004\142\004\255\255\255\255\
\097\001\146\004\255\255\000\001\255\255\255\255\151\004\013\001\
\255\255\154\004\255\255\156\004\109\001\110\001\000\000\255\255\
\013\001\255\255\255\255\255\255\017\001\255\255\028\001\029\001\
\000\001\255\255\255\255\172\004\255\255\026\001\027\001\028\001\
\029\001\255\255\255\255\041\001\255\255\013\001\255\255\255\255\
\255\255\255\255\110\001\111\001\041\001\255\255\114\001\255\255\
\255\255\117\001\026\001\196\004\028\001\029\001\060\001\255\255\
\201\004\063\001\255\255\255\255\255\255\255\255\068\001\060\001\
\209\004\041\001\063\001\255\255\074\001\066\001\067\001\068\001\
\255\255\255\255\080\001\006\001\073\001\074\001\255\255\255\255\
\255\255\226\004\255\255\080\001\060\001\230\004\255\255\063\001\
\255\255\255\255\235\004\255\255\068\001\255\255\255\255\092\001\
\255\255\094\001\074\001\096\001\097\001\255\255\108\001\255\255\
\080\001\111\001\251\004\252\004\255\255\254\004\255\255\108\001\
\255\255\255\255\111\001\255\255\092\001\255\255\115\001\255\255\
\096\001\189\001\190\001\012\005\055\001\255\255\057\001\058\001\
\059\001\255\255\061\001\255\255\108\001\064\001\065\001\111\001\
\255\255\255\255\108\001\255\255\255\255\255\255\255\255\255\255\
\000\001\255\255\214\001\215\001\216\001\255\255\255\255\040\005\
\255\255\255\255\222\001\255\255\045\005\255\255\255\255\090\001\
\049\005\050\005\255\255\255\255\255\255\255\255\097\001\056\005\
\138\001\255\255\255\255\255\255\255\255\255\255\255\255\243\001\
\244\001\255\255\109\001\110\001\248\001\070\005\255\255\255\255\
\252\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\083\005\255\255\255\255\255\255\255\255\055\001\
\255\255\057\001\058\001\059\001\255\255\061\001\255\255\255\255\
\064\001\065\001\099\005\255\255\024\002\255\255\255\255\104\005\
\186\001\255\255\255\255\189\001\190\001\033\002\255\255\255\255\
\255\255\081\001\255\255\255\255\117\005\255\255\255\255\255\255\
\255\255\089\001\090\001\255\255\255\255\255\255\050\002\255\255\
\007\000\097\001\255\255\255\255\214\001\215\001\216\001\255\255\
\255\255\255\255\062\002\255\255\222\001\109\001\110\001\255\255\
\255\255\146\005\255\255\229\001\255\255\255\255\151\005\255\255\
\255\255\154\005\255\255\255\255\255\255\000\000\255\255\255\255\
\161\005\243\001\244\001\255\255\165\005\255\255\248\001\255\255\
\169\005\093\002\252\001\013\001\255\255\255\001\255\255\255\255\
\255\255\255\255\179\005\255\255\255\255\007\002\255\255\255\255\
\255\255\255\255\028\001\029\001\014\002\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\002\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\033\002\
\255\255\255\255\255\255\007\000\255\255\039\002\255\255\011\000\
\217\005\218\005\060\001\255\255\255\255\063\001\223\005\255\255\
\050\002\255\255\068\001\053\002\255\255\230\005\026\000\255\255\
\074\001\000\000\255\255\236\005\062\002\255\255\080\001\255\255\
\255\255\255\255\255\255\244\005\245\005\255\255\255\255\255\255\
\044\000\255\255\251\005\252\005\253\005\254\005\096\001\097\001\
\255\255\181\002\255\255\255\255\255\255\255\255\255\255\255\255\
\009\006\010\006\108\001\093\002\255\255\111\001\255\255\255\255\
\196\002\197\002\255\255\255\255\255\255\255\255\023\006\024\006\
\255\255\026\006\161\000\162\000\080\000\164\000\082\000\083\000\
\255\255\034\006\255\255\255\255\255\255\007\000\218\002\174\000\
\175\000\255\255\255\255\255\255\023\001\255\255\255\255\048\006\
\255\255\229\002\255\255\255\255\255\255\054\006\055\006\255\255\
\255\255\036\001\238\002\255\255\240\002\196\000\197\000\198\000\
\255\255\055\001\255\255\057\001\058\001\059\001\255\255\061\001\
\255\255\255\255\064\001\065\001\055\001\255\255\057\001\058\001\
\059\001\133\000\061\001\255\255\255\255\064\001\065\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\180\002\181\002\090\001\025\003\255\255\255\255\
\255\255\255\255\255\255\097\001\255\255\161\000\162\000\090\001\
\164\000\255\255\196\002\197\002\255\255\255\255\097\001\109\001\
\110\001\255\255\174\000\175\000\255\255\255\255\255\255\255\255\
\255\255\255\255\109\001\110\001\255\255\255\255\186\000\255\255\
\218\002\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\197\000\198\000\229\002\255\255\255\255\202\000\255\255\
\255\255\255\255\000\001\255\255\238\002\000\001\240\002\255\255\
\003\001\255\255\255\255\255\255\255\255\008\001\255\255\255\255\
\250\002\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\019\001\255\255\255\255\022\001\255\255\255\255\255\255\026\001\
\063\001\028\001\029\001\255\255\255\255\255\255\255\255\161\000\
\162\000\072\001\164\000\255\255\255\255\023\003\041\001\025\003\
\255\255\255\255\255\255\255\255\174\000\175\000\255\255\255\255\
\132\003\055\001\255\255\057\001\058\001\059\001\040\003\061\001\
\255\255\060\001\064\001\065\001\063\001\255\255\065\001\066\001\
\067\001\068\001\255\255\197\000\198\000\025\001\255\255\074\001\
\255\255\000\001\255\255\081\001\079\001\080\001\255\255\255\255\
\255\255\008\001\255\255\089\001\090\001\255\255\013\001\255\255\
\255\255\092\001\046\001\097\001\255\255\096\001\097\001\255\255\
\255\255\181\003\255\255\026\001\255\255\028\001\029\001\109\001\
\110\001\108\001\255\255\255\255\111\001\255\255\255\255\097\003\
\255\255\255\255\041\001\255\255\255\255\201\003\255\255\255\255\
\204\003\255\255\206\003\207\003\208\003\255\255\255\255\255\255\
\212\003\255\255\255\255\255\255\255\255\060\001\218\003\121\003\
\063\001\255\255\255\255\066\001\067\001\068\001\255\255\255\255\
\255\255\255\255\132\003\074\001\255\255\255\255\189\001\190\001\
\000\000\080\001\110\001\111\001\255\255\241\003\114\001\255\255\
\255\255\117\001\255\255\255\255\255\255\092\001\255\255\255\255\
\255\255\096\001\097\001\255\255\255\255\255\255\213\001\214\001\
\215\001\216\001\255\255\255\255\255\255\108\001\255\255\222\001\
\111\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\150\001\181\003\013\001\255\255\255\255\255\255\
\255\255\157\001\255\255\159\001\243\001\244\001\255\255\255\255\
\255\255\248\001\255\255\028\001\029\001\252\001\255\255\201\003\
\255\255\255\255\204\003\255\255\206\003\207\003\208\003\006\002\
\041\001\255\255\212\003\255\255\255\255\255\255\255\255\255\255\
\218\003\189\001\190\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\002\255\255\060\001\255\255\255\255\063\001\255\255\
\255\255\000\001\033\002\068\001\255\255\255\255\255\255\241\003\
\255\255\074\001\214\001\215\001\216\001\255\255\013\001\080\001\
\255\255\255\255\222\001\050\002\255\255\255\255\098\004\255\255\
\255\255\003\004\255\255\026\001\255\255\028\001\029\001\096\001\
\097\001\255\255\255\255\255\255\255\255\255\255\255\255\243\001\
\244\001\255\255\041\001\108\001\248\001\255\255\111\001\255\255\
\252\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\036\004\255\255\255\255\060\001\093\002\255\255\
\255\255\255\255\255\255\189\001\190\001\068\001\255\255\255\255\
\255\255\255\255\255\255\074\001\024\002\255\255\255\255\255\255\
\255\255\080\001\255\255\255\255\255\255\033\002\255\255\255\255\
\255\255\255\255\255\255\255\255\214\001\215\001\216\001\255\255\
\255\255\096\001\255\255\255\255\222\001\223\001\050\002\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\255\255\
\111\001\255\255\062\002\255\255\255\255\255\255\255\255\255\255\
\098\004\243\001\244\001\255\255\255\255\255\255\248\001\255\255\
\255\255\255\255\252\001\255\255\255\255\255\255\112\004\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\097\001\093\002\255\255\100\001\255\255\102\001\181\002\104\001\
\255\255\255\255\255\255\255\255\232\004\255\255\024\002\255\255\
\000\001\255\255\255\255\003\001\013\001\196\002\197\002\033\002\
\255\255\255\255\255\255\149\004\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\134\001\255\255\136\001\
\050\002\255\255\026\001\255\255\028\001\029\001\255\255\255\255\
\041\001\255\255\255\255\255\255\255\255\255\255\229\002\152\001\
\040\001\041\001\150\002\255\255\255\255\255\255\255\255\238\002\
\255\255\240\002\255\255\060\001\190\004\255\255\255\255\255\255\
\194\004\255\255\255\255\068\001\060\001\255\255\000\000\063\001\
\255\255\074\001\255\255\093\002\068\001\255\255\255\255\080\001\
\255\255\181\002\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\255\255\255\255\255\255\255\255\255\255\255\255\096\001\
\196\002\197\002\025\003\255\255\092\001\255\255\232\004\255\255\
\096\001\097\001\255\255\108\001\255\255\255\255\111\001\255\255\
\084\005\255\255\255\255\255\255\108\001\255\255\255\255\111\001\
\225\001\255\255\227\001\255\255\255\255\255\255\255\255\255\255\
\255\255\229\002\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\238\002\255\255\240\002\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\254\001\255\255\000\002\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\001\255\255\181\002\003\001\255\255\255\255\255\255\
\255\255\008\001\255\255\255\255\255\255\255\255\013\001\255\255\
\103\003\255\255\196\002\197\002\019\001\025\003\028\000\029\000\
\255\255\157\005\255\255\026\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\168\005\255\255\255\255\255\255\
\255\255\040\001\041\001\255\255\255\255\132\003\255\255\255\255\
\255\255\255\255\084\005\229\002\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\238\002\060\001\240\002\255\255\
\063\001\255\255\255\255\066\001\067\001\068\001\255\255\255\255\
\255\255\255\255\073\001\074\001\255\255\255\255\084\000\085\000\
\255\255\080\001\255\255\255\255\216\005\255\255\255\255\006\001\
\255\255\008\001\255\255\255\255\255\255\092\001\181\003\255\255\
\255\255\096\001\097\001\255\255\255\255\105\003\255\255\025\003\
\255\255\255\255\110\003\255\255\255\255\108\001\119\002\255\255\
\111\001\122\002\201\003\255\255\255\255\204\003\205\003\206\003\
\207\003\208\003\000\000\157\005\255\255\212\003\255\255\255\255\
\132\003\255\255\255\255\218\003\255\255\255\255\168\005\255\255\
\055\001\255\255\057\001\058\001\059\001\255\255\061\001\255\255\
\255\255\064\001\065\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\241\003\255\255\255\255\255\255\255\255\255\255\
\000\001\255\255\081\001\255\255\255\255\255\255\000\001\255\255\
\255\255\003\001\089\001\090\001\255\255\255\255\255\255\255\255\
\255\255\181\003\097\001\013\001\255\255\255\255\216\005\017\001\
\255\255\255\255\255\255\221\005\022\001\255\255\109\001\110\001\
\026\001\027\001\028\001\029\001\255\255\201\003\255\255\255\255\
\204\003\255\255\206\003\207\003\208\003\255\255\255\255\041\001\
\212\003\255\255\132\003\220\002\255\255\255\255\218\003\055\001\
\255\255\057\001\058\001\059\001\255\255\061\001\255\255\255\255\
\064\001\065\001\060\001\255\255\255\255\063\001\255\255\065\001\
\066\001\067\001\068\001\255\255\255\255\241\003\247\002\073\001\
\074\001\081\001\255\255\255\255\255\255\255\255\080\001\255\255\
\255\255\089\001\090\001\255\255\255\255\255\255\255\255\255\255\
\255\255\097\001\092\001\181\003\094\001\255\255\096\001\097\001\
\255\255\255\255\255\255\098\004\255\255\109\001\110\001\255\255\
\255\255\255\255\108\001\255\255\255\255\111\001\255\255\201\003\
\023\001\115\001\204\003\255\255\206\003\207\003\208\003\255\255\
\255\255\255\255\212\003\255\255\255\255\036\001\255\255\255\255\
\218\003\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\056\004\255\255\255\255\255\255\
\055\001\255\255\057\001\058\001\059\001\255\255\061\001\241\003\
\255\255\064\001\065\001\073\001\074\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\092\001\093\001\
\255\255\095\001\255\255\090\001\255\255\255\255\098\004\255\255\
\255\255\255\255\097\001\255\255\255\255\107\001\255\255\255\255\
\255\255\255\255\115\003\255\255\255\255\255\255\109\001\110\001\
\255\255\255\255\120\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\000\001\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\232\004\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\163\003\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\049\001\255\255\051\001\255\255\255\255\
\098\004\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\255\255\063\001\195\003\255\255\066\001\067\001\068\001\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\255\255\255\255\089\001\255\255\091\001\092\001\255\255\
\094\001\095\001\096\001\097\001\098\001\255\255\100\001\232\003\
\233\003\103\001\104\001\105\001\232\004\255\255\108\001\255\255\
\255\255\111\001\255\255\255\255\255\255\115\001\000\001\255\255\
\255\255\255\255\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\084\005\255\255\255\255\
\255\255\255\255\255\255\255\255\008\005\255\255\255\255\255\255\
\255\255\015\002\028\001\255\255\030\001\031\001\020\002\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\006\001\
\033\004\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\050\001\037\005\052\001\053\001\255\255\055\001\056\001\255\255\
\255\255\059\001\255\255\255\255\053\004\255\255\064\001\065\001\
\255\255\255\255\255\255\255\255\255\255\071\001\232\004\255\255\
\255\255\255\255\064\002\065\002\255\255\255\255\255\255\255\255\
\255\255\255\255\084\001\255\255\255\255\255\255\157\005\255\255\
\055\001\255\255\057\001\058\001\059\001\255\255\061\001\097\001\
\084\005\064\001\065\001\101\001\255\255\255\255\255\255\255\255\
\106\001\255\255\255\255\109\001\110\001\099\002\255\255\255\255\
\255\255\255\255\104\002\105\002\106\002\255\255\255\255\255\255\
\255\255\255\255\255\255\090\001\255\255\092\001\255\255\255\255\
\255\255\255\255\097\001\000\001\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\008\001\009\001\010\001\109\001\110\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\154\004\255\255\156\004\255\255\255\255\255\255\036\001\
\037\001\157\005\000\000\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\084\005\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\255\255\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\082\001\255\255\255\255\
\209\004\086\001\208\002\209\002\210\002\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\255\255\100\001\
\255\255\255\255\103\001\255\255\105\001\255\255\255\255\108\001\
\255\255\255\255\111\001\255\255\255\255\255\255\115\001\255\255\
\255\255\255\255\255\255\157\005\255\255\255\255\255\255\245\002\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\003\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\000\001\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\008\001\009\001\010\001\255\255\040\005\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\049\001\255\255\051\001\255\255\
\255\255\255\255\080\003\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\104\005\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\086\001\001\001\002\001\089\001\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\098\001\255\255\100\001\
\015\001\255\255\103\001\104\001\105\001\255\255\255\255\108\001\
\255\255\255\255\111\001\255\255\027\001\255\255\115\001\255\255\
\255\255\146\005\255\255\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\255\255\042\001\043\001\044\001\045\001\046\001\
\161\005\255\255\000\001\255\255\255\255\003\001\255\255\255\255\
\169\005\255\255\255\255\255\255\255\255\255\255\061\001\013\001\
\255\255\255\255\179\005\066\001\255\255\019\001\255\255\255\255\
\071\001\072\001\000\000\185\003\026\001\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\083\001\084\001\085\001\086\001\
\255\255\255\255\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\255\255\100\001\255\255\255\255\
\217\005\218\005\255\255\255\255\255\255\255\255\060\001\255\255\
\255\255\063\001\255\255\255\255\255\255\230\005\068\001\255\255\
\070\001\255\255\255\255\255\255\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\255\255\245\005\255\255\255\255\255\255\
\255\255\255\255\251\005\252\005\253\005\254\005\092\001\255\255\
\255\255\255\255\096\001\097\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\108\001\255\255\
\255\255\111\001\016\004\017\004\018\004\255\255\255\255\000\001\
\001\001\002\001\003\001\255\255\255\255\255\255\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\077\004\
\078\004\079\004\255\255\060\001\061\001\255\255\063\001\000\000\
\255\255\066\001\067\001\068\001\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\255\255\082\001\083\001\084\001\085\001\086\001\255\255\255\255\
\255\255\111\004\091\001\092\001\255\255\094\001\095\001\096\001\
\097\001\255\255\255\255\100\001\255\255\255\255\103\001\255\255\
\105\001\255\255\255\255\108\001\255\255\255\255\111\001\255\255\
\255\255\255\255\115\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\176\004\177\004\255\255\255\255\255\255\181\004\
\182\004\183\004\000\001\001\001\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\000\000\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\049\001\050\001\051\001\255\255\053\001\
\054\001\055\001\056\001\255\255\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\255\255\089\001\255\255\091\001\092\001\255\255\
\094\001\095\001\096\001\097\001\098\001\255\255\100\001\101\001\
\255\255\103\001\104\001\105\001\106\001\255\255\108\001\109\001\
\255\255\111\001\255\255\255\255\255\255\115\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\001\
\001\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\118\005\119\005\120\005\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\049\001\050\001\051\001\255\255\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\067\001\068\001\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\255\255\
\089\001\255\255\091\001\092\001\255\255\094\001\095\001\096\001\
\097\001\098\001\000\000\100\001\101\001\255\255\103\001\104\001\
\105\001\106\001\255\255\108\001\109\001\255\255\111\001\255\255\
\255\255\255\255\115\001\255\255\255\255\255\255\255\255\255\255\
\255\255\000\001\001\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\036\001\037\001\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\255\255\049\001\050\001\051\001\255\255\053\001\054\001\
\055\001\056\001\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\255\255\070\001\
\071\001\072\001\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\081\001\082\001\083\001\084\001\085\001\086\001\
\087\001\255\255\089\001\255\255\091\001\092\001\000\000\094\001\
\095\001\096\001\097\001\098\001\255\255\100\001\101\001\255\255\
\103\001\104\001\105\001\106\001\255\255\108\001\109\001\255\255\
\111\001\255\255\255\255\255\255\115\001\000\001\001\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\049\001\050\001\
\051\001\255\255\053\001\054\001\055\001\056\001\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\067\001\068\001\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\255\255\255\255\255\255\255\255\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\087\001\255\255\089\001\255\255\
\091\001\092\001\000\000\094\001\095\001\096\001\097\001\098\001\
\255\255\100\001\101\001\255\255\103\001\104\001\105\001\106\001\
\255\255\108\001\109\001\255\255\111\001\255\255\255\255\255\255\
\115\001\255\255\000\001\001\001\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\049\001\050\001\051\001\255\255\053\001\
\054\001\055\001\056\001\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\067\001\068\001\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\255\255\089\001\255\255\091\001\092\001\000\000\
\094\001\095\001\096\001\097\001\098\001\255\255\100\001\101\001\
\255\255\103\001\104\001\105\001\106\001\255\255\108\001\109\001\
\255\255\111\001\255\255\255\255\255\255\115\001\000\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\255\255\255\255\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\049\001\
\050\001\051\001\255\255\053\001\054\001\055\001\056\001\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\255\255\070\001\071\001\072\001\073\001\
\074\001\255\255\255\255\255\255\255\255\255\255\080\001\081\001\
\082\001\083\001\084\001\085\001\086\001\087\001\255\255\089\001\
\255\255\091\001\092\001\000\000\094\001\095\001\096\001\097\001\
\098\001\255\255\100\001\101\001\255\255\103\001\104\001\105\001\
\106\001\255\255\108\001\109\001\255\255\111\001\255\255\255\255\
\255\255\115\001\000\001\001\001\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\049\001\050\001\051\001\255\255\053\001\
\054\001\055\001\056\001\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\067\001\068\001\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\255\255\089\001\255\255\091\001\092\001\000\000\
\094\001\095\001\096\001\097\001\098\001\255\255\100\001\101\001\
\255\255\103\001\104\001\105\001\106\001\255\255\108\001\109\001\
\255\255\111\001\255\255\255\255\255\255\115\001\255\255\000\001\
\001\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\049\001\050\001\051\001\255\255\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\067\001\068\001\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\255\255\
\089\001\255\255\091\001\092\001\000\000\094\001\095\001\096\001\
\097\001\098\001\255\255\100\001\101\001\255\255\103\001\104\001\
\105\001\106\001\255\255\108\001\109\001\255\255\111\001\255\255\
\255\255\255\255\115\001\000\001\001\001\002\001\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\049\001\050\001\051\001\255\255\
\053\001\054\001\055\001\056\001\255\255\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\066\001\067\001\068\001\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\086\001\087\001\255\255\089\001\255\255\091\001\092\001\
\000\000\094\001\095\001\096\001\097\001\098\001\255\255\100\001\
\101\001\255\255\103\001\104\001\105\001\106\001\255\255\108\001\
\109\001\255\255\111\001\255\255\255\255\255\255\115\001\000\001\
\001\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\049\001\050\001\051\001\255\255\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\067\001\068\001\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\255\255\
\089\001\255\255\091\001\092\001\000\000\094\001\095\001\096\001\
\097\001\098\001\255\255\100\001\101\001\255\255\103\001\104\001\
\105\001\106\001\255\255\108\001\109\001\255\255\111\001\255\255\
\255\255\255\255\115\001\255\255\000\001\001\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\049\001\050\001\051\001\
\255\255\053\001\054\001\055\001\056\001\255\255\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\067\001\
\068\001\255\255\070\001\071\001\072\001\073\001\074\001\255\255\
\255\255\255\255\255\255\255\255\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\255\255\089\001\255\255\091\001\
\092\001\000\000\094\001\095\001\096\001\097\001\098\001\255\255\
\100\001\101\001\255\255\103\001\104\001\105\001\106\001\255\255\
\108\001\109\001\255\255\111\001\255\255\255\255\255\255\115\001\
\000\001\001\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\036\001\037\001\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\255\255\049\001\050\001\051\001\255\255\053\001\054\001\055\001\
\056\001\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\066\001\067\001\068\001\255\255\070\001\071\001\
\072\001\073\001\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\081\001\082\001\083\001\084\001\085\001\086\001\087\001\
\255\255\089\001\255\255\091\001\092\001\000\000\094\001\095\001\
\096\001\097\001\098\001\255\255\100\001\101\001\255\255\103\001\
\104\001\105\001\106\001\255\255\108\001\109\001\255\255\111\001\
\255\255\255\255\255\255\115\001\000\001\001\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\049\001\050\001\051\001\
\255\255\053\001\054\001\055\001\056\001\255\255\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\067\001\
\068\001\255\255\070\001\071\001\072\001\073\001\074\001\255\255\
\255\255\255\255\255\255\255\255\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\255\255\089\001\255\255\091\001\
\092\001\000\000\094\001\095\001\096\001\255\255\255\255\255\255\
\100\001\101\001\255\255\103\001\104\001\105\001\106\001\255\255\
\108\001\109\001\255\255\111\001\255\255\255\255\255\255\115\001\
\255\255\000\001\001\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\036\001\037\001\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\049\001\050\001\051\001\255\255\053\001\054\001\
\055\001\056\001\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\067\001\068\001\255\255\070\001\
\071\001\072\001\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\081\001\082\001\083\001\084\001\085\001\086\001\
\087\001\255\255\089\001\255\255\091\001\092\001\000\000\094\001\
\095\001\096\001\255\255\255\255\255\255\100\001\101\001\255\255\
\103\001\104\001\105\001\106\001\255\255\108\001\109\001\255\255\
\111\001\255\255\255\255\255\255\115\001\000\001\001\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\255\255\049\001\050\001\
\051\001\255\255\053\001\054\001\055\001\056\001\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\067\001\068\001\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\255\255\255\255\255\255\255\255\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\087\001\255\255\089\001\255\255\
\091\001\092\001\000\000\094\001\095\001\096\001\255\255\255\255\
\255\255\100\001\101\001\255\255\103\001\104\001\105\001\106\001\
\255\255\108\001\109\001\255\255\111\001\255\255\255\255\255\255\
\115\001\000\001\001\001\002\001\003\001\255\255\255\255\255\255\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\255\255\
\063\001\255\255\255\255\066\001\067\001\068\001\255\255\070\001\
\071\001\072\001\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\255\255\082\001\083\001\084\001\085\001\086\001\
\255\255\255\255\255\255\255\255\091\001\092\001\000\000\094\001\
\095\001\096\001\255\255\255\255\255\255\100\001\255\255\255\255\
\103\001\255\255\105\001\255\255\255\255\108\001\255\255\255\255\
\111\001\255\255\255\255\255\255\115\001\255\255\000\001\001\001\
\002\001\003\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\061\001\255\255\063\001\255\255\255\255\
\066\001\067\001\068\001\255\255\070\001\071\001\072\001\073\001\
\074\001\255\255\255\255\255\255\255\255\255\255\080\001\255\255\
\082\001\083\001\084\001\085\001\086\001\255\255\255\255\255\255\
\255\255\091\001\092\001\000\000\094\001\095\001\096\001\097\001\
\255\255\255\255\100\001\255\255\255\255\103\001\255\255\105\001\
\255\255\255\255\108\001\255\255\255\255\111\001\255\255\255\255\
\255\255\115\001\000\001\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\255\255\049\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\255\255\063\001\255\255\255\255\066\001\067\001\068\001\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\255\255\082\001\083\001\084\001\085\001\
\086\001\255\255\255\255\255\255\255\255\091\001\092\001\000\000\
\094\001\095\001\096\001\255\255\255\255\255\255\100\001\255\255\
\255\255\103\001\255\255\105\001\255\255\255\255\108\001\255\255\
\255\255\111\001\255\255\255\255\255\255\115\001\000\001\001\001\
\002\001\003\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\061\001\255\255\063\001\255\255\255\255\
\066\001\067\001\068\001\255\255\070\001\071\001\072\001\073\001\
\074\001\255\255\255\255\255\255\255\255\255\255\080\001\255\255\
\082\001\083\001\084\001\085\001\086\001\255\255\255\255\255\255\
\255\255\091\001\092\001\000\000\094\001\095\001\096\001\255\255\
\255\255\255\255\100\001\255\255\255\255\103\001\255\255\105\001\
\255\255\255\255\108\001\255\255\255\255\111\001\255\255\255\255\
\255\255\115\001\255\255\000\001\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\082\001\083\001\084\001\
\085\001\086\001\255\255\255\255\255\255\255\255\091\001\092\001\
\000\000\094\001\095\001\096\001\255\255\255\255\255\255\100\001\
\255\255\255\255\103\001\255\255\105\001\255\255\255\255\108\001\
\255\255\255\255\111\001\255\255\255\255\255\255\115\001\000\001\
\001\001\002\001\003\001\255\255\255\255\255\255\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\061\001\255\255\063\001\255\255\
\255\255\066\001\067\001\068\001\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\255\255\082\001\083\001\084\001\085\001\086\001\255\255\255\255\
\255\255\255\255\091\001\092\001\000\000\094\001\095\001\096\001\
\255\255\255\255\255\255\100\001\255\255\255\255\103\001\255\255\
\105\001\255\255\255\255\108\001\255\255\255\255\111\001\255\255\
\255\255\255\255\115\001\000\001\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\082\001\083\001\084\001\
\085\001\086\001\255\255\255\255\255\255\255\255\091\001\092\001\
\000\000\094\001\095\001\096\001\097\001\255\255\255\255\100\001\
\255\255\255\255\103\001\255\255\105\001\255\255\255\255\108\001\
\255\255\255\255\111\001\255\255\255\255\255\255\115\001\255\255\
\000\001\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\255\255\255\255\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\063\001\
\255\255\255\255\066\001\067\001\068\001\255\255\070\001\071\001\
\072\001\073\001\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\255\255\082\001\083\001\084\001\085\001\086\001\255\255\
\255\255\255\255\255\255\091\001\092\001\000\000\094\001\095\001\
\096\001\097\001\255\255\255\255\100\001\255\255\255\255\103\001\
\255\255\105\001\255\255\255\255\108\001\255\255\255\255\111\001\
\255\255\255\255\255\255\115\001\000\001\001\001\002\001\003\001\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\061\001\255\255\063\001\255\255\255\255\066\001\067\001\
\068\001\255\255\070\001\071\001\072\001\073\001\074\001\255\255\
\255\255\255\255\255\255\255\255\080\001\255\255\082\001\083\001\
\084\001\085\001\086\001\255\255\255\255\255\255\255\255\091\001\
\092\001\000\000\094\001\095\001\096\001\097\001\255\255\255\255\
\100\001\255\255\255\255\103\001\255\255\105\001\255\255\255\255\
\108\001\255\255\255\255\111\001\255\255\255\255\255\255\115\001\
\000\001\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\255\255\255\255\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\063\001\
\255\255\255\255\066\001\067\001\068\001\255\255\070\001\071\001\
\072\001\073\001\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\255\255\082\001\083\001\084\001\085\001\086\001\255\255\
\255\255\255\255\255\255\091\001\092\001\000\000\094\001\095\001\
\096\001\097\001\255\255\255\255\100\001\255\255\255\255\103\001\
\255\255\105\001\255\255\255\255\108\001\255\255\255\255\111\001\
\255\255\255\255\255\255\115\001\255\255\000\001\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\061\001\255\255\063\001\255\255\255\255\066\001\
\067\001\068\001\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\255\255\255\255\255\255\255\255\080\001\255\255\082\001\
\083\001\084\001\085\001\086\001\255\255\255\255\255\255\255\255\
\091\001\092\001\000\000\094\001\095\001\096\001\097\001\255\255\
\255\255\100\001\255\255\255\255\103\001\255\255\105\001\255\255\
\255\255\108\001\255\255\255\255\111\001\255\255\255\255\255\255\
\115\001\000\001\001\001\002\001\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\255\255\
\063\001\255\255\255\255\066\001\067\001\068\001\255\255\070\001\
\071\001\072\001\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\255\255\082\001\083\001\084\001\085\001\086\001\
\255\255\255\255\255\255\255\255\091\001\092\001\000\000\094\001\
\095\001\096\001\097\001\255\255\255\255\100\001\255\255\255\255\
\103\001\255\255\105\001\255\255\255\255\108\001\255\255\255\255\
\111\001\255\255\255\255\255\255\115\001\000\001\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\061\001\255\255\063\001\255\255\255\255\066\001\
\067\001\068\001\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\255\255\255\255\255\255\255\255\080\001\255\255\082\001\
\083\001\084\001\085\001\086\001\255\255\255\255\255\255\255\255\
\091\001\092\001\000\000\094\001\095\001\096\001\097\001\255\255\
\255\255\100\001\255\255\255\255\103\001\255\255\105\001\255\255\
\255\255\108\001\255\255\255\255\111\001\255\255\255\255\255\255\
\115\001\255\255\000\001\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\255\255\255\255\049\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\255\255\063\001\255\255\255\255\066\001\067\001\068\001\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\255\255\082\001\255\255\084\001\085\001\
\086\001\255\255\255\255\255\255\255\255\091\001\092\001\000\000\
\094\001\095\001\096\001\097\001\255\255\255\255\255\255\255\255\
\255\255\103\001\255\255\105\001\255\255\255\255\108\001\255\255\
\255\255\111\001\255\255\255\255\255\255\115\001\000\001\001\001\
\002\001\003\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\061\001\255\255\063\001\255\255\255\255\
\066\001\067\001\068\001\255\255\070\001\071\001\072\001\073\001\
\074\001\255\255\255\255\255\255\255\255\255\255\080\001\255\255\
\082\001\255\255\084\001\085\001\086\001\255\255\255\255\255\255\
\255\255\091\001\092\001\000\000\094\001\095\001\096\001\097\001\
\255\255\255\255\255\255\255\255\255\255\103\001\255\255\105\001\
\255\255\255\255\108\001\255\255\255\255\111\001\255\255\255\255\
\255\255\115\001\000\001\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\255\255\255\255\049\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\255\255\063\001\255\255\255\255\066\001\067\001\068\001\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\255\255\082\001\255\255\084\001\085\001\
\086\001\255\255\255\255\255\255\255\255\091\001\092\001\000\000\
\094\001\095\001\096\001\097\001\255\255\255\255\255\255\255\255\
\255\255\103\001\255\255\105\001\255\255\255\255\108\001\255\255\
\255\255\111\001\255\255\255\255\255\255\115\001\255\255\000\001\
\001\001\002\001\003\001\255\255\255\255\255\255\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\061\001\255\255\063\001\255\255\
\255\255\066\001\067\001\068\001\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\255\255\082\001\255\255\084\001\085\001\086\001\255\255\255\255\
\255\255\255\255\091\001\092\001\000\000\094\001\095\001\096\001\
\097\001\255\255\255\255\255\255\255\255\255\255\103\001\255\255\
\105\001\255\255\255\255\108\001\255\255\255\255\111\001\255\255\
\255\255\255\255\115\001\000\001\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\255\255\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\255\255\063\001\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\082\001\255\255\084\001\
\085\001\086\001\255\255\255\255\255\255\255\255\091\001\092\001\
\000\000\094\001\095\001\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\103\001\255\255\105\001\255\255\255\255\108\001\
\255\255\255\255\111\001\255\255\255\255\255\255\115\001\000\001\
\001\001\002\001\003\001\255\255\255\255\255\255\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\061\001\255\255\063\001\255\255\
\255\255\066\001\067\001\068\001\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\255\255\082\001\255\255\084\001\085\001\086\001\255\255\255\255\
\255\255\255\255\091\001\092\001\000\000\094\001\095\001\096\001\
\097\001\255\255\255\255\255\255\255\255\255\255\103\001\255\255\
\105\001\255\255\255\255\108\001\255\255\255\255\111\001\006\001\
\255\255\008\001\115\001\255\255\000\001\001\001\002\001\003\001\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\043\001\
\055\001\255\255\057\001\058\001\059\001\049\001\061\001\255\255\
\255\255\064\001\065\001\255\255\255\255\255\255\255\255\255\255\
\060\001\061\001\255\255\063\001\255\255\255\255\066\001\067\001\
\068\001\255\255\070\001\255\255\255\255\073\001\074\001\255\255\
\255\255\255\255\255\255\090\001\080\001\255\255\082\001\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\255\255\091\001\
\092\001\000\000\094\001\095\001\096\001\097\001\109\001\110\001\
\255\255\255\255\255\255\103\001\255\255\105\001\255\255\255\255\
\108\001\255\255\255\255\111\001\255\255\255\255\255\255\115\001\
\000\001\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\255\255\255\255\
\040\001\041\001\042\001\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\255\255\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\255\255\
\255\255\073\001\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\255\255\082\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\091\001\092\001\000\000\094\001\095\001\
\096\001\097\001\255\255\255\255\255\255\255\255\255\255\103\001\
\255\255\105\001\255\255\255\255\108\001\255\255\255\255\111\001\
\255\255\255\255\255\255\115\001\000\001\001\001\002\001\003\001\
\255\255\255\255\255\255\255\255\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\061\001\255\255\063\001\255\255\255\255\255\255\067\001\
\068\001\255\255\070\001\255\255\255\255\073\001\074\001\255\255\
\255\255\255\255\255\255\255\255\080\001\255\255\082\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\091\001\
\092\001\000\000\094\001\095\001\096\001\097\001\255\255\255\255\
\255\255\255\255\255\255\103\001\255\255\105\001\255\255\255\255\
\108\001\255\255\255\255\111\001\255\255\255\255\255\255\115\001\
\255\255\000\001\001\001\002\001\003\001\255\255\255\255\255\255\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\255\255\
\255\255\040\001\041\001\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\255\255\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\255\255\082\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\091\001\092\001\255\255\094\001\
\095\001\096\001\097\001\255\255\255\255\255\255\255\255\255\255\
\103\001\255\255\105\001\255\255\255\255\108\001\255\255\255\255\
\111\001\255\255\255\255\255\255\115\001\000\001\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\040\001\041\001\042\001\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\061\001\255\255\063\001\255\255\255\255\255\255\
\067\001\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\255\255\255\255\255\255\000\000\255\255\080\001\255\255\082\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\091\001\092\001\255\255\094\001\095\001\096\001\097\001\255\255\
\255\255\255\255\255\255\255\255\103\001\255\255\105\001\255\255\
\255\255\108\001\255\255\255\255\111\001\255\255\255\255\255\255\
\115\001\000\001\001\001\002\001\003\001\255\255\255\255\255\255\
\255\255\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\255\255\
\255\255\040\001\041\001\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\061\001\255\255\
\063\001\255\255\255\255\000\000\067\001\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\255\255\082\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\091\001\092\001\255\255\094\001\
\095\001\096\001\097\001\255\255\255\255\255\255\255\255\255\255\
\103\001\255\255\105\001\255\255\255\255\108\001\000\001\255\255\
\111\001\003\001\255\255\255\255\115\001\255\255\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\255\255\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\255\255\255\255\040\001\041\001\
\053\001\255\255\055\001\255\255\057\001\058\001\059\001\049\001\
\061\001\255\255\255\255\064\001\065\001\255\255\255\255\255\255\
\255\255\255\255\060\001\000\000\255\255\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\255\255\073\001\
\074\001\255\255\255\255\255\255\255\255\090\001\080\001\255\255\
\082\001\255\255\255\255\255\255\097\001\255\255\255\255\255\255\
\255\255\091\001\092\001\255\255\094\001\095\001\096\001\097\001\
\109\001\110\001\255\255\255\255\255\255\103\001\255\255\105\001\
\255\255\255\255\108\001\000\001\255\255\111\001\003\001\255\255\
\255\255\115\001\255\255\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\082\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\103\001\000\001\105\001\255\255\003\001\108\001\
\255\255\255\255\111\001\008\001\255\255\010\001\115\001\255\255\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\103\001\000\001\105\001\255\255\003\001\108\001\
\255\255\255\255\111\001\008\001\255\255\010\001\115\001\255\255\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\255\255\000\000\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\103\001\000\001\105\001\255\255\003\001\108\001\
\255\255\255\255\111\001\008\001\255\255\010\001\115\001\255\255\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\255\255\000\000\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\103\001\000\001\105\001\255\255\003\001\108\001\
\255\255\255\255\111\001\008\001\255\255\010\001\115\001\255\255\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\103\001\255\255\105\001\255\255\255\255\108\001\
\255\255\000\001\111\001\002\001\003\001\004\001\115\001\255\255\
\255\255\008\001\255\255\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\017\001\018\001\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\255\255\000\000\
\255\255\048\001\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\255\255\255\255\
\063\001\064\001\255\255\066\001\067\001\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\091\001\092\001\255\255\094\001\
\095\001\096\001\097\001\255\255\255\255\100\001\255\255\255\255\
\255\255\000\001\255\255\255\255\003\001\108\001\109\001\255\255\
\111\001\008\001\255\255\010\001\115\001\255\255\013\001\014\001\
\255\255\255\255\017\001\255\255\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\037\001\255\255\
\255\255\040\001\041\001\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\255\255\255\255\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\255\255\000\000\255\255\255\255\
\255\255\080\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\091\001\092\001\255\255\094\001\
\095\001\096\001\097\001\255\255\000\001\255\255\255\255\003\001\
\103\001\255\255\105\001\255\255\008\001\108\001\010\001\255\255\
\111\001\013\001\014\001\255\255\115\001\017\001\255\255\019\001\
\020\001\021\001\255\255\255\255\024\001\025\001\026\001\255\255\
\028\001\029\001\000\001\255\255\255\255\003\001\255\255\255\255\
\255\255\037\001\255\255\255\255\040\001\041\001\255\255\013\001\
\255\255\255\255\000\000\255\255\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\255\255\028\001\029\001\
\060\001\255\255\255\255\063\001\255\255\255\255\255\255\067\001\
\068\001\255\255\070\001\041\001\255\255\073\001\074\001\255\255\
\000\000\255\255\255\255\255\255\080\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\091\001\
\092\001\255\255\094\001\095\001\096\001\097\001\068\001\000\001\
\255\255\255\255\003\001\103\001\074\001\105\001\255\255\008\001\
\108\001\010\001\080\001\111\001\013\001\014\001\255\255\115\001\
\017\001\255\255\019\001\020\001\021\001\255\255\092\001\024\001\
\025\001\026\001\096\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\037\001\255\255\108\001\040\001\
\041\001\111\001\255\255\255\255\255\255\000\000\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\255\255\255\255\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\255\255\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\091\001\092\001\255\255\094\001\095\001\096\001\
\097\001\255\255\255\255\255\255\255\255\255\255\103\001\000\001\
\105\001\255\255\003\001\108\001\255\255\255\255\111\001\008\001\
\255\255\010\001\115\001\255\255\013\001\014\001\255\255\255\255\
\017\001\255\255\019\001\020\001\021\001\255\255\255\255\024\001\
\025\001\026\001\255\255\028\001\029\001\000\001\255\255\255\255\
\255\255\255\255\255\255\255\255\037\001\255\255\255\255\040\001\
\041\001\255\255\013\001\255\255\255\255\000\000\255\255\255\255\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\028\001\029\001\060\001\255\255\255\255\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\041\001\255\255\
\073\001\074\001\255\255\000\000\255\255\255\255\255\255\080\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\091\001\092\001\255\255\094\001\095\001\096\001\
\097\001\068\001\000\001\255\255\255\255\003\001\103\001\074\001\
\105\001\255\255\008\001\108\001\010\001\080\001\111\001\013\001\
\014\001\255\255\115\001\017\001\255\255\019\001\020\001\021\001\
\255\255\092\001\024\001\025\001\026\001\096\001\028\001\029\001\
\000\001\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\255\255\108\001\040\001\041\001\111\001\013\001\255\255\255\255\
\000\000\255\255\255\255\049\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\029\001\060\001\255\255\
\255\255\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\070\001\041\001\255\255\073\001\074\001\255\255\000\000\255\255\
\255\255\255\255\080\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\091\001\092\001\255\255\
\094\001\095\001\096\001\097\001\068\001\000\001\255\255\255\255\
\003\001\103\001\074\001\105\001\255\255\008\001\108\001\010\001\
\080\001\111\001\013\001\014\001\255\255\115\001\017\001\255\255\
\019\001\020\001\021\001\255\255\092\001\024\001\025\001\026\001\
\096\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\037\001\255\255\108\001\040\001\041\001\111\001\
\255\255\255\255\255\255\000\000\255\255\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\067\001\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\255\255\255\255\255\255\255\255\255\255\080\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\091\001\092\001\255\255\094\001\095\001\096\001\097\001\255\255\
\255\255\255\255\255\255\255\255\103\001\000\001\105\001\255\255\
\003\001\108\001\255\255\255\255\111\001\008\001\255\255\010\001\
\115\001\255\255\013\001\014\001\255\255\255\255\017\001\255\255\
\019\001\020\001\021\001\255\255\255\255\024\001\025\001\026\001\
\255\255\028\001\029\001\000\001\255\255\255\255\255\255\255\255\
\255\255\255\255\037\001\255\255\255\255\040\001\041\001\255\255\
\013\001\255\255\255\255\000\000\255\255\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\255\255\028\001\
\029\001\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\067\001\068\001\255\255\070\001\041\001\255\255\073\001\074\001\
\255\255\255\255\255\255\255\255\255\255\080\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\091\001\092\001\255\255\094\001\095\001\096\001\097\001\068\001\
\000\001\255\255\255\255\003\001\103\001\074\001\105\001\255\255\
\008\001\108\001\010\001\080\001\111\001\013\001\014\001\255\255\
\115\001\017\001\255\255\019\001\020\001\021\001\255\255\092\001\
\024\001\025\001\026\001\096\001\028\001\029\001\000\001\255\255\
\255\255\255\255\255\255\255\255\255\255\037\001\255\255\108\001\
\040\001\041\001\111\001\013\001\255\255\255\255\000\000\255\255\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\028\001\029\001\060\001\255\255\255\255\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\041\001\
\255\255\073\001\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\091\001\092\001\255\255\094\001\095\001\
\096\001\097\001\068\001\000\001\255\255\255\255\003\001\103\001\
\074\001\105\001\255\255\008\001\108\001\010\001\080\001\111\001\
\013\001\014\001\255\255\115\001\017\001\255\255\019\001\020\001\
\021\001\255\255\092\001\024\001\025\001\026\001\096\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\255\255\108\001\040\001\041\001\111\001\255\255\255\255\
\255\255\000\000\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\103\001\000\001\105\001\255\255\003\001\108\001\
\255\255\255\255\111\001\008\001\255\255\010\001\115\001\255\255\
\013\001\014\001\255\255\255\255\017\001\255\255\019\001\020\001\
\021\001\255\255\255\255\024\001\025\001\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\255\255\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\000\001\255\255\
\255\255\003\001\103\001\255\255\105\001\255\255\008\001\108\001\
\010\001\255\255\111\001\013\001\014\001\255\255\115\001\017\001\
\255\255\019\001\020\001\021\001\255\255\255\255\024\001\025\001\
\026\001\255\255\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\255\255\255\255\040\001\041\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\255\255\255\255\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\255\255\073\001\
\074\001\255\255\255\255\255\255\255\255\255\255\080\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\091\001\092\001\255\255\094\001\095\001\096\001\097\001\
\255\255\000\001\255\255\255\255\003\001\103\001\255\255\105\001\
\255\255\008\001\108\001\010\001\255\255\111\001\013\001\014\001\
\255\255\115\001\017\001\255\255\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\037\001\255\255\
\255\255\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\060\001\255\255\255\255\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\091\001\092\001\255\255\094\001\
\095\001\096\001\097\001\255\255\255\255\255\255\255\255\255\255\
\103\001\000\001\105\001\255\255\003\001\108\001\255\255\255\255\
\111\001\008\001\255\255\010\001\115\001\255\255\013\001\014\001\
\255\255\255\255\017\001\255\255\019\001\020\001\021\001\255\255\
\255\255\024\001\025\001\026\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\037\001\255\255\
\255\255\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\255\255\255\255\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\255\255\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\091\001\092\001\255\255\094\001\
\255\255\096\001\097\001\255\255\000\001\255\255\255\255\003\001\
\103\001\255\255\105\001\255\255\008\001\108\001\010\001\255\255\
\111\001\013\001\014\001\255\255\115\001\017\001\255\255\019\001\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\037\001\255\255\255\255\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\060\001\255\255\255\255\063\001\255\255\255\255\255\255\067\001\
\068\001\255\255\070\001\255\255\255\255\073\001\074\001\255\255\
\255\255\255\255\255\255\255\255\080\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\091\001\
\092\001\255\255\094\001\095\001\096\001\097\001\255\255\255\255\
\255\255\255\255\255\255\103\001\255\255\105\001\255\255\255\255\
\108\001\255\255\000\001\111\001\002\001\003\001\004\001\115\001\
\255\255\255\255\008\001\255\255\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\017\001\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\255\255\255\255\008\001\255\255\255\255\255\255\036\001\255\255\
\255\255\255\255\040\001\041\001\255\255\000\000\255\255\255\255\
\255\255\023\001\048\001\049\001\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\255\255\063\001\255\255\255\255\066\001\067\001\068\001\255\255\
\070\001\255\255\255\255\073\001\074\001\255\255\255\255\255\255\
\255\255\055\001\080\001\057\001\058\001\059\001\255\255\061\001\
\255\255\255\255\064\001\065\001\255\255\091\001\092\001\255\255\
\094\001\095\001\096\001\255\255\255\255\000\001\100\001\002\001\
\003\001\004\001\255\255\081\001\255\255\008\001\108\001\255\255\
\255\255\111\001\013\001\089\001\090\001\115\001\017\001\018\001\
\019\001\255\255\255\255\097\001\255\255\255\255\255\255\026\001\
\027\001\028\001\029\001\255\255\106\001\255\255\255\255\109\001\
\110\001\036\001\255\255\255\255\255\255\040\001\041\001\255\255\
\000\000\255\255\255\255\255\255\255\255\048\001\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\066\001\
\067\001\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\255\255\255\255\255\255\255\255\055\001\080\001\057\001\058\001\
\059\001\255\255\061\001\255\255\255\255\064\001\065\001\255\255\
\091\001\092\001\255\255\094\001\095\001\096\001\255\255\074\001\
\000\001\100\001\002\001\003\001\004\001\255\255\081\001\255\255\
\008\001\108\001\255\255\255\255\111\001\013\001\089\001\090\001\
\115\001\017\001\018\001\019\001\255\255\255\255\097\001\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\109\001\110\001\036\001\255\255\255\255\255\255\
\255\255\041\001\255\255\000\000\255\255\255\255\255\255\255\255\
\048\001\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\063\001\
\255\255\255\255\066\001\067\001\068\001\255\255\070\001\255\255\
\255\255\073\001\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\091\001\092\001\255\255\094\001\095\001\
\096\001\097\001\255\255\255\255\255\255\000\001\255\255\002\001\
\003\001\004\001\255\255\255\255\108\001\008\001\255\255\111\001\
\255\255\255\255\013\001\115\001\255\255\255\255\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\255\255\255\255\255\255\255\255\041\001\255\255\
\000\000\255\255\255\255\255\255\255\255\048\001\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\066\001\
\067\001\068\001\255\255\070\001\255\255\255\255\073\001\074\001\
\255\255\255\255\255\255\255\255\055\001\080\001\057\001\058\001\
\059\001\255\255\061\001\255\255\255\255\064\001\065\001\255\255\
\091\001\092\001\255\255\094\001\095\001\096\001\097\001\255\255\
\000\001\255\255\002\001\003\001\004\001\255\255\081\001\255\255\
\008\001\108\001\255\255\255\255\111\001\013\001\089\001\090\001\
\115\001\017\001\018\001\019\001\255\255\255\255\097\001\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\108\001\109\001\110\001\036\001\255\255\255\255\255\255\
\255\255\041\001\255\255\000\000\255\255\255\255\255\255\255\255\
\048\001\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\063\001\
\255\255\255\255\066\001\067\001\068\001\255\255\070\001\255\255\
\255\255\255\255\074\001\255\255\255\255\255\255\255\255\055\001\
\080\001\057\001\058\001\059\001\255\255\061\001\255\255\255\255\
\064\001\065\001\255\255\091\001\092\001\255\255\094\001\095\001\
\096\001\097\001\255\255\000\001\255\255\002\001\003\001\004\001\
\255\255\081\001\255\255\008\001\108\001\255\255\255\255\111\001\
\013\001\089\001\090\001\115\001\017\001\018\001\019\001\255\255\
\255\255\097\001\255\255\255\255\255\255\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\109\001\110\001\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\000\000\255\255\
\255\255\255\255\255\255\048\001\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\255\255\255\255\255\255\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\255\255\255\255\
\000\001\000\000\002\001\003\001\004\001\255\255\255\255\108\001\
\008\001\255\255\111\001\255\255\255\255\013\001\115\001\255\255\
\255\255\017\001\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\255\255\255\255\
\255\255\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\048\001\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\060\001\255\255\255\255\063\001\
\255\255\255\255\066\001\067\001\068\001\255\255\070\001\255\255\
\255\255\255\255\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\091\001\092\001\255\255\094\001\095\001\
\096\001\097\001\255\255\000\001\255\255\002\001\003\001\004\001\
\255\255\255\255\255\255\008\001\108\001\255\255\255\255\111\001\
\013\001\255\255\255\255\115\001\017\001\018\001\019\001\255\255\
\255\255\000\000\255\255\255\255\255\255\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\048\001\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\255\255\255\255\063\001\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\255\255\255\255\255\255\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\091\001\092\001\
\255\255\094\001\095\001\096\001\097\001\255\255\000\001\255\255\
\002\001\003\001\255\255\255\255\255\255\255\255\008\001\108\001\
\255\255\255\255\111\001\013\001\255\255\255\255\115\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\255\255\255\255\255\255\000\000\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\048\001\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\001\060\001\255\255\003\001\063\001\255\255\255\255\
\066\001\067\001\068\001\255\255\070\001\255\255\013\001\014\001\
\074\001\255\255\017\001\255\255\255\255\255\255\080\001\255\255\
\255\255\255\255\255\255\026\001\027\001\028\001\029\001\000\000\
\255\255\091\001\092\001\255\255\094\001\095\001\096\001\097\001\
\255\255\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\255\255\255\255\111\001\255\255\255\255\
\255\255\115\001\255\255\000\001\255\255\060\001\003\001\255\255\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\255\255\
\013\001\255\255\073\001\074\001\017\001\255\255\255\255\255\255\
\255\255\080\001\255\255\255\255\255\255\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\092\001\255\255\094\001\
\255\255\096\001\097\001\255\255\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\255\255\
\111\001\255\255\255\255\255\255\115\001\255\255\255\255\060\001\
\255\255\000\001\063\001\255\255\003\001\066\001\067\001\068\001\
\255\255\255\255\255\255\255\255\073\001\074\001\013\001\255\255\
\255\255\255\255\017\001\080\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\026\001\027\001\028\001\029\001\092\001\
\255\255\094\001\255\255\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\255\255\108\001\
\255\255\255\255\111\001\255\255\255\255\255\255\115\001\255\255\
\255\255\255\255\255\255\255\255\000\001\060\001\255\255\003\001\
\063\001\255\255\255\255\066\001\067\001\068\001\255\255\255\255\
\255\255\013\001\073\001\074\001\255\255\017\001\255\255\255\255\
\255\255\080\001\255\255\255\255\255\255\255\255\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\092\001\255\255\094\001\
\255\255\096\001\097\001\255\255\255\255\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\255\255\
\111\001\255\255\255\255\255\255\115\001\255\255\000\001\255\255\
\060\001\003\001\255\255\063\001\255\255\255\255\066\001\067\001\
\068\001\255\255\255\255\013\001\255\255\073\001\074\001\017\001\
\000\000\019\001\255\255\255\255\080\001\255\255\255\255\255\255\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\092\001\255\255\094\001\255\255\096\001\097\001\255\255\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\001\
\108\001\255\255\003\001\111\001\255\255\255\255\255\255\115\001\
\255\255\255\255\060\001\255\255\013\001\063\001\255\255\255\255\
\017\001\067\001\068\001\255\255\255\255\255\255\255\255\073\001\
\074\001\026\001\027\001\028\001\029\001\255\255\080\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\255\255\092\001\255\255\094\001\255\255\096\001\097\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\108\001\060\001\255\255\111\001\063\001\255\255\
\255\255\115\001\067\001\068\001\255\255\255\255\255\255\255\255\
\073\001\074\001\055\001\255\255\057\001\058\001\059\001\080\001\
\061\001\255\255\063\001\064\001\065\001\255\255\255\255\255\255\
\255\255\255\255\255\255\092\001\255\255\094\001\255\255\096\001\
\097\001\078\001\255\255\255\255\081\001\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\089\001\090\001\111\001\255\255\
\000\001\255\255\115\001\003\001\097\001\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\255\255\255\255\
\109\001\110\001\255\255\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\255\255\255\255\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\000\000\063\001\
\064\001\065\001\255\255\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\075\001\255\255\077\001\078\001\255\255\
\080\001\081\001\255\255\255\255\084\001\085\001\255\255\087\001\
\088\001\089\001\090\001\091\001\092\001\093\001\255\255\095\001\
\096\001\097\001\255\255\099\001\255\255\101\001\102\001\255\255\
\104\001\255\255\106\001\107\001\108\001\109\001\110\001\111\001\
\112\001\255\255\114\001\255\255\255\255\005\001\006\001\007\001\
\255\255\255\255\255\255\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\255\255\255\255\039\001\
\255\255\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\050\001\255\255\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\059\001\060\001\255\255\000\000\063\001\
\064\001\065\001\255\255\255\255\068\001\069\001\255\255\071\001\
\072\001\255\255\074\001\255\255\255\255\255\255\078\001\255\255\
\080\001\000\000\255\255\255\255\084\001\085\001\255\255\087\001\
\255\255\255\255\255\255\255\255\005\001\006\001\007\001\255\255\
\096\001\097\001\011\001\012\001\013\001\101\001\255\255\255\255\
\255\255\255\255\106\001\107\001\108\001\109\001\110\001\111\001\
\255\255\255\255\114\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\255\255\255\255\255\255\039\001\255\255\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\255\255\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\060\001\255\255\255\255\063\001\064\001\
\065\001\255\255\255\255\068\001\069\001\255\255\071\001\072\001\
\255\255\074\001\255\255\255\255\255\255\078\001\255\255\080\001\
\255\255\255\255\000\000\084\001\085\001\055\001\087\001\057\001\
\058\001\059\001\255\255\061\001\255\255\255\255\064\001\065\001\
\097\001\255\255\255\255\255\255\101\001\255\255\255\255\255\255\
\255\255\106\001\107\001\108\001\109\001\110\001\111\001\081\001\
\255\255\114\001\255\255\255\255\255\255\255\255\255\255\089\001\
\090\001\255\255\255\255\005\001\006\001\007\001\255\255\097\001\
\255\255\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\109\001\110\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\255\255\255\255\000\000\039\001\255\255\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\050\001\255\255\052\001\053\001\054\001\055\001\056\001\255\255\
\255\255\059\001\060\001\255\255\255\255\063\001\064\001\065\001\
\255\255\255\255\068\001\069\001\255\255\071\001\072\001\255\255\
\074\001\255\255\255\255\255\255\078\001\255\255\080\001\255\255\
\255\255\255\255\084\001\085\001\255\255\087\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\097\001\
\255\255\255\255\255\255\101\001\255\255\255\255\255\255\255\255\
\106\001\107\001\108\001\109\001\110\001\111\001\000\001\255\255\
\114\001\255\255\004\001\255\255\006\001\255\255\008\001\255\255\
\010\001\255\255\012\001\255\255\014\001\015\001\255\255\017\001\
\018\001\000\001\255\255\255\255\003\001\255\255\255\255\255\255\
\255\255\027\001\028\001\255\255\030\001\031\001\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\026\001\255\255\028\001\029\001\255\255\
\050\001\051\001\052\001\053\001\255\255\055\001\056\001\255\255\
\255\255\059\001\041\001\255\255\255\255\255\255\064\001\065\001\
\066\001\255\255\255\255\255\255\255\255\071\001\255\255\073\001\
\255\255\255\255\255\255\255\255\255\255\060\001\255\255\081\001\
\255\255\255\255\084\001\255\255\067\001\068\001\255\255\089\001\
\255\255\091\001\092\001\074\001\094\001\095\001\255\255\097\001\
\255\255\080\001\000\000\101\001\255\255\255\255\104\001\255\255\
\106\001\255\255\000\001\109\001\110\001\092\001\004\001\113\001\
\006\001\096\001\008\001\255\255\010\001\255\255\012\001\255\255\
\014\001\015\001\255\255\017\001\018\001\108\001\255\255\255\255\
\111\001\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\050\001\051\001\255\255\053\001\
\000\000\055\001\056\001\255\255\255\255\059\001\255\255\255\255\
\255\255\255\255\064\001\065\001\066\001\255\255\255\255\255\255\
\255\255\071\001\255\255\073\001\000\001\255\255\255\255\003\001\
\255\255\255\255\255\255\081\001\008\001\255\255\084\001\255\255\
\255\255\013\001\255\255\089\001\255\255\091\001\092\001\019\001\
\094\001\095\001\255\255\097\001\255\255\255\255\026\001\101\001\
\028\001\029\001\104\001\255\255\106\001\255\255\255\255\109\001\
\110\001\255\255\000\000\113\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\001\255\255\
\060\001\003\001\255\255\063\001\255\255\255\255\066\001\067\001\
\068\001\255\255\255\255\013\001\255\255\073\001\074\001\255\255\
\255\255\255\255\255\255\055\001\080\001\057\001\058\001\059\001\
\026\001\061\001\028\001\029\001\064\001\065\001\255\255\255\255\
\092\001\255\255\255\255\255\255\096\001\097\001\255\255\041\001\
\100\001\255\255\255\255\255\255\255\255\081\001\255\255\255\255\
\108\001\255\255\000\000\111\001\255\255\089\001\090\001\255\255\
\000\001\255\255\060\001\003\001\255\255\097\001\064\001\255\255\
\066\001\067\001\068\001\255\255\255\255\013\001\255\255\073\001\
\074\001\109\001\110\001\255\255\255\255\255\255\080\001\255\255\
\255\255\255\255\026\001\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\092\001\255\255\255\255\255\255\096\001\097\001\
\255\255\041\001\100\001\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\108\001\109\001\255\255\111\001\255\255\255\255\
\255\255\255\255\000\001\255\255\060\001\003\001\255\255\255\255\
\064\001\255\255\066\001\067\001\068\001\255\255\255\255\013\001\
\255\255\073\001\074\001\017\001\255\255\255\255\255\255\255\255\
\080\001\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\092\001\255\255\255\255\255\255\
\096\001\097\001\255\255\041\001\100\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\109\001\255\255\111\001\
\255\255\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\000\001\063\001\000\000\003\001\255\255\067\001\068\001\255\255\
\008\001\255\255\255\255\255\255\074\001\013\001\255\255\255\255\
\255\255\255\255\080\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\029\001\092\001\255\255\
\094\001\255\255\096\001\097\001\255\255\255\255\255\255\255\255\
\255\255\041\001\255\255\255\255\255\255\255\255\108\001\255\255\
\255\255\111\001\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\000\001\255\255\060\001\003\001\255\255\063\001\
\000\000\255\255\066\001\067\001\068\001\255\255\255\255\013\001\
\255\255\255\255\074\001\017\001\255\255\255\255\255\255\255\255\
\080\001\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\092\001\255\255\255\255\255\255\
\096\001\097\001\255\255\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\255\255\255\255\111\001\
\255\255\255\255\255\255\255\255\255\255\000\000\060\001\255\255\
\255\255\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\255\255\255\255\000\001\255\255\074\001\003\001\255\255\255\255\
\255\255\255\255\080\001\255\255\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\255\255\255\255\019\001\092\001\255\255\
\094\001\255\255\096\001\097\001\026\001\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\108\001\255\255\
\255\255\111\001\000\000\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\048\001\255\255\255\255\255\255\255\255\000\001\
\255\255\255\255\003\001\255\255\255\255\255\255\060\001\255\255\
\255\255\063\001\255\255\255\255\013\001\067\001\068\001\255\255\
\070\001\255\255\019\001\255\255\074\001\255\255\255\255\255\255\
\255\255\026\001\080\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\092\001\000\000\
\041\001\255\255\096\001\097\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\108\001\255\255\
\255\255\111\001\255\255\060\001\255\255\255\255\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\255\255\255\255\255\255\
\255\255\074\001\000\001\255\255\255\255\003\001\255\255\080\001\
\255\255\255\255\008\001\255\255\255\255\086\001\255\255\013\001\
\255\255\255\255\255\255\092\001\000\000\019\001\255\255\096\001\
\097\001\255\255\255\255\255\255\026\001\000\000\028\001\029\001\
\255\255\255\255\255\255\108\001\255\255\255\255\111\001\255\255\
\255\255\255\255\255\255\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\001\
\255\255\255\255\003\001\255\255\255\255\255\255\060\001\255\255\
\000\001\063\001\255\255\003\001\013\001\067\001\068\001\255\255\
\255\255\255\255\019\001\255\255\074\001\013\001\255\255\255\255\
\255\255\026\001\080\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\029\001\092\001\255\255\
\041\001\255\255\096\001\097\001\255\255\000\000\255\255\255\255\
\040\001\041\001\255\255\255\255\255\255\255\255\108\001\255\255\
\255\255\111\001\255\255\060\001\255\255\000\001\063\001\255\255\
\003\001\255\255\067\001\068\001\060\001\255\255\255\255\063\001\
\255\255\074\001\013\001\067\001\068\001\255\255\255\255\080\001\
\019\001\255\255\074\001\255\255\255\255\255\255\255\255\026\001\
\080\001\028\001\029\001\092\001\255\255\255\255\000\000\096\001\
\097\001\255\255\255\255\255\255\092\001\255\255\041\001\000\000\
\096\001\097\001\255\255\108\001\255\255\255\255\111\001\255\255\
\255\255\255\255\000\001\255\255\108\001\003\001\255\255\111\001\
\255\255\060\001\255\255\255\255\063\001\255\255\255\255\013\001\
\067\001\068\001\255\255\255\255\255\255\019\001\255\255\074\001\
\255\255\255\255\255\255\255\255\026\001\080\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\092\001\255\255\041\001\255\255\096\001\097\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\001\
\255\255\108\001\003\001\255\255\111\001\255\255\060\001\255\255\
\255\255\063\001\255\255\255\255\013\001\067\001\068\001\255\255\
\255\255\255\255\019\001\255\255\074\001\255\255\255\255\255\255\
\255\255\026\001\080\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\092\001\255\255\
\041\001\000\000\096\001\097\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\001\255\255\108\001\003\001\
\255\255\111\001\255\255\060\001\255\255\000\001\063\001\255\255\
\255\255\013\001\067\001\068\001\255\255\008\001\255\255\019\001\
\255\255\074\001\013\001\255\255\255\255\255\255\026\001\080\001\
\028\001\029\001\255\255\255\255\255\255\000\000\255\255\026\001\
\255\255\028\001\029\001\092\001\255\255\041\001\000\000\096\001\
\097\001\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\255\255\255\255\255\255\108\001\255\255\255\255\111\001\255\255\
\060\001\255\255\255\255\063\001\255\255\255\255\255\255\067\001\
\068\001\060\001\255\255\255\255\063\001\255\255\074\001\066\001\
\067\001\068\001\255\255\255\255\080\001\000\001\255\255\074\001\
\003\001\255\255\255\255\255\255\255\255\080\001\255\255\000\000\
\092\001\255\255\013\001\255\255\096\001\097\001\255\255\255\255\
\019\001\092\001\255\255\255\255\255\255\096\001\097\001\026\001\
\108\001\028\001\029\001\111\001\255\255\255\255\255\255\255\255\
\255\255\108\001\255\255\255\255\111\001\255\255\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\001\
\255\255\060\001\255\255\013\001\063\001\255\255\255\255\008\001\
\067\001\068\001\255\255\255\255\013\001\255\255\255\255\074\001\
\026\001\255\255\028\001\029\001\255\255\080\001\255\255\255\255\
\000\000\026\001\255\255\028\001\029\001\255\255\255\255\041\001\
\255\255\092\001\255\255\255\255\255\255\096\001\097\001\255\255\
\041\001\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\000\001\108\001\060\001\255\255\111\001\063\001\000\000\255\255\
\066\001\067\001\068\001\060\001\255\255\013\001\063\001\255\255\
\074\001\255\255\067\001\068\001\255\255\255\255\080\001\255\255\
\255\255\074\001\026\001\255\255\028\001\029\001\255\255\080\001\
\255\255\255\255\092\001\255\255\255\255\255\255\096\001\097\001\
\255\255\041\001\255\255\092\001\255\255\255\255\255\255\096\001\
\097\001\255\255\108\001\255\255\255\255\111\001\255\255\255\255\
\255\255\000\001\255\255\108\001\060\001\255\255\111\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\013\001\255\255\
\255\255\255\255\074\001\255\255\255\255\255\255\000\000\255\255\
\080\001\255\255\255\255\026\001\255\255\028\001\029\001\255\255\
\255\255\255\255\255\255\255\255\092\001\255\255\255\255\255\255\
\096\001\097\001\041\001\000\000\255\255\000\001\255\255\255\255\
\003\001\255\255\255\255\255\255\108\001\255\255\000\001\111\001\
\255\255\255\255\013\001\255\255\255\255\060\001\255\255\255\255\
\063\001\255\255\255\255\013\001\067\001\068\001\255\255\026\001\
\255\255\028\001\029\001\074\001\255\255\255\255\255\255\255\255\
\026\001\080\001\028\001\029\001\255\255\255\255\041\001\000\000\
\255\255\255\255\255\255\255\255\255\255\092\001\255\255\041\001\
\255\255\096\001\097\001\255\255\255\255\255\255\255\255\000\001\
\255\255\060\001\255\255\255\255\063\001\108\001\255\255\255\255\
\111\001\068\001\060\001\255\255\013\001\063\001\255\255\074\001\
\255\255\067\001\068\001\255\255\255\255\080\001\255\255\255\255\
\074\001\026\001\255\255\028\001\029\001\255\255\080\001\255\255\
\000\000\092\001\255\255\255\255\255\255\096\001\097\001\255\255\
\041\001\255\255\092\001\255\255\255\255\255\255\096\001\097\001\
\255\255\108\001\255\255\255\255\111\001\255\255\255\255\255\255\
\255\255\255\255\108\001\060\001\255\255\111\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\255\255\255\255\255\255\
\000\001\074\001\255\255\255\255\255\255\255\255\255\255\080\001\
\008\001\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\092\001\255\255\000\001\255\255\096\001\
\097\001\255\255\026\001\255\255\028\001\029\001\000\001\255\255\
\255\255\255\255\013\001\108\001\255\255\255\255\111\001\255\255\
\255\255\041\001\255\255\013\001\255\255\255\255\255\255\026\001\
\255\255\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\028\001\029\001\060\001\255\255\041\001\255\255\
\255\255\255\255\066\001\067\001\068\001\255\255\255\255\041\001\
\255\255\255\255\074\001\255\255\255\255\255\255\255\255\255\255\
\080\001\060\001\255\255\255\255\063\001\255\255\255\255\255\255\
\255\255\068\001\060\001\255\255\092\001\063\001\255\255\074\001\
\096\001\255\255\068\001\255\255\255\255\080\001\000\001\255\255\
\074\001\255\255\255\255\255\255\108\001\255\255\080\001\111\001\
\255\255\092\001\255\255\013\001\255\255\096\001\097\001\255\255\
\255\255\255\255\092\001\000\001\255\255\255\255\096\001\097\001\
\026\001\108\001\028\001\029\001\111\001\255\255\255\255\255\255\
\013\001\255\255\108\001\255\255\255\255\111\001\255\255\041\001\
\255\255\255\255\255\255\255\255\255\255\026\001\255\255\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\060\001\255\255\041\001\063\001\255\255\000\001\
\255\255\255\255\068\001\255\255\255\255\255\255\255\255\255\255\
\074\001\255\255\255\255\255\255\013\001\255\255\080\001\060\001\
\255\255\255\255\063\001\255\255\255\255\255\255\255\255\068\001\
\255\255\026\001\092\001\028\001\029\001\074\001\096\001\097\001\
\255\255\255\255\255\255\080\001\255\255\255\255\255\255\255\255\
\041\001\255\255\108\001\255\255\255\255\111\001\255\255\092\001\
\000\001\255\255\255\255\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\255\255\013\001\063\001\108\001\
\255\255\255\255\111\001\068\001\255\255\255\255\255\255\255\255\
\255\255\074\001\026\001\255\255\028\001\029\001\255\255\080\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\041\001\255\255\092\001\255\255\255\255\255\255\096\001\
\097\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\060\001\255\255\111\001\255\255\
\255\255\255\255\255\255\067\001\068\001\255\255\255\255\000\001\
\255\255\255\255\074\001\255\255\005\001\006\001\007\001\008\001\
\080\001\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\019\001\255\255\092\001\255\255\255\255\255\255\
\096\001\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\255\255\108\001\255\255\039\001\111\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\060\001\255\255\255\255\063\001\064\001\
\065\001\066\001\255\255\068\001\069\001\070\001\071\001\072\001\
\255\255\074\001\255\255\255\255\077\001\078\001\255\255\080\001\
\081\001\255\255\255\255\084\001\085\001\255\255\087\001\255\255\
\089\001\090\001\255\255\092\001\093\001\255\255\255\255\096\001\
\097\001\255\255\099\001\255\255\101\001\102\001\255\255\104\001\
\255\255\106\001\107\001\108\001\109\001\110\001\111\001\112\001\
\000\001\114\001\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\255\255\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\059\001\060\001\255\255\255\255\063\001\
\064\001\065\001\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\074\001\255\255\255\255\077\001\078\001\255\255\
\255\255\081\001\255\255\255\255\084\001\085\001\255\255\087\001\
\255\255\089\001\090\001\255\255\255\255\093\001\255\255\255\255\
\255\255\097\001\255\255\099\001\255\255\101\001\102\001\255\255\
\104\001\255\255\106\001\107\001\255\255\109\001\110\001\111\001\
\112\001\255\255\114\001\000\001\001\001\002\001\255\255\255\255\
\005\001\006\001\007\001\255\255\009\001\255\255\011\001\012\001\
\255\255\255\255\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\255\255\
\255\255\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\255\255\255\255\039\001\255\255\255\255\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\255\255\050\001\255\255\052\001\
\053\001\054\001\055\001\056\001\255\255\255\255\059\001\255\255\
\061\001\255\255\063\001\064\001\065\001\255\255\255\255\255\255\
\069\001\255\255\071\001\072\001\255\255\074\001\255\255\255\255\
\255\255\078\001\255\255\255\255\255\255\082\001\083\001\084\001\
\085\001\086\001\087\001\255\255\255\255\255\255\255\255\255\255\
\255\255\094\001\255\255\255\255\255\255\098\001\255\255\100\001\
\101\001\255\255\255\255\255\255\255\255\106\001\107\001\255\255\
\109\001\110\001\000\001\001\001\002\001\114\001\255\255\005\001\
\006\001\007\001\255\255\009\001\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\255\255\036\001\255\255\
\255\255\039\001\255\255\255\255\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\255\255\050\001\255\255\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\059\001\255\255\061\001\
\255\255\063\001\064\001\065\001\255\255\255\255\255\255\069\001\
\255\255\071\001\072\001\255\255\074\001\255\255\255\255\255\255\
\078\001\255\255\255\255\255\255\082\001\083\001\084\001\085\001\
\086\001\087\001\255\255\255\255\255\255\255\255\255\255\055\001\
\094\001\057\001\058\001\059\001\098\001\061\001\100\001\101\001\
\064\001\065\001\255\255\255\255\106\001\107\001\255\255\109\001\
\110\001\000\001\255\255\255\255\114\001\255\255\005\001\006\001\
\007\001\081\001\255\255\255\255\011\001\012\001\013\001\255\255\
\255\255\089\001\090\001\255\255\255\255\255\255\255\255\255\255\
\255\255\097\001\255\255\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\109\001\110\001\255\255\
\039\001\255\255\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\059\001\060\001\255\255\255\255\
\063\001\064\001\065\001\255\255\255\255\068\001\069\001\255\255\
\071\001\072\001\255\255\074\001\255\255\255\255\255\255\078\001\
\255\255\080\001\255\255\255\255\255\255\084\001\085\001\000\001\
\087\001\255\255\255\255\255\255\005\001\006\001\007\001\255\255\
\255\255\096\001\011\001\012\001\255\255\255\255\101\001\255\255\
\255\255\255\255\255\255\106\001\107\001\108\001\109\001\110\001\
\111\001\255\255\255\255\114\001\255\255\030\001\031\001\032\001\
\033\001\034\001\255\255\255\255\255\255\255\255\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\255\255\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\064\001\
\065\001\255\255\255\255\255\255\069\001\255\255\071\001\072\001\
\255\255\255\255\255\255\255\255\255\255\078\001\255\255\255\255\
\255\255\255\255\255\255\084\001\085\001\000\001\087\001\255\255\
\255\255\255\255\005\001\006\001\007\001\094\001\255\255\255\255\
\011\001\012\001\255\255\255\255\101\001\255\255\255\255\255\255\
\255\255\106\001\107\001\255\255\109\001\110\001\255\255\255\255\
\255\255\114\001\255\255\030\001\031\001\032\001\033\001\034\001\
\255\255\255\255\255\255\255\255\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\050\001\
\255\255\052\001\053\001\054\001\055\001\056\001\255\255\255\255\
\059\001\255\255\255\255\255\255\063\001\064\001\065\001\255\255\
\255\255\255\255\069\001\255\255\071\001\072\001\255\255\255\255\
\255\255\255\255\255\255\078\001\255\255\255\255\255\255\255\255\
\255\255\084\001\085\001\000\001\087\001\255\255\255\255\255\255\
\005\001\006\001\007\001\094\001\255\255\255\255\011\001\012\001\
\255\255\255\255\101\001\255\255\255\255\255\255\255\255\106\001\
\107\001\255\255\109\001\110\001\255\255\255\255\255\255\114\001\
\255\255\030\001\031\001\032\001\033\001\034\001\255\255\255\255\
\255\255\255\255\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\050\001\255\255\052\001\
\053\001\054\001\055\001\056\001\255\255\255\255\059\001\255\255\
\255\255\255\255\063\001\064\001\065\001\255\255\255\255\255\255\
\069\001\255\255\071\001\072\001\255\255\255\255\255\255\255\255\
\255\255\078\001\255\255\255\255\255\255\255\255\255\255\084\001\
\085\001\000\001\087\001\255\255\255\255\255\255\005\001\006\001\
\007\001\094\001\255\255\255\255\011\001\012\001\255\255\255\255\
\101\001\255\255\255\255\255\255\255\255\106\001\107\001\255\255\
\109\001\110\001\255\255\255\255\255\255\114\001\255\255\030\001\
\031\001\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\059\001\255\255\255\255\255\255\
\063\001\064\001\065\001\255\255\255\255\255\255\069\001\255\255\
\071\001\072\001\255\255\255\255\255\255\255\255\255\255\078\001\
\255\255\255\255\255\255\255\255\255\255\084\001\085\001\255\255\
\087\001\255\255\255\255\255\255\255\255\255\255\255\255\094\001\
\003\001\004\001\005\001\255\255\255\255\255\255\101\001\255\255\
\011\001\255\255\013\001\106\001\107\001\255\255\109\001\110\001\
\019\001\020\001\021\001\114\001\255\255\024\001\025\001\026\001\
\255\255\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\255\255\255\255\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\048\001\049\001\255\255\
\255\255\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\063\001\064\001\255\255\255\255\
\255\255\000\001\069\001\070\001\255\255\004\001\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\255\255\082\001\
\255\255\255\255\017\001\255\255\019\001\088\001\255\255\022\001\
\255\255\255\255\093\001\026\001\027\001\255\255\255\255\255\255\
\099\001\255\255\255\255\102\001\103\001\036\001\105\001\106\001\
\107\001\108\001\109\001\255\255\111\001\112\001\113\001\114\001\
\115\001\048\001\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\255\255\255\255\
\255\255\064\001\255\255\066\001\067\001\068\001\255\255\070\001\
\255\255\255\255\073\001\255\255\255\255\255\255\000\001\001\001\
\002\001\255\255\255\255\255\255\006\001\007\001\255\255\009\001\
\255\255\255\255\012\001\090\001\091\001\015\001\016\001\255\255\
\095\001\255\255\097\001\255\255\255\255\100\001\255\255\255\255\
\255\255\027\001\028\001\255\255\030\001\031\001\109\001\255\255\
\111\001\255\255\036\001\255\255\255\255\255\255\255\255\255\255\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\255\255\
\050\001\255\255\052\001\053\001\255\255\055\001\056\001\255\255\
\255\255\059\001\255\255\061\001\255\255\255\255\064\001\065\001\
\255\255\255\255\255\255\255\255\255\255\071\001\072\001\255\255\
\074\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\082\001\083\001\084\001\085\001\086\001\087\001\255\255\255\255\
\255\255\255\255\255\255\255\255\094\001\255\255\255\255\097\001\
\098\001\255\255\100\001\101\001\255\255\255\255\255\255\255\255\
\106\001\255\255\108\001\109\001\110\001\000\001\001\001\002\001\
\255\255\255\255\255\255\006\001\007\001\255\255\009\001\255\255\
\255\255\012\001\255\255\255\255\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\036\001\255\255\255\255\255\255\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\255\255\050\001\
\255\255\052\001\053\001\255\255\055\001\056\001\255\255\255\255\
\059\001\255\255\061\001\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\255\255\255\255\071\001\072\001\255\255\074\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\082\001\
\083\001\084\001\085\001\086\001\087\001\255\255\255\255\255\255\
\255\255\255\255\255\255\094\001\255\255\255\255\097\001\098\001\
\255\255\100\001\101\001\255\255\255\255\255\255\255\255\106\001\
\255\255\108\001\109\001\110\001\000\001\001\001\002\001\255\255\
\255\255\255\255\006\001\007\001\255\255\009\001\255\255\255\255\
\012\001\255\255\255\255\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\028\001\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\255\255\255\255\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\255\255\050\001\255\255\
\052\001\053\001\255\255\055\001\056\001\255\255\255\255\059\001\
\255\255\061\001\255\255\255\255\064\001\065\001\255\255\255\255\
\255\255\255\255\255\255\071\001\072\001\255\255\074\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\082\001\083\001\
\084\001\085\001\086\001\087\001\255\255\255\255\255\255\255\255\
\255\255\255\255\094\001\255\255\255\255\097\001\098\001\255\255\
\100\001\101\001\255\255\255\255\255\255\255\255\106\001\255\255\
\108\001\109\001\110\001\000\001\001\001\002\001\255\255\255\255\
\255\255\006\001\007\001\255\255\009\001\255\255\255\255\012\001\
\255\255\255\255\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\255\255\030\001\031\001\255\255\255\255\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\045\001\046\001\047\001\255\255\255\255\050\001\255\255\052\001\
\053\001\255\255\055\001\056\001\255\255\255\255\059\001\255\255\
\061\001\255\255\255\255\064\001\065\001\255\255\255\255\255\255\
\255\255\255\255\071\001\072\001\255\255\074\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\082\001\083\001\084\001\
\085\001\086\001\087\001\255\255\255\255\000\001\255\255\255\255\
\255\255\094\001\255\255\006\001\097\001\098\001\255\255\100\001\
\101\001\012\001\255\255\255\255\015\001\106\001\255\255\255\255\
\109\001\110\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\050\001\
\255\255\052\001\053\001\255\255\055\001\056\001\255\255\255\255\
\059\001\255\255\000\001\255\255\255\255\064\001\065\001\255\255\
\006\001\255\255\255\255\255\255\071\001\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\084\001\255\255\255\255\255\255\255\255\028\001\255\255\
\030\001\031\001\255\255\094\001\255\255\255\255\097\001\255\255\
\255\255\255\255\101\001\255\255\255\255\255\255\255\255\106\001\
\255\255\255\255\109\001\110\001\050\001\255\255\052\001\053\001\
\255\255\055\001\056\001\255\255\255\255\059\001\255\255\000\001\
\255\255\255\255\064\001\065\001\255\255\006\001\255\255\255\255\
\255\255\071\001\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\084\001\255\255\
\255\255\255\255\255\255\028\001\255\255\030\001\031\001\255\255\
\255\255\255\255\255\255\097\001\255\255\255\255\255\255\101\001\
\255\255\255\255\255\255\255\255\106\001\255\255\255\255\109\001\
\110\001\050\001\255\255\052\001\053\001\255\255\055\001\056\001\
\255\255\255\255\059\001\255\255\000\001\255\255\255\255\064\001\
\065\001\255\255\006\001\255\255\255\255\255\255\071\001\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\084\001\255\255\255\255\255\255\255\255\
\028\001\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\097\001\255\255\255\255\255\255\101\001\255\255\255\255\255\255\
\255\255\106\001\255\255\255\255\109\001\110\001\050\001\255\255\
\052\001\053\001\255\255\055\001\056\001\255\255\255\255\059\001\
\255\255\000\001\255\255\255\255\064\001\065\001\255\255\006\001\
\255\255\255\255\255\255\071\001\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\084\001\255\255\255\255\255\255\255\255\028\001\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\097\001\255\255\255\255\
\255\255\101\001\255\255\255\255\255\255\255\255\106\001\255\255\
\255\255\109\001\110\001\050\001\255\255\052\001\053\001\255\255\
\055\001\056\001\255\255\255\255\059\001\255\255\000\001\255\255\
\255\255\064\001\065\001\255\255\006\001\255\255\255\255\255\255\
\071\001\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\084\001\255\255\255\255\
\255\255\255\255\028\001\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\097\001\255\255\255\255\255\255\101\001\255\255\
\255\255\255\255\255\255\106\001\255\255\255\255\109\001\110\001\
\050\001\255\255\052\001\053\001\255\255\055\001\056\001\255\255\
\255\255\059\001\255\255\255\255\255\255\255\255\064\001\065\001\
\005\001\006\001\007\001\255\255\255\255\071\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\084\001\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\097\001\
\255\255\255\255\039\001\101\001\041\001\255\255\255\255\255\255\
\106\001\255\255\255\255\109\001\110\001\050\001\255\255\052\001\
\053\001\054\001\055\001\056\001\255\255\255\255\059\001\060\001\
\255\255\255\255\063\001\064\001\065\001\255\255\255\255\068\001\
\069\001\255\255\071\001\072\001\255\255\074\001\255\255\255\255\
\255\255\078\001\255\255\080\001\255\255\255\255\255\255\084\001\
\085\001\255\255\087\001\255\255\089\001\255\255\255\255\005\001\
\006\001\007\001\255\255\096\001\255\255\011\001\012\001\013\001\
\101\001\255\255\255\255\255\255\255\255\106\001\107\001\108\001\
\109\001\110\001\111\001\255\255\255\255\114\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\255\255\255\255\
\255\255\039\001\255\255\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\050\001\255\255\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\059\001\060\001\255\255\
\255\255\063\001\064\001\065\001\255\255\255\255\068\001\069\001\
\255\255\071\001\072\001\255\255\074\001\255\255\255\255\255\255\
\078\001\255\255\080\001\255\255\255\255\255\255\084\001\085\001\
\255\255\087\001\255\255\255\255\255\255\005\001\006\001\007\001\
\255\255\255\255\096\001\011\001\012\001\255\255\255\255\101\001\
\255\255\255\255\255\255\255\255\106\001\107\001\108\001\109\001\
\110\001\111\001\255\255\255\255\114\001\255\255\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\255\255\255\255\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\050\001\255\255\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\064\001\065\001\255\255\255\255\255\255\069\001\255\255\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\078\001\255\255\
\255\255\255\255\255\255\255\255\084\001\085\001\255\255\087\001\
\255\255\255\255\255\255\255\255\092\001\005\001\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\101\001\255\255\255\255\
\255\255\255\255\106\001\107\001\255\255\109\001\110\001\255\255\
\255\255\255\255\114\001\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\255\255\255\255\039\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\050\001\255\255\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\059\001\255\255\255\255\255\255\063\001\
\064\001\065\001\255\255\255\255\255\255\069\001\255\255\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\078\001\255\255\
\255\255\255\255\255\255\255\255\084\001\085\001\255\255\087\001\
\255\255\255\255\005\001\006\001\007\001\255\255\255\255\255\255\
\011\001\012\001\255\255\255\255\255\255\101\001\255\255\255\255\
\255\255\255\255\106\001\107\001\255\255\109\001\110\001\026\001\
\255\255\255\255\114\001\030\001\031\001\032\001\033\001\034\001\
\255\255\255\255\255\255\255\255\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\050\001\
\255\255\052\001\053\001\054\001\055\001\056\001\255\255\255\255\
\059\001\255\255\255\255\255\255\063\001\064\001\065\001\255\255\
\255\255\255\255\069\001\255\255\071\001\072\001\255\255\255\255\
\255\255\255\255\255\255\078\001\255\255\255\255\255\255\255\255\
\255\255\084\001\085\001\255\255\087\001\255\255\255\255\005\001\
\006\001\007\001\255\255\255\255\255\255\011\001\012\001\255\255\
\255\255\255\255\101\001\255\255\255\255\255\255\255\255\106\001\
\107\001\255\255\109\001\110\001\255\255\255\255\255\255\114\001\
\030\001\031\001\032\001\033\001\034\001\255\255\255\255\255\255\
\255\255\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\050\001\255\255\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\059\001\255\255\255\255\
\255\255\063\001\064\001\065\001\255\255\255\255\255\255\069\001\
\255\255\071\001\072\001\255\255\255\255\255\255\255\255\255\255\
\078\001\255\255\255\255\255\255\255\255\083\001\084\001\085\001\
\255\255\087\001\255\255\255\255\005\001\006\001\007\001\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\101\001\
\255\255\255\255\255\255\255\255\106\001\107\001\255\255\109\001\
\110\001\255\255\255\255\255\255\114\001\030\001\031\001\032\001\
\033\001\034\001\255\255\255\255\255\255\255\255\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\255\255\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\064\001\
\065\001\255\255\255\255\255\255\069\001\255\255\071\001\072\001\
\255\255\255\255\255\255\255\255\255\255\078\001\255\255\255\255\
\255\255\255\255\255\255\084\001\085\001\255\255\087\001\255\255\
\255\255\255\255\255\255\092\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\012\001\101\001\255\255\255\255\255\255\
\255\255\106\001\107\001\255\255\109\001\110\001\255\255\255\255\
\255\255\114\001\255\255\255\255\255\255\030\001\031\001\032\001\
\033\001\034\001\255\255\255\255\255\255\255\255\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\255\255\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\064\001\
\065\001\255\255\255\255\255\255\069\001\255\255\071\001\072\001\
\255\255\255\255\255\255\255\255\255\255\078\001\255\255\255\255\
\255\255\255\255\255\255\084\001\085\001\255\255\087\001\255\255\
\255\255\255\255\005\001\006\001\007\001\255\255\255\255\255\255\
\011\001\012\001\255\255\255\255\101\001\255\255\255\255\255\255\
\255\255\106\001\107\001\022\001\109\001\110\001\255\255\255\255\
\255\255\114\001\255\255\030\001\031\001\032\001\033\001\034\001\
\255\255\255\255\255\255\255\255\039\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\050\001\
\255\255\052\001\053\001\054\001\055\001\056\001\255\255\255\255\
\059\001\255\255\255\255\255\255\063\001\064\001\065\001\255\255\
\255\255\255\255\069\001\255\255\071\001\072\001\255\255\255\255\
\255\255\255\255\255\255\078\001\255\255\255\255\255\255\255\255\
\255\255\084\001\085\001\255\255\087\001\255\255\255\255\005\001\
\006\001\007\001\255\255\255\255\255\255\011\001\012\001\255\255\
\255\255\255\255\101\001\255\255\255\255\255\255\255\255\106\001\
\107\001\255\255\109\001\110\001\026\001\255\255\255\255\114\001\
\030\001\031\001\032\001\033\001\034\001\255\255\255\255\255\255\
\255\255\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\050\001\255\255\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\059\001\255\255\255\255\
\255\255\063\001\064\001\065\001\255\255\255\255\255\255\069\001\
\255\255\071\001\072\001\255\255\255\255\255\255\255\255\255\255\
\078\001\255\255\255\255\255\255\255\255\255\255\084\001\085\001\
\255\255\087\001\255\255\255\255\005\001\006\001\007\001\255\255\
\255\255\255\255\011\001\012\001\255\255\255\255\255\255\101\001\
\255\255\255\255\255\255\255\255\106\001\107\001\255\255\109\001\
\110\001\255\255\255\255\255\255\114\001\030\001\031\001\032\001\
\033\001\034\001\255\255\255\255\255\255\255\255\039\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\255\255\052\001\053\001\054\001\055\001\056\001\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\064\001\
\065\001\255\255\255\255\255\255\069\001\255\255\071\001\072\001\
\255\255\255\255\255\255\255\255\255\255\078\001\255\255\255\255\
\255\255\255\255\255\255\084\001\085\001\255\255\087\001\255\255\
\255\255\005\001\006\001\007\001\255\255\255\255\255\255\011\001\
\012\001\255\255\255\255\255\255\101\001\255\255\255\255\255\255\
\255\255\106\001\107\001\255\255\109\001\110\001\255\255\255\255\
\255\255\114\001\030\001\031\001\032\001\033\001\034\001\255\255\
\255\255\255\255\255\255\039\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\050\001\255\255\
\052\001\053\001\054\001\055\001\056\001\255\255\255\255\059\001\
\255\255\255\255\255\255\063\001\064\001\065\001\255\255\255\255\
\255\255\069\001\255\255\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\078\001\255\255\255\255\255\255\255\255\255\255\
\084\001\085\001\255\255\087\001\255\255\255\255\005\001\006\001\
\007\001\255\255\255\255\255\255\011\001\012\001\255\255\255\255\
\255\255\101\001\255\255\255\255\255\255\255\255\106\001\107\001\
\255\255\109\001\110\001\255\255\255\255\255\255\114\001\030\001\
\031\001\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\050\001\255\255\052\001\053\001\054\001\
\055\001\056\001\255\255\255\255\059\001\255\255\255\255\255\255\
\063\001\064\001\065\001\255\255\255\255\006\001\069\001\255\255\
\071\001\072\001\255\255\012\001\255\255\014\001\255\255\078\001\
\017\001\255\255\255\255\255\255\255\255\084\001\085\001\255\255\
\087\001\255\255\027\001\255\255\255\255\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\101\001\255\255\
\255\255\255\255\255\255\106\001\107\001\255\255\109\001\110\001\
\255\255\050\001\051\001\114\001\053\001\255\255\055\001\056\001\
\255\255\255\255\059\001\255\255\255\255\255\255\255\255\064\001\
\065\001\255\255\006\001\255\255\255\255\255\255\071\001\255\255\
\012\001\255\255\014\001\255\255\255\255\017\001\255\255\255\255\
\081\001\255\255\255\255\084\001\255\255\255\255\255\255\027\001\
\089\001\255\255\030\001\031\001\255\255\006\001\255\255\255\255\
\097\001\255\255\255\255\012\001\101\001\014\001\255\255\104\001\
\255\255\106\001\255\255\255\255\109\001\110\001\050\001\051\001\
\255\255\053\001\255\255\055\001\056\001\030\001\031\001\059\001\
\255\255\255\255\255\255\255\255\064\001\065\001\255\255\255\255\
\255\255\255\255\255\255\071\001\255\255\255\255\255\255\255\255\
\255\255\050\001\051\001\255\255\053\001\081\001\055\001\056\001\
\084\001\255\255\059\001\255\255\255\255\089\001\255\255\064\001\
\065\001\255\255\255\255\255\255\255\255\097\001\071\001\255\255\
\073\001\101\001\255\255\255\255\104\001\255\255\106\001\255\255\
\081\001\109\001\110\001\084\001\255\255\255\255\006\001\255\255\
\089\001\255\255\255\255\255\255\012\001\255\255\014\001\255\255\
\097\001\255\255\255\255\255\255\101\001\255\255\255\255\104\001\
\255\255\106\001\255\255\027\001\109\001\110\001\030\001\031\001\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\050\001\051\001\255\255\053\001\255\255\055\001\
\056\001\030\001\031\001\059\001\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\255\255\050\001\051\001\255\255\
\053\001\081\001\055\001\056\001\084\001\255\255\059\001\255\255\
\255\255\089\001\255\255\064\001\065\001\255\255\006\001\255\255\
\255\255\097\001\071\001\255\255\012\001\101\001\255\255\255\255\
\104\001\255\255\106\001\255\255\081\001\109\001\110\001\084\001\
\255\255\255\255\255\255\255\255\089\001\255\255\030\001\031\001\
\255\255\255\255\255\255\255\255\097\001\255\255\255\255\255\255\
\101\001\255\255\255\255\104\001\255\255\106\001\255\255\255\255\
\109\001\110\001\050\001\051\001\255\255\053\001\255\255\055\001\
\056\001\255\255\255\255\059\001\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\255\255\006\001\255\255\255\255\071\001\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\255\255\081\001\255\255\255\255\084\001\255\255\255\255\255\255\
\255\255\089\001\028\001\255\255\030\001\031\001\255\255\255\255\
\255\255\097\001\255\255\255\255\255\255\101\001\255\255\255\255\
\104\001\255\255\106\001\255\255\255\255\109\001\110\001\255\255\
\050\001\255\255\052\001\053\001\255\255\055\001\056\001\255\255\
\255\255\059\001\255\255\255\255\255\255\255\255\064\001\065\001\
\255\255\255\255\255\255\006\001\255\255\071\001\255\255\010\001\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\084\001\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\092\001\030\001\031\001\255\255\255\255\097\001\
\255\255\255\255\255\255\101\001\255\255\255\255\255\255\255\255\
\106\001\255\255\255\255\109\001\110\001\255\255\255\255\050\001\
\255\255\052\001\053\001\255\255\055\001\056\001\255\255\255\255\
\059\001\255\255\255\255\255\255\255\255\064\001\065\001\255\255\
\006\001\255\255\255\255\255\255\071\001\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\006\001\007\001\255\255\
\255\255\084\001\011\001\012\001\255\255\255\255\028\001\255\255\
\030\001\031\001\255\255\255\255\255\255\255\255\097\001\255\255\
\255\255\255\255\101\001\255\255\255\255\030\001\031\001\106\001\
\255\255\255\255\109\001\110\001\050\001\255\255\052\001\053\001\
\255\255\055\001\056\001\255\255\255\255\059\001\255\255\255\255\
\255\255\050\001\064\001\065\001\053\001\054\001\055\001\056\001\
\255\255\071\001\059\001\255\255\006\001\255\255\008\001\064\001\
\065\001\255\255\012\001\255\255\255\255\255\255\084\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\092\001\255\255\
\255\255\255\255\028\001\097\001\030\001\031\001\087\001\101\001\
\255\255\255\255\255\255\255\255\106\001\255\255\255\255\109\001\
\110\001\255\255\255\255\255\255\101\001\255\255\255\255\255\255\
\050\001\106\001\052\001\053\001\109\001\055\001\056\001\255\255\
\255\255\059\001\255\255\255\255\255\255\255\255\064\001\065\001\
\255\255\006\001\255\255\255\255\255\255\071\001\255\255\012\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\084\001\255\255\255\255\255\255\255\255\028\001\
\255\255\030\001\031\001\255\255\255\255\255\255\255\255\097\001\
\255\255\255\255\255\255\101\001\255\255\255\255\255\255\255\255\
\106\001\255\255\255\255\109\001\110\001\050\001\255\255\052\001\
\053\001\255\255\055\001\056\001\255\255\255\255\059\001\255\255\
\255\255\255\255\255\255\064\001\065\001\255\255\006\001\255\255\
\255\255\255\255\071\001\255\255\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\084\001\
\255\255\255\255\255\255\255\255\028\001\255\255\030\001\031\001\
\255\255\006\001\255\255\255\255\097\001\255\255\255\255\012\001\
\101\001\255\255\255\255\255\255\255\255\106\001\255\255\255\255\
\109\001\110\001\050\001\255\255\052\001\053\001\255\255\055\001\
\056\001\030\001\031\001\059\001\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\255\255\050\001\255\255\052\001\
\053\001\255\255\055\001\056\001\084\001\255\255\059\001\255\255\
\255\255\255\255\255\255\064\001\065\001\255\255\006\001\255\255\
\255\255\097\001\071\001\255\255\012\001\101\001\255\255\255\255\
\255\255\255\255\106\001\255\255\255\255\109\001\110\001\084\001\
\255\255\255\255\255\255\255\255\028\001\255\255\030\001\031\001\
\093\001\006\001\255\255\255\255\097\001\255\255\255\255\012\001\
\101\001\255\255\255\255\255\255\255\255\106\001\255\255\255\255\
\109\001\110\001\050\001\255\255\052\001\053\001\255\255\055\001\
\056\001\030\001\031\001\059\001\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\255\255\050\001\255\255\052\001\
\053\001\255\255\055\001\056\001\084\001\255\255\059\001\255\255\
\255\255\255\255\255\255\064\001\065\001\255\255\006\001\255\255\
\255\255\097\001\071\001\255\255\012\001\101\001\255\255\255\255\
\255\255\255\255\106\001\255\255\255\255\109\001\110\001\084\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\006\001\255\255\255\255\097\001\255\255\255\255\012\001\
\101\001\255\255\255\255\255\255\255\255\106\001\255\255\255\255\
\109\001\110\001\050\001\255\255\052\001\053\001\255\255\055\001\
\056\001\030\001\031\001\059\001\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\255\255\050\001\255\255\052\001\
\053\001\255\255\055\001\056\001\084\001\255\255\059\001\255\255\
\255\255\255\255\255\255\064\001\065\001\255\255\006\001\255\255\
\255\255\097\001\071\001\255\255\012\001\101\001\255\255\255\255\
\255\255\255\255\106\001\255\255\255\255\109\001\110\001\084\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\006\001\255\255\255\255\097\001\255\255\255\255\012\001\
\101\001\255\255\255\255\255\255\255\255\106\001\255\255\255\255\
\109\001\110\001\050\001\255\255\255\255\053\001\255\255\055\001\
\056\001\030\001\031\001\059\001\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\255\255\255\255\071\001\
\255\255\255\255\255\255\255\255\255\255\050\001\255\255\255\255\
\053\001\255\255\055\001\056\001\084\001\255\255\059\001\255\255\
\255\255\255\255\255\255\064\001\065\001\255\255\255\255\255\255\
\255\255\097\001\071\001\255\255\255\255\101\001\006\001\007\001\
\255\255\255\255\106\001\011\001\012\001\109\001\110\001\084\001\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\097\001\255\255\030\001\031\001\
\101\001\255\255\255\255\255\255\255\255\106\001\255\255\255\255\
\109\001\110\001\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\255\255\050\001\051\001\255\255\053\001\054\001\055\001\
\056\001\255\255\255\255\059\001\255\255\255\255\255\255\255\255\
\064\001\065\001\006\001\007\001\255\255\255\255\255\255\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\081\001\255\255\255\255\255\255\255\255\255\255\087\001\
\255\255\089\001\030\001\031\001\255\255\255\255\255\255\255\255\
\255\255\097\001\098\001\255\255\255\255\101\001\255\255\255\255\
\104\001\255\255\106\001\255\255\255\255\109\001\050\001\051\001\
\255\255\053\001\054\001\055\001\056\001\255\255\255\255\059\001\
\255\255\255\255\255\255\255\255\064\001\065\001\006\001\007\001\
\255\255\255\255\255\255\011\001\012\001\006\001\007\001\255\255\
\255\255\255\255\011\001\012\001\255\255\081\001\255\255\255\255\
\255\255\255\255\255\255\087\001\255\255\089\001\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\255\255\
\255\255\101\001\255\255\255\255\104\001\255\255\106\001\255\255\
\255\255\109\001\050\001\255\255\255\255\053\001\054\001\055\001\
\056\001\050\001\255\255\059\001\053\001\054\001\055\001\056\001\
\064\001\065\001\059\001\255\255\008\001\255\255\255\255\064\001\
\065\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\087\001\
\255\255\255\255\030\001\255\255\255\255\255\255\087\001\255\255\
\255\255\255\255\255\255\255\255\255\255\101\001\255\255\255\255\
\255\255\255\255\106\001\255\255\101\001\109\001\255\255\255\255\
\255\255\106\001\255\255\055\001\109\001\057\001\058\001\059\001\
\255\255\061\001\255\255\255\255\064\001\065\001\255\255\255\255\
\255\255\000\001\001\001\002\001\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\081\001\255\255\014\001\
\015\001\016\001\017\001\018\001\088\001\089\001\090\001\255\255\
\255\255\255\255\255\255\255\255\027\001\097\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\106\001\255\255\
\255\255\109\001\110\001\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\015\001\255\255\255\255\066\001\255\255\255\255\255\255\255\255\
\071\001\072\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\082\001\083\001\084\001\085\001\086\001\
\255\255\000\001\001\001\002\001\255\255\255\255\255\255\094\001\
\007\001\255\255\009\001\255\255\255\255\100\001\255\255\255\255\
\055\001\016\001\057\001\058\001\059\001\255\255\061\001\255\255\
\255\255\064\001\065\001\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\074\001\255\255\036\001\255\255\255\255\
\255\255\255\255\081\001\042\001\043\001\044\001\045\001\046\001\
\047\001\255\255\089\001\090\001\255\255\255\255\255\255\094\001\
\255\255\255\255\097\001\255\255\255\255\255\255\061\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\109\001\110\001\
\071\001\072\001\255\255\074\001\255\255\255\255\255\255\255\255\
\000\001\001\001\002\001\082\001\083\001\084\001\085\001\086\001\
\087\001\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\098\001\255\255\100\001\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\000\001\001\001\002\001\255\255\036\001\255\255\255\255\255\255\
\255\255\009\001\042\001\043\001\044\001\045\001\046\001\015\001\
\016\001\255\255\018\001\255\255\255\255\255\255\055\001\255\255\
\057\001\058\001\059\001\027\001\061\001\061\001\255\255\064\001\
\065\001\255\255\066\001\255\255\036\001\255\255\255\255\071\001\
\072\001\255\255\042\001\043\001\044\001\045\001\046\001\255\255\
\081\001\255\255\082\001\083\001\084\001\085\001\086\001\255\255\
\089\001\090\001\255\255\091\001\255\255\061\001\255\255\255\255\
\097\001\255\255\066\001\255\255\100\001\255\255\255\255\071\001\
\072\001\255\255\255\255\255\255\109\001\110\001\000\001\001\001\
\002\001\255\255\082\001\083\001\084\001\085\001\086\001\009\001\
\255\255\255\255\255\255\255\255\092\001\015\001\016\001\255\255\
\018\001\255\255\255\255\255\255\100\001\255\255\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\255\255\000\001\001\001\
\002\001\255\255\036\001\255\255\255\255\255\255\255\255\009\001\
\042\001\043\001\044\001\045\001\046\001\015\001\016\001\255\255\
\018\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\255\255\061\001\255\255\255\255\255\255\255\255\
\066\001\255\255\036\001\255\255\255\255\071\001\072\001\255\255\
\042\001\043\001\044\001\045\001\046\001\255\255\255\255\255\255\
\082\001\083\001\084\001\085\001\086\001\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\094\001\255\255\255\255\255\255\
\066\001\255\255\100\001\255\255\255\255\071\001\072\001\255\255\
\255\255\255\255\255\255\255\255\000\001\001\001\002\001\255\255\
\082\001\083\001\084\001\085\001\086\001\009\001\255\255\255\255\
\255\255\091\001\255\255\015\001\016\001\255\255\018\001\255\255\
\255\255\255\255\100\001\255\255\255\255\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\000\001\001\001\002\001\255\255\
\036\001\255\255\255\255\255\255\255\255\009\001\042\001\043\001\
\044\001\045\001\046\001\015\001\016\001\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\255\255\061\001\255\255\255\255\255\255\255\255\066\001\255\255\
\036\001\255\255\255\255\071\001\072\001\255\255\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\082\001\083\001\
\084\001\085\001\086\001\255\255\255\255\255\255\255\255\255\255\
\092\001\061\001\255\255\255\255\255\255\255\255\066\001\255\255\
\100\001\255\255\255\255\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\082\001\083\001\
\084\001\085\001\086\001\000\001\001\001\002\001\255\255\255\255\
\255\255\255\255\094\001\255\255\009\001\255\255\255\255\255\255\
\100\001\255\255\015\001\016\001\255\255\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\255\255\
\255\255\255\255\255\255\000\001\001\001\002\001\255\255\036\001\
\255\255\255\255\255\255\255\255\009\001\042\001\043\001\044\001\
\045\001\046\001\015\001\016\001\255\255\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\255\255\
\061\001\255\255\255\255\255\255\255\255\066\001\255\255\036\001\
\255\255\255\255\071\001\072\001\255\255\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\082\001\083\001\084\001\
\085\001\086\001\255\255\255\255\255\255\255\255\091\001\255\255\
\061\001\255\255\255\255\255\255\255\255\066\001\255\255\100\001\
\255\255\255\255\071\001\072\001\255\255\255\255\255\255\255\255\
\255\255\000\001\001\001\002\001\255\255\082\001\083\001\084\001\
\085\001\086\001\009\001\255\255\255\255\255\255\255\255\092\001\
\015\001\016\001\255\255\018\001\255\255\255\255\255\255\100\001\
\255\255\255\255\255\255\255\255\027\001\255\255\255\255\255\255\
\255\255\000\001\001\001\002\001\255\255\036\001\255\255\255\255\
\255\255\255\255\009\001\042\001\043\001\044\001\045\001\046\001\
\015\001\016\001\255\255\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\255\255\061\001\255\255\
\255\255\255\255\255\255\066\001\255\255\036\001\255\255\255\255\
\071\001\072\001\255\255\042\001\043\001\044\001\045\001\046\001\
\255\255\255\255\255\255\082\001\083\001\084\001\085\001\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\094\001\
\255\255\255\255\255\255\066\001\255\255\100\001\255\255\255\255\
\071\001\072\001\255\255\255\255\255\255\255\255\255\255\000\001\
\001\001\002\001\255\255\082\001\083\001\084\001\085\001\086\001\
\009\001\255\255\255\255\255\255\091\001\255\255\015\001\016\001\
\255\255\018\001\255\255\255\255\255\255\100\001\255\255\255\255\
\255\255\255\255\027\001\255\255\255\255\255\255\255\255\000\001\
\001\001\002\001\255\255\036\001\255\255\255\255\255\255\255\255\
\009\001\042\001\043\001\044\001\045\001\046\001\015\001\016\001\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\255\255\061\001\255\255\255\255\255\255\
\255\255\066\001\255\255\036\001\255\255\255\255\071\001\072\001\
\255\255\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\255\255\082\001\083\001\084\001\085\001\086\001\255\255\255\255\
\255\255\255\255\255\255\092\001\061\001\001\001\002\001\255\255\
\255\255\066\001\255\255\100\001\255\255\009\001\071\001\072\001\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\255\255\082\001\083\001\084\001\085\001\086\001\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\094\001\255\255\255\255\
\036\001\255\255\255\255\100\001\255\255\255\255\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\255\255\255\255\066\001\255\255\
\255\255\255\255\255\255\071\001\072\001\001\001\002\001\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\082\001\083\001\
\084\001\085\001\086\001\015\001\016\001\255\255\018\001\255\255\
\255\255\255\255\255\255\095\001\255\255\025\001\255\255\027\001\
\100\001\255\255\255\255\255\255\255\255\001\001\002\001\255\255\
\036\001\255\255\255\255\255\255\255\255\009\001\042\001\043\001\
\044\001\045\001\046\001\015\001\016\001\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\255\255\061\001\255\255\255\255\255\255\255\255\066\001\255\255\
\036\001\255\255\255\255\071\001\072\001\255\255\042\001\043\001\
\044\001\045\001\046\001\255\255\255\255\255\255\082\001\083\001\
\084\001\085\001\086\001\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\001\001\002\001\255\255\255\255\066\001\255\255\
\100\001\255\255\009\001\071\001\072\001\255\255\255\255\255\255\
\015\001\016\001\255\255\255\255\255\255\255\255\082\001\083\001\
\084\001\085\001\086\001\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\255\255\036\001\255\255\255\255\
\100\001\255\255\009\001\042\001\043\001\044\001\045\001\046\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\255\255\061\001\255\255\
\255\255\255\255\255\255\066\001\255\255\036\001\255\255\255\255\
\071\001\072\001\255\255\042\001\043\001\044\001\045\001\046\001\
\013\001\255\255\255\255\082\001\083\001\084\001\085\001\086\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\028\001\
\029\001\255\255\255\255\066\001\255\255\100\001\255\255\255\255\
\071\001\072\001\255\255\255\255\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\082\001\083\001\084\001\085\001\086\001\
\255\255\255\255\055\001\255\255\057\001\058\001\059\001\060\001\
\061\001\255\255\255\255\064\001\065\001\100\001\255\255\068\001\
\255\255\255\255\255\255\255\255\255\255\074\001\255\255\255\255\
\255\255\255\255\255\255\080\001\081\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\089\001\090\001\255\255\255\255\
\255\255\255\255\255\255\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\108\001\
\109\001\110\001\111\001"

let yynames_const = "\
  AMPERAMPER\000\
  AMPERSAND\000\
  AND\000\
  AS\000\
  ASSERT\000\
  BACKQUOTE\000\
  BANG\000\
  BAR\000\
  BARBAR\000\
  BARRBRACKET\000\
  BEGIN\000\
  CLASS\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQUAL\000\
  COLONGREATER\000\
  COMMA\000\
  CONSTRAINT\000\
  DO\000\
  DONE\000\
  DOT\000\
  DOTDOT\000\
  DOWNTO\000\
  ELSE\000\
  END\000\
  EOF\000\
  EQUAL\000\
  EXCEPTION\000\
  EXTERNAL\000\
  FALSE\000\
  FOR\000\
  FUN\000\
  FUNCTION\000\
  FUNCTOR\000\
  GREATER\000\
  GREATERRBRACE\000\
  GREATERRBRACKET\000\
  IF\000\
  IN\000\
  INCLUDE\000\
  INHERIT\000\
  INITIALIZER\000\
  LAZY\000\
  LBRACE\000\
  LBRACELESS\000\
  LBRACKET\000\
  LBRACKETBAR\000\
  LBRACKETLESS\000\
  LBRACKETGREATER\000\
  LBRACKETPERCENT\000\
  LBRACKETPERCENTPERCENT\000\
  LESS\000\
  LESSMINUS\000\
  LET\000\
  LPAREN\000\
  LBRACKETAT\000\
  LBRACKETATAT\000\
  LBRACKETATATAT\000\
  MATCH\000\
  METHOD\000\
  MINUS\000\
  MINUSDOT\000\
  MINUSGREATER\000\
  MODULE\000\
  MUTABLE\000\
  NEW\000\
  NONREC\000\
  OBJECT\000\
  OF\000\
  OPEN\000\
  OR\000\
  PERCENT\000\
  PLUS\000\
  PLUSDOT\000\
  PLUSEQ\000\
  PRIVATE\000\
  QUESTION\000\
  QUOTE\000\
  RBRACE\000\
  RBRACKET\000\
  REC\000\
  RPAREN\000\
  SEMI\000\
  SEMISEMI\000\
  HASH\000\
  SIG\000\
  STAR\000\
  STRUCT\000\
  THEN\000\
  TILDE\000\
  TO\000\
  TRUE\000\
  TRY\000\
  TYPE\000\
  UNDERSCORE\000\
  VAL\000\
  VIRTUAL\000\
  WHEN\000\
  WHILE\000\
  WITH\000\
  EOL\000\
  "

let yynames_block = "\
  CHAR\000\
  FLOAT\000\
  INFIXOP0\000\
  INFIXOP1\000\
  INFIXOP2\000\
  INFIXOP3\000\
  INFIXOP4\000\
  DOTOP\000\
  INT\000\
  LABEL\000\
  LIDENT\000\
  OPTLABEL\000\
  PREFIXOP\000\
  HASHOP\000\
  STRING\000\
  UIDENT\000\
  COMMENT\000\
  DOCSTRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure) in
    Obj.repr(
# 574 "ml/parser.mly"
                                         ( extra_str 1 _1 )
# 6690 "ml/parser.ml"
               : Parsetree.structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'signature) in
    Obj.repr(
# 577 "ml/parser.mly"
                                         ( extra_sig 1 _1 )
# 6697 "ml/parser.ml"
               : Parsetree.signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'top_structure) in
    Obj.repr(
# 580 "ml/parser.mly"
                                         ( Ptop_def (extra_str 1 _1) )
# 6704 "ml/parser.ml"
               : Parsetree.toplevel_phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel_directive) in
    Obj.repr(
# 581 "ml/parser.mly"
                                         ( _1 )
# 6711 "ml/parser.ml"
               : Parsetree.toplevel_phrase))
; (fun __caml_parser_env ->
    Obj.repr(
# 582 "ml/parser.mly"
                                         ( raise End_of_file )
# 6717 "ml/parser.ml"
               : Parsetree.toplevel_phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 586 "ml/parser.mly"
      ( (text_str 1) @ [mkstrexp _1 _2] )
# 6725 "ml/parser.ml"
               : 'top_structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'top_structure_tail) in
    Obj.repr(
# 588 "ml/parser.mly"
      ( _1 )
# 6732 "ml/parser.ml"
               : 'top_structure))
; (fun __caml_parser_env ->
    Obj.repr(
# 591 "ml/parser.mly"
                                         ( [] )
# 6738 "ml/parser.ml"
               : 'top_structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'top_structure_tail) in
    Obj.repr(
# 592 "ml/parser.mly"
                                         ( (text_str 1) @ _1 :: _2 )
# 6746 "ml/parser.ml"
               : 'top_structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_body) in
    Obj.repr(
# 595 "ml/parser.mly"
                                         ( extra_def 1 _1 )
# 6753 "ml/parser.ml"
               : Parsetree.toplevel_phrase list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 598 "ml/parser.mly"
                                         ( _1 )
# 6760 "ml/parser.ml"
               : 'use_file_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'post_item_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 600 "ml/parser.mly"
      ( (text_def 1) @ Ptop_def[mkstrexp _1 _2] :: _3 )
# 6769 "ml/parser.ml"
               : 'use_file_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 604 "ml/parser.mly"
      ( [] )
# 6775 "ml/parser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    Obj.repr(
# 606 "ml/parser.mly"
      ( text_def 1 )
# 6781 "ml/parser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'post_item_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 608 "ml/parser.mly"
      (  mark_rhs_docs 2 3;
        (text_def 1) @ (text_def 2) @ Ptop_def[mkstrexp _2 _3] :: _4 )
# 6791 "ml/parser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 611 "ml/parser.mly"
      ( (text_def 1) @ (text_def 2) @ Ptop_def[_2] :: _3 )
# 6799 "ml/parser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel_directive) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 613 "ml/parser.mly"
      (  mark_rhs_docs 2 3;
        (text_def 1) @ (text_def 2) @ _2 :: _3 )
# 6808 "ml/parser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 616 "ml/parser.mly"
      ( (text_def 1) @ Ptop_def[_1] :: _2 )
# 6816 "ml/parser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel_directive) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'use_file_tail) in
    Obj.repr(
# 618 "ml/parser.mly"
      ( mark_rhs_docs 1 1;
        (text_def 1) @ _1 :: _2 )
# 6825 "ml/parser.ml"
               : 'use_file_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    Obj.repr(
# 622 "ml/parser.mly"
                  ( _1 )
# 6832 "ml/parser.ml"
               : Parsetree.core_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 625 "ml/parser.mly"
                 ( _1 )
# 6839 "ml/parser.ml"
               : Parsetree.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 628 "ml/parser.mly"
                ( _1 )
# 6846 "ml/parser.ml"
               : Parsetree.pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 635 "ml/parser.mly"
      ( mkrhs "*" 2, None )
# 6852 "ml/parser.ml"
               : 'functor_arg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'functor_arg_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    Obj.repr(
# 637 "ml/parser.mly"
      ( mkrhs _2 2, Some _4 )
# 6860 "ml/parser.ml"
               : 'functor_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 641 "ml/parser.mly"
               ( _1 )
# 6867 "ml/parser.ml"
               : 'functor_arg_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 642 "ml/parser.mly"
               ( "_" )
# 6873 "ml/parser.ml"
               : 'functor_arg_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'functor_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'functor_arg) in
    Obj.repr(
# 647 "ml/parser.mly"
      ( _2 :: _1 )
# 6881 "ml/parser.ml"
               : 'functor_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functor_arg) in
    Obj.repr(
# 649 "ml/parser.mly"
      ( [ _1 ] )
# 6888 "ml/parser.ml"
               : 'functor_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mod_longident) in
    Obj.repr(
# 654 "ml/parser.mly"
      ( mkmod(Pmod_ident (mkrhs _1 1)) )
# 6895 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'structure) in
    Obj.repr(
# 656 "ml/parser.mly"
      ( mkmod ~attrs:_2 (Pmod_structure(extra_str 3 _3)) )
# 6903 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'structure) in
    Obj.repr(
# 658 "ml/parser.mly"
      ( unclosed "struct" 1 "end" 4 )
# 6911 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'functor_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'module_expr) in
    Obj.repr(
# 660 "ml/parser.mly"
      ( let modexp =
          List.fold_left
            (fun acc (n, t) -> mkmod(Pmod_functor(n, t, acc)))
            _5 _3
        in wrap_mod_attrs modexp _2 )
# 6924 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'module_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_module_expr) in
    Obj.repr(
# 666 "ml/parser.mly"
      ( mkmod(Pmod_apply(_1, _2)) )
# 6932 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'module_expr) in
    Obj.repr(
# 668 "ml/parser.mly"
      ( mkmod(Pmod_apply(_1, mkmod (Pmod_structure []))) )
# 6939 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_module_expr) in
    Obj.repr(
# 670 "ml/parser.mly"
      ( _1 )
# 6946 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'module_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 672 "ml/parser.mly"
      ( Mod.attr _1 _2 )
# 6954 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension) in
    Obj.repr(
# 674 "ml/parser.mly"
      ( mkmod(Pmod_extension _1) )
# 6961 "ml/parser.ml"
               : 'module_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'module_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    Obj.repr(
# 679 "ml/parser.mly"
      ( mkmod(Pmod_constraint(_2, _4)) )
# 6969 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'module_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    Obj.repr(
# 681 "ml/parser.mly"
      ( unclosed "(" 1 ")" 5 )
# 6977 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'module_expr) in
    Obj.repr(
# 683 "ml/parser.mly"
      ( _2 )
# 6984 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'module_expr) in
    Obj.repr(
# 685 "ml/parser.mly"
      ( unclosed "(" 1 ")" 3 )
# 6991 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 687 "ml/parser.mly"
      ( mkmod ~attrs:_3 (Pmod_unpack _4))
# 6999 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'package_type) in
    Obj.repr(
# 689 "ml/parser.mly"
      ( mkmod ~attrs:_3
          (Pmod_unpack(
               ghexp(Pexp_constraint(_4, ghtyp(Ptyp_package _6))))) )
# 7010 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'package_type) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'package_type) in
    Obj.repr(
# 694 "ml/parser.mly"
      ( mkmod ~attrs:_3
          (Pmod_unpack(
               ghexp(Pexp_coerce(_4, Some(ghtyp(Ptyp_package _6)),
                                 ghtyp(Ptyp_package _8))))) )
# 7023 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'package_type) in
    Obj.repr(
# 699 "ml/parser.mly"
      ( mkmod ~attrs:_3
          (Pmod_unpack(
               ghexp(Pexp_coerce(_4, None, ghtyp(Ptyp_package _6))))) )
# 7034 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 703 "ml/parser.mly"
      ( unclosed "(" 1 ")" 6 )
# 7042 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 705 "ml/parser.mly"
      ( unclosed "(" 1 ")" 6 )
# 7050 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 707 "ml/parser.mly"
      ( unclosed "(" 1 ")" 5 )
# 7058 "ml/parser.ml"
               : 'paren_module_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'post_item_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 712 "ml/parser.mly"
      ( mark_rhs_docs 1 2;
        (text_str 1) @ mkstrexp _1 _2 :: _3 )
# 7068 "ml/parser.ml"
               : 'structure))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 714 "ml/parser.mly"
                   ( _1 )
# 7075 "ml/parser.ml"
               : 'structure))
; (fun __caml_parser_env ->
    Obj.repr(
# 717 "ml/parser.mly"
                         ( [] )
# 7081 "ml/parser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'structure) in
    Obj.repr(
# 718 "ml/parser.mly"
                         ( (text_str 1) @ _2 )
# 7088 "ml/parser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'structure_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'structure_tail) in
    Obj.repr(
# 719 "ml/parser.mly"
                                  ( (text_str 1) @ _1 :: _2 )
# 7096 "ml/parser.ml"
               : 'structure_tail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_bindings) in
    Obj.repr(
# 723 "ml/parser.mly"
      ( val_of_let_bindings _1 )
# 7103 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitive_declaration) in
    Obj.repr(
# 725 "ml/parser.mly"
      ( let (body, ext) = _1 in mkstr_ext (Pstr_primitive body) ext )
# 7110 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value_description) in
    Obj.repr(
# 727 "ml/parser.mly"
      ( let (body, ext) = _1 in mkstr_ext (Pstr_primitive body) ext )
# 7117 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_declarations) in
    Obj.repr(
# 729 "ml/parser.mly"
      ( let (nr, l, ext ) = _1 in mkstr_ext (Pstr_type (nr, List.rev l)) ext )
# 7124 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'str_type_extension) in
    Obj.repr(
# 731 "ml/parser.mly"
      ( let (l, ext) = _1 in mkstr_ext (Pstr_typext l) ext )
# 7131 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'str_exception_declaration) in
    Obj.repr(
# 733 "ml/parser.mly"
      ( let (l, ext) = _1 in mkstr_ext (Pstr_exception l) ext )
# 7138 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_binding) in
    Obj.repr(
# 735 "ml/parser.mly"
      ( let (body, ext) = _1 in mkstr_ext (Pstr_module body) ext )
# 7145 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_module_bindings) in
    Obj.repr(
# 737 "ml/parser.mly"
      ( let (l, ext) = _1 in mkstr_ext (Pstr_recmodule(List.rev l)) ext )
# 7152 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_type_declaration) in
    Obj.repr(
# 739 "ml/parser.mly"
      ( let (body, ext) = _1 in mkstr_ext (Pstr_modtype body) ext )
# 7159 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'open_statement) in
    Obj.repr(
# 741 "ml/parser.mly"
      ( let (body, ext) = _1 in mkstr_ext (Pstr_open body) ext )
# 7166 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_type_declarations) in
    Obj.repr(
# 743 "ml/parser.mly"
      ( let (l, ext) = _1 in mkstr_ext (Pstr_class_type (List.rev l)) ext )
# 7173 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'str_include_statement) in
    Obj.repr(
# 745 "ml/parser.mly"
      ( let (body, ext) = _1 in mkstr_ext (Pstr_include body) ext )
# 7180 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'item_extension) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 747 "ml/parser.mly"
      ( mkstr(Pstr_extension (_1, (add_docs_attrs (symbol_docs ()) _2))) )
# 7188 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'floating_attribute) in
    Obj.repr(
# 749 "ml/parser.mly"
      ( mark_symbol_docs ();
        mkstr(Pstr_attribute _1) )
# 7196 "ml/parser.ml"
               : 'structure_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'module_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 754 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Incl.mk _3 ~attrs:(attrs@_4)
            ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
      , ext )
# 7208 "ml/parser.ml"
               : 'str_include_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_expr) in
    Obj.repr(
# 761 "ml/parser.mly"
      ( _2 )
# 7215 "ml/parser.ml"
               : 'module_binding_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'module_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'module_expr) in
    Obj.repr(
# 763 "ml/parser.mly"
      ( mkmod(Pmod_constraint(_4, _2)) )
# 7223 "ml/parser.ml"
               : 'module_binding_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'functor_arg) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_binding_body) in
    Obj.repr(
# 765 "ml/parser.mly"
      ( mkmod(Pmod_functor(fst _1, snd _1, _2)) )
# 7231 "ml/parser.ml"
               : 'module_binding_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_binding_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 769 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Mb.mk (mkrhs _3 3) _4 ~attrs:(attrs@_5)
            ~loc:(symbol_rloc ()) ~docs:(symbol_docs ())
      , ext )
# 7244 "ml/parser.ml"
               : 'module_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_module_binding) in
    Obj.repr(
# 775 "ml/parser.mly"
                                           ( let (b, ext) = _1 in ([b], ext) )
# 7251 "ml/parser.ml"
               : 'rec_module_bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rec_module_bindings) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'and_module_binding) in
    Obj.repr(
# 777 "ml/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 7259 "ml/parser.ml"
               : 'rec_module_bindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'module_binding_body) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 781 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Mb.mk (mkrhs _4 4) _5 ~attrs:(attrs@_6)
            ~loc:(symbol_rloc ()) ~docs:(symbol_docs ())
      , ext )
# 7272 "ml/parser.ml"
               : 'rec_module_binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_binding_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 788 "ml/parser.mly"
      ( Mb.mk (mkrhs _3 3) _4 ~attrs:(_2@_5) ~loc:(symbol_rloc ())
               ~text:(symbol_text ()) ~docs:(symbol_docs ()) )
# 7283 "ml/parser.ml"
               : 'and_module_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mty_longident) in
    Obj.repr(
# 796 "ml/parser.mly"
      ( mkmty(Pmty_ident (mkrhs _1 1)) )
# 7290 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'signature) in
    Obj.repr(
# 798 "ml/parser.mly"
      ( mkmty ~attrs:_2 (Pmty_signature (extra_sig 3 _3)) )
# 7298 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'signature) in
    Obj.repr(
# 800 "ml/parser.mly"
      ( unclosed "sig" 1 "end" 4 )
# 7306 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'functor_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'module_type) in
    Obj.repr(
# 803 "ml/parser.mly"
      ( let mty =
          List.fold_left
            (fun acc (n, t) -> mkmty(Pmty_functor(n, t, acc)))
            _5 _3
        in wrap_mty_attrs mty _2 )
# 7319 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'module_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'module_type) in
    Obj.repr(
# 810 "ml/parser.mly"
      ( mkmty(Pmty_functor(mknoloc "_", Some _1, _3)) )
# 7327 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'module_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'with_constraints) in
    Obj.repr(
# 812 "ml/parser.mly"
      ( mkmty(Pmty_with(_1, List.rev _3)) )
# 7335 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'attributes) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'module_expr) in
    Obj.repr(
# 814 "ml/parser.mly"
      ( mkmty ~attrs:_4 (Pmty_typeof _5) )
# 7343 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    Obj.repr(
# 818 "ml/parser.mly"
      ( _2 )
# 7350 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    Obj.repr(
# 820 "ml/parser.mly"
      ( unclosed "(" 1 ")" 3 )
# 7357 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension) in
    Obj.repr(
# 822 "ml/parser.mly"
      ( mkmty(Pmty_extension _1) )
# 7364 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 824 "ml/parser.mly"
      ( Mty.attr _1 _2 )
# 7372 "ml/parser.ml"
               : 'module_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 827 "ml/parser.mly"
                         ( [] )
# 7378 "ml/parser.ml"
               : 'signature))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'signature) in
    Obj.repr(
# 828 "ml/parser.mly"
                         ( (text_sig 1) @ _2 )
# 7385 "ml/parser.ml"
               : 'signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'signature_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'signature) in
    Obj.repr(
# 829 "ml/parser.mly"
                             ( (text_sig 1) @ _1 :: _2 )
# 7393 "ml/parser.ml"
               : 'signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value_description) in
    Obj.repr(
# 833 "ml/parser.mly"
      ( let (body, ext) = _1 in mksig_ext (Psig_value body) ext )
# 7400 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitive_declaration) in
    Obj.repr(
# 835 "ml/parser.mly"
      ( let (body, ext) = _1 in mksig_ext (Psig_value body) ext)
# 7407 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_declarations) in
    Obj.repr(
# 837 "ml/parser.mly"
      ( let (nr, l, ext) = _1 in mksig_ext (Psig_type (nr, List.rev l)) ext )
# 7414 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sig_type_extension) in
    Obj.repr(
# 839 "ml/parser.mly"
      ( let (l, ext) = _1 in mksig_ext (Psig_typext l) ext )
# 7421 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sig_exception_declaration) in
    Obj.repr(
# 841 "ml/parser.mly"
      ( let (l, ext) = _1 in mksig_ext (Psig_exception l) ext )
# 7428 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_declaration) in
    Obj.repr(
# 843 "ml/parser.mly"
      ( let (body, ext) = _1 in mksig_ext (Psig_module body) ext )
# 7435 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_alias) in
    Obj.repr(
# 845 "ml/parser.mly"
      ( let (body, ext) = _1 in mksig_ext (Psig_module body) ext )
# 7442 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_module_declarations) in
    Obj.repr(
# 847 "ml/parser.mly"
      ( let (l, ext) = _1 in mksig_ext (Psig_recmodule (List.rev l)) ext )
# 7449 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_type_declaration) in
    Obj.repr(
# 849 "ml/parser.mly"
      ( let (body, ext) = _1 in mksig_ext (Psig_modtype body) ext )
# 7456 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'open_statement) in
    Obj.repr(
# 851 "ml/parser.mly"
      ( let (body, ext) = _1 in mksig_ext (Psig_open body) ext )
# 7463 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sig_include_statement) in
    Obj.repr(
# 853 "ml/parser.mly"
      ( let (body, ext) = _1 in mksig_ext (Psig_include body) ext )
# 7470 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_descriptions) in
    Obj.repr(
# 855 "ml/parser.mly"
      ( let (l, ext) = _1 in mksig_ext (Psig_class (List.rev l)) ext )
# 7477 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_type_declarations) in
    Obj.repr(
# 857 "ml/parser.mly"
      ( let (l, ext) = _1 in mksig_ext (Psig_class_type (List.rev l)) ext )
# 7484 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'item_extension) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 859 "ml/parser.mly"
      ( mksig(Psig_extension (_1, (add_docs_attrs (symbol_docs ()) _2))) )
# 7492 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'floating_attribute) in
    Obj.repr(
# 861 "ml/parser.mly"
      ( mark_symbol_docs ();
        mksig(Psig_attribute _1) )
# 7500 "ml/parser.ml"
               : 'signature_item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'override_flag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'mod_longident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 866 "ml/parser.mly"
      ( let (ext, attrs) = _3 in
        Opn.mk (mkrhs _4 4) ~override:_2 ~attrs:(attrs@_5)
          ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
      , ext)
# 7513 "ml/parser.ml"
               : 'open_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 873 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Incl.mk _3 ~attrs:(attrs@_4)
            ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
      , ext)
# 7525 "ml/parser.ml"
               : 'sig_include_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_type) in
    Obj.repr(
# 880 "ml/parser.mly"
      ( _2 )
# 7532 "ml/parser.ml"
               : 'module_declaration_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'module_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'module_declaration_body) in
    Obj.repr(
# 882 "ml/parser.mly"
      ( mkmty(Pmty_functor(mkrhs _2 2, Some _4, _6)) )
# 7541 "ml/parser.ml"
               : 'module_declaration_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'module_declaration_body) in
    Obj.repr(
# 884 "ml/parser.mly"
      ( mkmty(Pmty_functor(mkrhs "*" 1, None, _3)) )
# 7548 "ml/parser.ml"
               : 'module_declaration_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_declaration_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 888 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Md.mk (mkrhs _3 3) _4 ~attrs:(attrs@_5)
          ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
      , ext )
# 7561 "ml/parser.ml"
               : 'module_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'mod_longident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 895 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Md.mk (mkrhs _3 3)
          (Mty.alias ~loc:(rhs_loc 5) (mkrhs _5 5)) ~attrs:(attrs@_6)
             ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
      , ext )
# 7575 "ml/parser.ml"
               : 'module_alias))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rec_module_declaration) in
    Obj.repr(
# 903 "ml/parser.mly"
      ( let (body, ext) = _1 in ([body], ext) )
# 7582 "ml/parser.ml"
               : 'rec_module_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rec_module_declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'and_module_declaration) in
    Obj.repr(
# 905 "ml/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 7590 "ml/parser.ml"
               : 'rec_module_declarations))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 909 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Md.mk (mkrhs _4 4) _6 ~attrs:(attrs@_7)
            ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
      , ext)
# 7603 "ml/parser.ml"
               : 'rec_module_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'module_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 916 "ml/parser.mly"
      ( Md.mk (mkrhs _3 3) _5 ~attrs:(_2@_6) ~loc:(symbol_rloc())
              ~text:(symbol_text()) ~docs:(symbol_docs()) )
# 7614 "ml/parser.ml"
               : 'and_module_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 920 "ml/parser.mly"
                              ( None )
# 7620 "ml/parser.ml"
               : 'module_type_declaration_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_type) in
    Obj.repr(
# 921 "ml/parser.mly"
                              ( Some _2 )
# 7627 "ml/parser.ml"
               : 'module_type_declaration_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'module_type_declaration_body) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 926 "ml/parser.mly"
      ( let (ext, attrs) = _3 in
        Mtd.mk (mkrhs _4 4) ?typ:_5 ~attrs:(attrs@_6)
          ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
      , ext )
# 7640 "ml/parser.ml"
               : 'module_type_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 934 "ml/parser.mly"
                                                ( [] )
# 7646 "ml/parser.ml"
               : 'class_type_parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_parameter_list) in
    Obj.repr(
# 935 "ml/parser.mly"
                                                ( List.rev _2 )
# 7653 "ml/parser.ml"
               : 'class_type_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_self_pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_fields) in
    Obj.repr(
# 939 "ml/parser.mly"
       ( Cstr.mk _1 (extra_cstr 2 (List.rev _2)) )
# 7661 "ml/parser.ml"
               : 'class_structure))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 943 "ml/parser.mly"
      ( reloc_pat _2 )
# 7668 "ml/parser.ml"
               : 'class_self_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    Obj.repr(
# 945 "ml/parser.mly"
      ( mkpat(Ppat_constraint(_2, _4)) )
# 7676 "ml/parser.ml"
               : 'class_self_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 947 "ml/parser.mly"
      ( ghpat(Ppat_any) )
# 7682 "ml/parser.ml"
               : 'class_self_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 951 "ml/parser.mly"
      ( [] )
# 7688 "ml/parser.ml"
               : 'class_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_fields) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_field) in
    Obj.repr(
# 953 "ml/parser.mly"
      ( _2 :: (text_cstr 2) @ _1 )
# 7696 "ml/parser.ml"
               : 'class_fields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 957 "ml/parser.mly"
      ( let v, attrs = _2 in
        mkcf (Pcf_val v) ~attrs:(attrs@_3) ~docs:(symbol_docs ()) )
# 7705 "ml/parser.ml"
               : 'class_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'method_) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 960 "ml/parser.mly"
      ( let meth, attrs = _2 in
        mkcf (Pcf_method meth) ~attrs:(attrs@_3) ~docs:(symbol_docs ()) )
# 7714 "ml/parser.ml"
               : 'class_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'constrain_field) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 963 "ml/parser.mly"
      ( mkcf (Pcf_constraint _3) ~attrs:(_2@_4) ~docs:(symbol_docs ()) )
# 7723 "ml/parser.ml"
               : 'class_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 965 "ml/parser.mly"
      ( mkcf (Pcf_initializer _3) ~attrs:(_2@_4) ~docs:(symbol_docs ()) )
# 7732 "ml/parser.ml"
               : 'class_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'item_extension) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 967 "ml/parser.mly"
      ( mkcf (Pcf_extension _1) ~attrs:_2 ~docs:(symbol_docs ()) )
# 7740 "ml/parser.ml"
               : 'class_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'floating_attribute) in
    Obj.repr(
# 969 "ml/parser.mly"
      ( mark_symbol_docs ();
        mkcf (Pcf_attribute _1) )
# 7748 "ml/parser.ml"
               : 'class_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'attributes) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 975 "ml/parser.mly"
      ( if _1 = Override then syntax_error ();
        (mkloc _5 (rhs_loc 5), Mutable, Cfk_virtual _7), _2 )
# 7759 "ml/parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'mutable_flag) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 978 "ml/parser.mly"
      ( if _1 = Override then syntax_error ();
        (mkrhs _5 5, _4, Cfk_virtual _7), _2 )
# 7771 "ml/parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'mutable_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 981 "ml/parser.mly"
      ( (mkrhs _4 4, _3, Cfk_concrete (_1, _6)), _2 )
# 7782 "ml/parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'mutable_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'label) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'type_constraint) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 983 "ml/parser.mly"
      (
       let e = mkexp_constraint _7 _5 in
       (mkrhs _4 4, _3, Cfk_concrete (_1, e)), _2
      )
# 7797 "ml/parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'attributes) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'poly_type) in
    Obj.repr(
# 991 "ml/parser.mly"
      ( if _1 = Override then syntax_error ();
        (mkloc _5 (rhs_loc 5), Private, Cfk_virtual _7), _2 )
# 7808 "ml/parser.ml"
               : 'method_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'private_flag) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'poly_type) in
    Obj.repr(
# 994 "ml/parser.mly"
      ( if _1 = Override then syntax_error ();
        (mkloc _5 (rhs_loc 5), _4, Cfk_virtual _7), _2 )
# 7820 "ml/parser.ml"
               : 'method_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'private_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'label) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'strict_binding) in
    Obj.repr(
# 997 "ml/parser.mly"
      ( (mkloc _4 (rhs_loc 4), _3,
        Cfk_concrete (_1, ghexp(Pexp_poly (_5, None)))), _2 )
# 7832 "ml/parser.ml"
               : 'method_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'private_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'label) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'poly_type) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1000 "ml/parser.mly"
      ( (mkloc _4 (rhs_loc 4), _3,
        Cfk_concrete (_1, ghexp(Pexp_poly(_8, Some _6)))), _2 )
# 7845 "ml/parser.ml"
               : 'method_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : 'override_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 9 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'private_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'label) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'lident_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'core_type) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1004 "ml/parser.mly"
      ( let exp, poly = wrap_type_annotation _7 _9 _11 in
        (mkloc _4 (rhs_loc 4), _3,
        Cfk_concrete (_1, ghexp(Pexp_poly(exp, Some poly)))), _2 )
# 7860 "ml/parser.ml"
               : 'method_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_signature) in
    Obj.repr(
# 1013 "ml/parser.mly"
      ( _1 )
# 7867 "ml/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'simple_core_type_or_tuple) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'class_type) in
    Obj.repr(
# 1016 "ml/parser.mly"
      ( mkcty(Pcty_arrow(Optional _2 , _4, _6)) )
# 7876 "ml/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'simple_core_type_or_tuple) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'class_type) in
    Obj.repr(
# 1018 "ml/parser.mly"
      ( mkcty(Pcty_arrow(Optional _1, _2, _4)) )
# 7885 "ml/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'simple_core_type_or_tuple) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'class_type) in
    Obj.repr(
# 1020 "ml/parser.mly"
      ( mkcty(Pcty_arrow(Labelled _1, _3, _5)) )
# 7894 "ml/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_core_type_or_tuple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'class_type) in
    Obj.repr(
# 1022 "ml/parser.mly"
      ( mkcty(Pcty_arrow(Nolabel, _1, _3)) )
# 7902 "ml/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'core_type_comma_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'clty_longident) in
    Obj.repr(
# 1026 "ml/parser.mly"
      ( mkcty(Pcty_constr (mkloc _4 (rhs_loc 4), List.rev _2)) )
# 7910 "ml/parser.ml"
               : 'class_signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'clty_longident) in
    Obj.repr(
# 1028 "ml/parser.mly"
      ( mkcty(Pcty_constr (mkrhs _1 1, [])) )
# 7917 "ml/parser.ml"
               : 'class_signature))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_sig_body) in
    Obj.repr(
# 1030 "ml/parser.mly"
      ( mkcty ~attrs:_2 (Pcty_signature _3) )
# 7925 "ml/parser.ml"
               : 'class_signature))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_sig_body) in
    Obj.repr(
# 1032 "ml/parser.mly"
      ( unclosed "object" 1 "end" 4 )
# 7933 "ml/parser.ml"
               : 'class_signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_signature) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 1034 "ml/parser.mly"
      ( Cty.attr _1 _2 )
# 7941 "ml/parser.ml"
               : 'class_signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension) in
    Obj.repr(
# 1036 "ml/parser.mly"
      ( mkcty(Pcty_extension _1) )
# 7948 "ml/parser.ml"
               : 'class_signature))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'override_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'attributes) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'class_signature) in
    Obj.repr(
# 1038 "ml/parser.mly"
      ( wrap_class_type_attrs (mkcty(Pcty_open(_3, mkrhs _5 5, _7))) _4 )
# 7958 "ml/parser.ml"
               : 'class_signature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_self_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_sig_fields) in
    Obj.repr(
# 1042 "ml/parser.mly"
      ( Csig.mk _1 (extra_csig 2 (List.rev _2)) )
# 7966 "ml/parser.ml"
               : 'class_sig_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    Obj.repr(
# 1046 "ml/parser.mly"
      ( _2 )
# 7973 "ml/parser.ml"
               : 'class_self_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1048 "ml/parser.mly"
      ( mktyp(Ptyp_any) )
# 7979 "ml/parser.ml"
               : 'class_self_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1051 "ml/parser.mly"
                                                ( [] )
# 7985 "ml/parser.ml"
               : 'class_sig_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_sig_fields) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_sig_field) in
    Obj.repr(
# 1052 "ml/parser.mly"
                                       ( _2 :: (text_csig 2) @ _1 )
# 7993 "ml/parser.ml"
               : 'class_sig_fields))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_signature) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1056 "ml/parser.mly"
      ( mkctf (Pctf_inherit _3) ~attrs:(_2@_4) ~docs:(symbol_docs ()) )
# 8002 "ml/parser.ml"
               : 'class_sig_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'value_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1058 "ml/parser.mly"
      ( mkctf (Pctf_val _3) ~attrs:(_2@_4) ~docs:(symbol_docs ()) )
# 8011 "ml/parser.ml"
               : 'class_sig_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'private_virtual_flags) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'label) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'poly_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1061 "ml/parser.mly"
      (
       let (p, v) = _3 in
       mkctf (Pctf_method (mkrhs _4 4, p, v, _6)) ~attrs:(_2@_7) ~docs:(symbol_docs ())
      )
# 8025 "ml/parser.ml"
               : 'class_sig_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'constrain_field) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1066 "ml/parser.mly"
      ( mkctf (Pctf_constraint _3) ~attrs:(_2@_4) ~docs:(symbol_docs ()) )
# 8034 "ml/parser.ml"
               : 'class_sig_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'item_extension) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1068 "ml/parser.mly"
      ( mkctf (Pctf_extension _1) ~attrs:_2 ~docs:(symbol_docs ()) )
# 8042 "ml/parser.ml"
               : 'class_sig_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'floating_attribute) in
    Obj.repr(
# 1070 "ml/parser.mly"
      ( mark_symbol_docs ();
        mkctf(Pctf_attribute _1) )
# 8050 "ml/parser.ml"
               : 'class_sig_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'mutable_flag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1075 "ml/parser.mly"
      ( mkrhs _3 3, _2, Virtual, _5 )
# 8059 "ml/parser.ml"
               : 'value_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'virtual_flag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1077 "ml/parser.mly"
      ( mkrhs _3 3, Mutable, _2, _5 )
# 8068 "ml/parser.ml"
               : 'value_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1079 "ml/parser.mly"
      ( mkrhs _1 1, Immutable, Concrete, _3 )
# 8076 "ml/parser.ml"
               : 'value_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'core_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1082 "ml/parser.mly"
                                           ( _1, _3, symbol_rloc() )
# 8084 "ml/parser.ml"
               : 'constrain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'core_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1085 "ml/parser.mly"
                                           ( _1, _3 )
# 8092 "ml/parser.ml"
               : 'constrain_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_description) in
    Obj.repr(
# 1089 "ml/parser.mly"
      ( let (body, ext) = _1 in ([body],ext) )
# 8099 "ml/parser.ml"
               : 'class_descriptions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_descriptions) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'and_class_description) in
    Obj.repr(
# 1091 "ml/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 8107 "ml/parser.ml"
               : 'class_descriptions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'virtual_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'class_type_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'class_type) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1096 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Ci.mk (mkrhs _5 5) _7 ~virt:_3 ~params:_4 ~attrs:(attrs @ _8)
            ~loc:(symbol_rloc ()) ~docs:(symbol_docs ())
      , ext )
# 8122 "ml/parser.ml"
               : 'class_description))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'virtual_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'class_type_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'class_type) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1104 "ml/parser.mly"
      ( Ci.mk (mkrhs _5 5) _7 ~virt:_3 ~params:_4
              ~attrs:(_2@_8) ~loc:(symbol_rloc ())
              ~text:(symbol_text ()) ~docs:(symbol_docs ()) )
# 8136 "ml/parser.ml"
               : 'and_class_description))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_type_declaration) in
    Obj.repr(
# 1110 "ml/parser.mly"
      ( let (body, ext) = _1 in ([body],ext) )
# 8143 "ml/parser.ml"
               : 'class_type_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_type_declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'and_class_type_declaration) in
    Obj.repr(
# 1112 "ml/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 8151 "ml/parser.ml"
               : 'class_type_declarations))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'virtual_flag) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'class_type_parameters) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'class_signature) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1117 "ml/parser.mly"
      ( let (ext, attrs) = _3 in
        Ci.mk (mkrhs _6 6) _8 ~virt:_4 ~params:_5 ~attrs:(attrs@_9)
            ~loc:(symbol_rloc ()) ~docs:(symbol_docs ())
      , ext)
# 8166 "ml/parser.ml"
               : 'class_type_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'virtual_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'class_type_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'class_signature) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1125 "ml/parser.mly"
      ( Ci.mk (mkrhs _5 5) _7 ~virt:_3 ~params:_4
         ~attrs:(_2@_8) ~loc:(symbol_rloc ())
         ~text:(symbol_text ()) ~docs:(symbol_docs ()) )
# 8180 "ml/parser.ml"
               : 'and_class_type_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1133 "ml/parser.mly"
                                  ( _1 )
# 8187 "ml/parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1134 "ml/parser.mly"
                                  ( _1 )
# 8194 "ml/parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1135 "ml/parser.mly"
                                  ( mkexp(Pexp_sequence(_1, _3)) )
# 8202 "ml/parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'attr_id) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1137 "ml/parser.mly"
      ( let seq = mkexp(Pexp_sequence (_1, _5)) in
        let payload = PStr [mkstrexp seq []] in
        mkexp (Pexp_extension (_4, payload)) )
# 8213 "ml/parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'label_let_pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_default) in
    Obj.repr(
# 1143 "ml/parser.mly"
      ( (Optional (fst _3), _4, snd _3) )
# 8221 "ml/parser.ml"
               : 'labeled_simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label_var) in
    Obj.repr(
# 1145 "ml/parser.mly"
      ( (Optional (fst _2), None, snd _2) )
# 8228 "ml/parser.ml"
               : 'labeled_simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'let_pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'opt_default) in
    Obj.repr(
# 1147 "ml/parser.mly"
      ( (Optional _1, _4, _3) )
# 8237 "ml/parser.ml"
               : 'labeled_simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_var) in
    Obj.repr(
# 1149 "ml/parser.mly"
      ( (Optional _1, None, _2) )
# 8245 "ml/parser.ml"
               : 'labeled_simple_pattern))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'label_let_pattern) in
    Obj.repr(
# 1151 "ml/parser.mly"
      ( (Labelled (fst _3), None, snd _3) )
# 8252 "ml/parser.ml"
               : 'labeled_simple_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label_var) in
    Obj.repr(
# 1153 "ml/parser.mly"
      ( (Labelled (fst _2), None, snd _2) )
# 8259 "ml/parser.ml"
               : 'labeled_simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern) in
    Obj.repr(
# 1155 "ml/parser.mly"
      ( (Labelled _1, None, _2) )
# 8267 "ml/parser.ml"
               : 'labeled_simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern) in
    Obj.repr(
# 1157 "ml/parser.mly"
      ( (Nolabel, None, _1) )
# 8274 "ml/parser.ml"
               : 'labeled_simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1160 "ml/parser.mly"
                      ( mkpat(Ppat_var (mkrhs _1 1)) )
# 8281 "ml/parser.ml"
               : 'pattern_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 1161 "ml/parser.mly"
                      ( mkpat Ppat_any )
# 8287 "ml/parser.ml"
               : 'pattern_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 1164 "ml/parser.mly"
                                        ( None )
# 8293 "ml/parser.ml"
               : 'opt_default))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1165 "ml/parser.mly"
                                        ( Some _2 )
# 8300 "ml/parser.ml"
               : 'opt_default))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'label_var) in
    Obj.repr(
# 1169 "ml/parser.mly"
      ( _1 )
# 8307 "ml/parser.ml"
               : 'label_let_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label_var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1171 "ml/parser.mly"
      ( let (lab, pat) = _1 in (lab, mkpat(Ppat_constraint(pat, _3))) )
# 8315 "ml/parser.ml"
               : 'label_let_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1174 "ml/parser.mly"
              ( (_1, mkpat(Ppat_var (mkrhs _1 1))) )
# 8322 "ml/parser.ml"
               : 'label_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1178 "ml/parser.mly"
      ( _1 )
# 8329 "ml/parser.ml"
               : 'let_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1180 "ml/parser.mly"
      ( mkpat(Ppat_constraint(_1, _3)) )
# 8337 "ml/parser.ml"
               : 'let_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1184 "ml/parser.mly"
      ( _1 )
# 8344 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_labeled_expr_list) in
    Obj.repr(
# 1186 "ml/parser.mly"
      ( mkexp(Pexp_apply(_1, List.rev _2)) )
# 8352 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'let_bindings) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1188 "ml/parser.mly"
      ( expr_of_let_bindings _1 _3 )
# 8360 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'module_binding_body) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1190 "ml/parser.mly"
      ( mkexp_attrs (Pexp_letmodule(mkrhs _4 4, _5, _7)) _3 )
# 8370 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'let_exception_declaration) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1192 "ml/parser.mly"
      ( mkexp_attrs (Pexp_letexception(_4, _6)) _3 )
# 8379 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'override_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1194 "ml/parser.mly"
      ( mkexp_attrs (Pexp_open(_3, mkrhs _5 5, _7)) _4 )
# 8389 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_bar) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'match_cases) in
    Obj.repr(
# 1196 "ml/parser.mly"
      ( mkexp_attrs (Pexp_function(List.rev _4)) _2 )
# 8398 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'labeled_simple_pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 1198 "ml/parser.mly"
      ( let (l,o,p) = _3 in
        mkexp_attrs (Pexp_fun(l, o, p, _4)) _2 )
# 8408 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'ext_attributes) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'lident_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 1201 "ml/parser.mly"
      ( mkexp_attrs (mk_newtypes _5 _7).pexp_desc _2 )
# 8417 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_bar) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'match_cases) in
    Obj.repr(
# 1203 "ml/parser.mly"
      ( mkexp_attrs (Pexp_match(_3, List.rev _6)) _2 )
# 8427 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_bar) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'match_cases) in
    Obj.repr(
# 1205 "ml/parser.mly"
      ( mkexp_attrs (Pexp_try(_3, List.rev _6)) _2 )
# 8437 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    Obj.repr(
# 1207 "ml/parser.mly"
      ( syntax_error() )
# 8445 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_comma_list) in
    Obj.repr(
# 1209 "ml/parser.mly"
      ( mkexp(Pexp_tuple(List.rev _1)) )
# 8452 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constr_longident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1211 "ml/parser.mly"
      ( mkexp(Pexp_construct(mkrhs _1 1, Some _2)) )
# 8460 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name_tag) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1213 "ml/parser.mly"
      ( mkexp(Pexp_variant(_1, Some _2)) )
# 8468 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'seq_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1215 "ml/parser.mly"
      ( mkexp_attrs(Pexp_ifthenelse(_3, _5, Some _7)) _2 )
# 8478 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1217 "ml/parser.mly"
      ( mkexp_attrs (Pexp_ifthenelse(_3, _5, None)) _2 )
# 8487 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1219 "ml/parser.mly"
      ( mkexp_attrs (Pexp_while(_3, _5)) _2 )
# 8496 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'pattern) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'seq_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'direction_flag) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1222 "ml/parser.mly"
      ( mkexp_attrs(Pexp_for(_3, _5, _7, _6, _9)) _2 )
# 8508 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1224 "ml/parser.mly"
      ( mkexp_cons (rhs_loc 2) (ghexp(Pexp_tuple[_1;_3])) (symbol_rloc()) )
# 8516 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1226 "ml/parser.mly"
      ( mkinfix _1 _2 _3 )
# 8525 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1228 "ml/parser.mly"
      ( mkinfix _1 _2 _3 )
# 8534 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1230 "ml/parser.mly"
      ( mkinfix _1 _2 _3 )
# 8543 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1232 "ml/parser.mly"
      ( mkinfix _1 _2 _3 )
# 8552 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1234 "ml/parser.mly"
      ( mkinfix _1 _2 _3 )
# 8561 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1236 "ml/parser.mly"
      ( mkinfix _1 "+" _3 )
# 8569 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1238 "ml/parser.mly"
      ( mkinfix _1 "+." _3 )
# 8577 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1240 "ml/parser.mly"
      ( mkinfix _1 "+=" _3 )
# 8585 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1242 "ml/parser.mly"
      ( mkinfix _1 "-" _3 )
# 8593 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1244 "ml/parser.mly"
      ( mkinfix _1 "-." _3 )
# 8601 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1246 "ml/parser.mly"
      ( mkinfix _1 "*" _3 )
# 8609 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1248 "ml/parser.mly"
      ( mkinfix _1 "%" _3 )
# 8617 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1250 "ml/parser.mly"
      ( mkinfix _1 "=" _3 )
# 8625 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1252 "ml/parser.mly"
    ( mkinfix _1 "<" _3 )
# 8633 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1254 "ml/parser.mly"
      ( mkinfix _1 ">" _3 )
# 8641 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1256 "ml/parser.mly"
      ( mkinfix _1 "or" _3 )
# 8649 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1258 "ml/parser.mly"
      ( mkinfix _1 "||" _3 )
# 8657 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1260 "ml/parser.mly"
      ( mkinfix _1 "&" _3 )
# 8665 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1262 "ml/parser.mly"
      ( mkinfix _1 "&&" _3 )
# 8673 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1264 "ml/parser.mly"
      ( mkinfix _1 ":=" _3 )
# 8681 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'subtractive) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1266 "ml/parser.mly"
      ( mkuminus _1 _2 )
# 8689 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'additive) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1268 "ml/parser.mly"
      ( mkuplus _1 _2 )
# 8697 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'label_longident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1270 "ml/parser.mly"
      ( mkexp(Pexp_setfield(_1, mkrhs _3 3, _5)) )
# 8706 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1272 "ml/parser.mly"
      ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "Array" "set")),
                         [Nolabel,_1; Nolabel,_4; Nolabel,_7])) )
# 8716 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'seq_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1275 "ml/parser.mly"
      ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "String" "set")),
                         [Nolabel,_1; Nolabel,_4; Nolabel,_7])) )
# 8726 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1278 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Lident ("." ^ _2 ^ "[]<-")) in
        mkexp @@ Pexp_apply(id , [Nolabel, _1; Nolabel, _4; Nolabel, _7]) )
# 8737 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1281 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Lident ("." ^ _2 ^ "()<-")) in
        mkexp @@ Pexp_apply(id , [Nolabel, _1; Nolabel, _4; Nolabel, _7]) )
# 8748 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1284 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Lident ("." ^ _2 ^ "{}<-")) in
        mkexp @@ Pexp_apply(id , [Nolabel, _1; Nolabel, _4; Nolabel, _7]) )
# 8759 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1287 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Ldot(_3,"." ^ _4 ^ "[]<-")) in
        mkexp @@ Pexp_apply(id , [Nolabel, _1; Nolabel, _6; Nolabel, _9]) )
# 8771 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1290 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Ldot(_3, "." ^ _4 ^ "()<-")) in
        mkexp @@ Pexp_apply(id , [Nolabel, _1; Nolabel, _6; Nolabel, _9]) )
# 8783 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1293 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Ldot(_3, "." ^ _4 ^ "{}<-")) in
        mkexp @@ Pexp_apply(id , [Nolabel, _1; Nolabel, _6; Nolabel, _9]) )
# 8795 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1296 "ml/parser.mly"
      ( mkexp(Pexp_setinstvar(mkrhs _1 1, _3)) )
# 8803 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1298 "ml/parser.mly"
      ( mkexp_attrs (Pexp_assert _3) _2 )
# 8811 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1300 "ml/parser.mly"
      ( mkexp_attrs (Pexp_lazy _3) _2 )
# 8819 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_structure) in
    Obj.repr(
# 1302 "ml/parser.mly"
      ( mkexp_attrs (Pexp_object _3) _2 )
# 8827 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_structure) in
    Obj.repr(
# 1304 "ml/parser.mly"
      ( unclosed "object" 1 "end" 4 )
# 8835 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 1306 "ml/parser.mly"
      ( Exp.attr _1 _2 )
# 8843 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 1308 "ml/parser.mly"
     ( not_expecting 1 "wildcard \"_\"" )
# 8849 "ml/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'val_longident) in
    Obj.repr(
# 1312 "ml/parser.mly"
      ( mkexp(Pexp_ident (mkrhs _1 1)) )
# 8856 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 1314 "ml/parser.mly"
      ( mkexp(Pexp_constant _1) )
# 8863 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr_longident) in
    Obj.repr(
# 1316 "ml/parser.mly"
      ( mkexp(Pexp_construct(mkrhs _1 1, None)) )
# 8870 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name_tag) in
    Obj.repr(
# 1318 "ml/parser.mly"
      ( mkexp(Pexp_variant(_1, None)) )
# 8877 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1320 "ml/parser.mly"
      ( reloc_exp _2 )
# 8884 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1322 "ml/parser.mly"
      ( unclosed "(" 1 ")" 3 )
# 8891 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1324 "ml/parser.mly"
      ( wrap_exp_attrs (reloc_exp _3) _2 (* check location *) )
# 8899 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ext_attributes) in
    Obj.repr(
# 1326 "ml/parser.mly"
      ( mkexp_attrs (Pexp_construct (mkloc (Lident "()") (symbol_rloc ()),
                               None)) _2 )
# 8907 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1329 "ml/parser.mly"
      ( unclosed "begin" 1 "end" 4 )
# 8915 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_constraint) in
    Obj.repr(
# 1331 "ml/parser.mly"
      ( mkexp_constraint _2 _3 )
# 8923 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'label_longident) in
    Obj.repr(
# 1333 "ml/parser.mly"
      ( mkexp(Pexp_field(_1, mkrhs _3 3)) )
# 8931 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1335 "ml/parser.mly"
      ( mkexp(Pexp_open(Fresh, mkrhs _1 1, _4)) )
# 8939 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mod_longident) in
    Obj.repr(
# 1337 "ml/parser.mly"
      ( mkexp(Pexp_open(Fresh, mkrhs _1 1,
                        mkexp(Pexp_construct(mkrhs (Lident "()") 1, None)))) )
# 8947 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1340 "ml/parser.mly"
      ( unclosed "(" 3 ")" 5 )
# 8955 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1342 "ml/parser.mly"
      ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "Array" "get")),
                         [Nolabel,_1; Nolabel,_4])) )
# 8964 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1345 "ml/parser.mly"
      ( unclosed "(" 3 ")" 5 )
# 8972 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1347 "ml/parser.mly"
      ( mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "String" "get")),
                         [Nolabel,_1; Nolabel,_4])) )
# 8981 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'seq_expr) in
    Obj.repr(
# 1350 "ml/parser.mly"
      ( unclosed "[" 3 "]" 5 )
# 8989 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1352 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Lident ("." ^ _2 ^ "[]")) in
        mkexp @@ Pexp_apply(id, [Nolabel, _1; Nolabel, _4]) )
# 8999 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1355 "ml/parser.mly"
      ( unclosed "[" 3 "]" 5 )
# 9008 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1357 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Lident ("." ^ _2 ^ "()")) in
        mkexp @@ Pexp_apply(id, [Nolabel, _1; Nolabel, _4]) )
# 9018 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1360 "ml/parser.mly"
      ( unclosed "(" 3 ")" 5 )
# 9027 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1362 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Lident ("." ^ _2 ^ "{}")) in
        mkexp @@ Pexp_apply(id, [Nolabel, _1; Nolabel, _4]) )
# 9037 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1365 "ml/parser.mly"
      ( unclosed "{" 3 "}" 5 )
# 9046 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1367 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Ldot(_3, "." ^ _4 ^ "[]")) in
        mkexp @@ Pexp_apply(id, [Nolabel, _1; Nolabel, _6]) )
# 9057 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1370 "ml/parser.mly"
      ( unclosed "[" 5 "]" 7 )
# 9067 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1372 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Ldot(_3, "." ^ _4 ^ "()")) in
        mkexp @@ Pexp_apply(id, [Nolabel, _1; Nolabel, _6]) )
# 9078 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1375 "ml/parser.mly"
      ( unclosed "(" 5 ")" 7 )
# 9088 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1377 "ml/parser.mly"
      ( let id = mkexp @@ Pexp_ident( ghloc @@ Ldot(_3, "." ^ _4 ^ "{}")) in
        mkexp @@ Pexp_apply(id, [Nolabel, _1; Nolabel, _6]) )
# 9099 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 1380 "ml/parser.mly"
      ( unclosed "{" 5 "}" 7 )
# 9109 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr_comma_list) in
    Obj.repr(
# 1382 "ml/parser.mly"
      ( unclosed "{" 3 "}" 5 )
# 9117 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'record_expr) in
    Obj.repr(
# 1384 "ml/parser.mly"
      ( let (exten, fields) = _2 in mkexp (Pexp_record(fields, exten)) )
# 9124 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'record_expr) in
    Obj.repr(
# 1386 "ml/parser.mly"
      ( unclosed "{" 1 "}" 3 )
# 9131 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'record_expr) in
    Obj.repr(
# 1388 "ml/parser.mly"
      ( let (exten, fields) = _4 in
        let rec_exp = mkexp(Pexp_record(fields, exten)) in
        mkexp(Pexp_open(Fresh, mkrhs _1 1, rec_exp)) )
# 9141 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'record_expr) in
    Obj.repr(
# 1392 "ml/parser.mly"
      ( unclosed "{" 3 "}" 5 )
# 9149 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1394 "ml/parser.mly"
      ( mkexp (Pexp_array(List.rev _2)) )
# 9157 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1396 "ml/parser.mly"
      ( unclosed "[|" 1 "|]" 4 )
# 9165 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 1398 "ml/parser.mly"
      ( mkexp (Pexp_array []) )
# 9171 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1400 "ml/parser.mly"
      ( mkexp(Pexp_open(Fresh, mkrhs _1 1, mkexp(Pexp_array(List.rev _4)))) )
# 9180 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mod_longident) in
    Obj.repr(
# 1402 "ml/parser.mly"
      ( mkexp(Pexp_open(Fresh, mkrhs _1 1, mkexp(Pexp_array []))) )
# 9187 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1404 "ml/parser.mly"
      ( unclosed "[|" 3 "|]" 6 )
# 9196 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1406 "ml/parser.mly"
      ( reloc_exp (mktailexp (rhs_loc 4) (List.rev _2)) )
# 9204 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1408 "ml/parser.mly"
      ( unclosed "[" 1 "]" 4 )
# 9212 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1410 "ml/parser.mly"
      ( let list_exp = reloc_exp (mktailexp (rhs_loc 6) (List.rev _4)) in
        mkexp(Pexp_open(Fresh, mkrhs _1 1, list_exp)) )
# 9222 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mod_longident) in
    Obj.repr(
# 1413 "ml/parser.mly"
      ( mkexp(Pexp_open(Fresh, mkrhs _1 1,
                        mkexp(Pexp_construct(mkrhs (Lident "[]") 1, None)))) )
# 9230 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1416 "ml/parser.mly"
      ( unclosed "[" 3 "]" 6 )
# 9239 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1418 "ml/parser.mly"
      ( mkexp(Pexp_apply(mkoperator _1 1, [Nolabel,_2])) )
# 9247 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1420 "ml/parser.mly"
      ( mkexp(Pexp_apply(mkoperator "!" 1, [Nolabel,_2])) )
# 9254 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_expr_list) in
    Obj.repr(
# 1422 "ml/parser.mly"
      ( mkexp (Pexp_override _2) )
# 9261 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_expr_list) in
    Obj.repr(
# 1424 "ml/parser.mly"
      ( unclosed "{<" 1 ">}" 3 )
# 9268 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 1426 "ml/parser.mly"
      ( mkexp (Pexp_override []))
# 9274 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_expr_list) in
    Obj.repr(
# 1428 "ml/parser.mly"
      ( mkexp(Pexp_open(Fresh, mkrhs _1 1, mkexp (Pexp_override _4))))
# 9282 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mod_longident) in
    Obj.repr(
# 1430 "ml/parser.mly"
      ( mkexp(Pexp_open(Fresh, mkrhs _1 1, mkexp (Pexp_override []))))
# 9289 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'field_expr_list) in
    Obj.repr(
# 1432 "ml/parser.mly"
      ( unclosed "{<" 3 ">}" 5 )
# 9297 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 1434 "ml/parser.mly"
      ( mkexp(Pexp_send(_1, mkrhs _3 3)) )
# 9305 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1436 "ml/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9314 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_expr) in
    Obj.repr(
# 1438 "ml/parser.mly"
      ( mkexp_attrs (Pexp_pack _4) _3 )
# 9322 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'module_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'package_type) in
    Obj.repr(
# 1440 "ml/parser.mly"
      ( mkexp_attrs (Pexp_constraint (ghexp (Pexp_pack _4),
                                      ghtyp (Ptyp_package _6)))
                    _3 )
# 9333 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'module_expr) in
    Obj.repr(
# 1444 "ml/parser.mly"
      ( unclosed "(" 1 ")" 6 )
# 9341 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'mod_longident) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'module_expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'package_type) in
    Obj.repr(
# 1447 "ml/parser.mly"
      ( mkexp(Pexp_open(Fresh, mkrhs _1 1,
        mkexp_attrs (Pexp_constraint (ghexp (Pexp_pack _6),
                                ghtyp (Ptyp_package _8)))
                    _5 )) )
# 9354 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'mod_longident) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'module_expr) in
    Obj.repr(
# 1452 "ml/parser.mly"
      ( unclosed "(" 3 ")" 8 )
# 9363 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension) in
    Obj.repr(
# 1454 "ml/parser.mly"
      ( mkexp (Pexp_extension _1) )
# 9370 "ml/parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'labeled_simple_expr) in
    Obj.repr(
# 1458 "ml/parser.mly"
      ( [_1] )
# 9377 "ml/parser.ml"
               : 'simple_labeled_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_labeled_expr_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'labeled_simple_expr) in
    Obj.repr(
# 1460 "ml/parser.mly"
      ( _2 :: _1 )
# 9385 "ml/parser.ml"
               : 'simple_labeled_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1464 "ml/parser.mly"
      ( (Nolabel, _1) )
# 9392 "ml/parser.ml"
               : 'labeled_simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'label_expr) in
    Obj.repr(
# 1466 "ml/parser.mly"
      ( _1 )
# 9399 "ml/parser.ml"
               : 'labeled_simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1470 "ml/parser.mly"
      ( (Labelled _1, _2) )
# 9407 "ml/parser.ml"
               : 'label_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label_ident) in
    Obj.repr(
# 1472 "ml/parser.mly"
      ( (Labelled (fst _2), snd _2) )
# 9414 "ml/parser.ml"
               : 'label_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label_ident) in
    Obj.repr(
# 1474 "ml/parser.mly"
      ( (Optional (fst _2), snd _2) )
# 9421 "ml/parser.ml"
               : 'label_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 1476 "ml/parser.mly"
      ( (Optional _1, _2) )
# 9429 "ml/parser.ml"
               : 'label_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1479 "ml/parser.mly"
             ( (_1, mkexp(Pexp_ident(mkrhs (Lident _1) 1))) )
# 9436 "ml/parser.ml"
               : 'label_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1482 "ml/parser.mly"
                                      ( [mkrhs _1 1] )
# 9443 "ml/parser.ml"
               : 'lident_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lident_list) in
    Obj.repr(
# 1483 "ml/parser.mly"
                                      ( mkrhs _1 1 :: _2 )
# 9451 "ml/parser.ml"
               : 'lident_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'val_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'strict_binding) in
    Obj.repr(
# 1487 "ml/parser.mly"
      ( (mkpatvar _1 1, _2) )
# 9459 "ml/parser.ml"
               : 'let_binding_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'val_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_constraint) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1489 "ml/parser.mly"
      ( let v = mkpatvar _1 1 in (* PR#7344 *)
        let t =
          match _2 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        (ghpat(Ppat_constraint(v, ghtyp(Ptyp_poly([],t)))),
         mkexp_constraint _4 _2) )
# 9476 "ml/parser.ml"
               : 'let_binding_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'val_ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'typevar_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'core_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1499 "ml/parser.mly"
      ( (ghpat(Ppat_constraint(mkpatvar _1 1,
                               ghtyp(Ptyp_poly(List.rev _3,_5)))),
         _7) )
# 9488 "ml/parser.ml"
               : 'let_binding_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'val_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'lident_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'core_type) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1503 "ml/parser.mly"
      ( let exp, poly = wrap_type_annotation _4 _6 _8 in
        (ghpat(Ppat_constraint(mkpatvar _1 1, poly)), exp) )
# 9499 "ml/parser.ml"
               : 'let_binding_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1506 "ml/parser.mly"
      ( (_1, _3) )
# 9507 "ml/parser.ml"
               : 'let_binding_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_pattern_not_ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'core_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1508 "ml/parser.mly"
      ( (ghpat(Ppat_constraint(_1, _3)), _5) )
# 9516 "ml/parser.ml"
               : 'let_binding_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_binding) in
    Obj.repr(
# 1511 "ml/parser.mly"
                                                ( _1 )
# 9523 "ml/parser.ml"
               : 'let_bindings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'let_bindings) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'and_let_binding) in
    Obj.repr(
# 1512 "ml/parser.mly"
                                                ( addlb _1 _2 )
# 9531 "ml/parser.ml"
               : 'let_bindings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'rec_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'let_binding_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1516 "ml/parser.mly"
      ( let (ext, attr) = _2 in
        mklbs ext _3 (mklb true _4 (attr@_5)) )
# 9542 "ml/parser.ml"
               : 'let_binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'let_binding_body) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1521 "ml/parser.mly"
      ( mklb false _3 (_2@_4) )
# 9551 "ml/parser.ml"
               : 'and_let_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'strict_binding) in
    Obj.repr(
# 1525 "ml/parser.mly"
      ( _1 )
# 9558 "ml/parser.ml"
               : 'fun_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_constraint) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1527 "ml/parser.mly"
      ( mkexp_constraint _3 _1 )
# 9566 "ml/parser.ml"
               : 'fun_binding))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1531 "ml/parser.mly"
      ( _2 )
# 9573 "ml/parser.ml"
               : 'strict_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'labeled_simple_pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_binding) in
    Obj.repr(
# 1533 "ml/parser.mly"
      ( let (l, o, p) = _1 in ghexp(Pexp_fun(l, o, p, _2)) )
# 9581 "ml/parser.ml"
               : 'strict_binding))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lident_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fun_binding) in
    Obj.repr(
# 1535 "ml/parser.mly"
      ( mk_newtypes _3 _5 )
# 9589 "ml/parser.ml"
               : 'strict_binding))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'match_case) in
    Obj.repr(
# 1538 "ml/parser.mly"
               ( [_1] )
# 9596 "ml/parser.ml"
               : 'match_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'match_cases) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'match_case) in
    Obj.repr(
# 1539 "ml/parser.mly"
                               ( _3 :: _1 )
# 9604 "ml/parser.ml"
               : 'match_cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1543 "ml/parser.mly"
      ( Exp.case _1 _3 )
# 9612 "ml/parser.ml"
               : 'match_case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'seq_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1545 "ml/parser.mly"
      ( Exp.case _1 ~guard:_3 _5 )
# 9621 "ml/parser.ml"
               : 'match_case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    Obj.repr(
# 1547 "ml/parser.mly"
      ( Exp.case _1 (Exp.unreachable ~loc:(rhs_loc 3) ()))
# 9628 "ml/parser.ml"
               : 'match_case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1551 "ml/parser.mly"
      ( _2 )
# 9635 "ml/parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'simple_core_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 1553 "ml/parser.mly"
      ( mkexp (Pexp_constraint (_4, _2)) )
# 9643 "ml/parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'labeled_simple_pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 1556 "ml/parser.mly"
      (
       let (l,o,p) = _1 in
       ghexp(Pexp_fun(l, o, p, _2))
      )
# 9654 "ml/parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lident_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fun_def) in
    Obj.repr(
# 1561 "ml/parser.mly"
      ( mk_newtypes _3 _5 )
# 9662 "ml/parser.ml"
               : 'fun_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1564 "ml/parser.mly"
                                                ( _3 :: _1 )
# 9670 "ml/parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1565 "ml/parser.mly"
                                                ( [_3; _1] )
# 9678 "ml/parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lbl_expr_list) in
    Obj.repr(
# 1568 "ml/parser.mly"
                                                ( (Some _1, _3) )
# 9686 "ml/parser.ml"
               : 'record_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lbl_expr_list) in
    Obj.repr(
# 1569 "ml/parser.mly"
                                                ( (None, _1) )
# 9693 "ml/parser.ml"
               : 'record_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lbl_expr) in
    Obj.repr(
# 1572 "ml/parser.mly"
              ( [_1] )
# 9700 "ml/parser.ml"
               : 'lbl_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbl_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lbl_expr_list) in
    Obj.repr(
# 1573 "ml/parser.mly"
                                 ( _1 :: _3 )
# 9708 "ml/parser.ml"
               : 'lbl_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lbl_expr) in
    Obj.repr(
# 1574 "ml/parser.mly"
                   ( [_1] )
# 9715 "ml/parser.ml"
               : 'lbl_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'label_longident) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_type_constraint) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1578 "ml/parser.mly"
      ( (mkrhs _1 1, mkexp_opt_constraint _4 _2) )
# 9724 "ml/parser.ml"
               : 'lbl_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'label_longident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_type_constraint) in
    Obj.repr(
# 1580 "ml/parser.mly"
      ( (mkrhs _1 1, mkexp_opt_constraint (exp_of_label _1 1) _2) )
# 9732 "ml/parser.ml"
               : 'lbl_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semi) in
    Obj.repr(
# 1583 "ml/parser.mly"
                        ( [_1] )
# 9740 "ml/parser.ml"
               : 'field_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_expr_list) in
    Obj.repr(
# 1584 "ml/parser.mly"
                                    ( _1 :: _3 )
# 9748 "ml/parser.ml"
               : 'field_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1588 "ml/parser.mly"
      ( (mkrhs _1 1, _3) )
# 9756 "ml/parser.ml"
               : 'field_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 1590 "ml/parser.mly"
      ( (mkrhs _1 1, exp_of_label (Lident _1) 1) )
# 9763 "ml/parser.ml"
               : 'field_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1593 "ml/parser.mly"
                                                ( [_1] )
# 9770 "ml/parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 1594 "ml/parser.mly"
                                                ( _3 :: _1 )
# 9778 "ml/parser.ml"
               : 'expr_semi_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1597 "ml/parser.mly"
                                                ( (Some _2, None) )
# 9785 "ml/parser.ml"
               : 'type_constraint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'core_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1598 "ml/parser.mly"
                                                ( (Some _2, Some _4) )
# 9793 "ml/parser.ml"
               : 'type_constraint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1599 "ml/parser.mly"
                                                ( (None, Some _2) )
# 9800 "ml/parser.ml"
               : 'type_constraint))
; (fun __caml_parser_env ->
    Obj.repr(
# 1600 "ml/parser.mly"
                                                ( syntax_error() )
# 9806 "ml/parser.ml"
               : 'type_constraint))
; (fun __caml_parser_env ->
    Obj.repr(
# 1601 "ml/parser.mly"
                                                ( syntax_error() )
# 9812 "ml/parser.ml"
               : 'type_constraint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_constraint) in
    Obj.repr(
# 1604 "ml/parser.mly"
                    ( Some _1 )
# 9819 "ml/parser.ml"
               : 'opt_type_constraint))
; (fun __caml_parser_env ->
    Obj.repr(
# 1605 "ml/parser.mly"
                ( None )
# 9825 "ml/parser.ml"
               : 'opt_type_constraint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 1612 "ml/parser.mly"
      ( mkpat(Ppat_alias(_1, mkrhs _3 3)) )
# 9833 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    Obj.repr(
# 1614 "ml/parser.mly"
      ( expecting 3 "identifier" )
# 9840 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_comma_list) in
    Obj.repr(
# 1616 "ml/parser.mly"
      ( mkpat(Ppat_tuple(List.rev _1)) )
# 9847 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1618 "ml/parser.mly"
      ( mkpat_cons (rhs_loc 2) (ghpat(Ppat_tuple[_1;_3])) (symbol_rloc()) )
# 9855 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    Obj.repr(
# 1620 "ml/parser.mly"
      ( expecting 3 "pattern" )
# 9862 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1622 "ml/parser.mly"
      ( mkpat(Ppat_or(_1, _3)) )
# 9870 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    Obj.repr(
# 1624 "ml/parser.mly"
      ( expecting 3 "pattern" )
# 9877 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1626 "ml/parser.mly"
      ( mkpat_attrs (Ppat_exception _3) _2)
# 9885 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 1628 "ml/parser.mly"
      ( Pat.attr _1 _2 )
# 9893 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_gen) in
    Obj.repr(
# 1629 "ml/parser.mly"
                ( _1 )
# 9900 "ml/parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 1633 "ml/parser.mly"
      ( mkpat(Ppat_alias(_1, mkrhs _3 3)) )
# 9908 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    Obj.repr(
# 1635 "ml/parser.mly"
      ( expecting 3 "identifier" )
# 9915 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_no_exn_comma_list) in
    Obj.repr(
# 1637 "ml/parser.mly"
      ( mkpat(Ppat_tuple(List.rev _1)) )
# 9922 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1639 "ml/parser.mly"
      ( mkpat_cons (rhs_loc 2) (ghpat(Ppat_tuple[_1;_3])) (symbol_rloc()) )
# 9930 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    Obj.repr(
# 1641 "ml/parser.mly"
      ( expecting 3 "pattern" )
# 9937 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1643 "ml/parser.mly"
      ( mkpat(Ppat_or(_1, _3)) )
# 9945 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    Obj.repr(
# 1645 "ml/parser.mly"
      ( expecting 3 "pattern" )
# 9952 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_no_exn) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 1647 "ml/parser.mly"
      ( Pat.attr _1 _2 )
# 9960 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_gen) in
    Obj.repr(
# 1648 "ml/parser.mly"
                ( _1 )
# 9967 "ml/parser.ml"
               : 'pattern_no_exn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern) in
    Obj.repr(
# 1652 "ml/parser.mly"
      ( _1 )
# 9974 "ml/parser.ml"
               : 'pattern_gen))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constr_longident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1654 "ml/parser.mly"
      ( mkpat(Ppat_construct(mkrhs _1 1, Some _2)) )
# 9982 "ml/parser.ml"
               : 'pattern_gen))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name_tag) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1656 "ml/parser.mly"
      ( mkpat(Ppat_variant(_1, Some _2)) )
# 9990 "ml/parser.ml"
               : 'pattern_gen))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern) in
    Obj.repr(
# 1658 "ml/parser.mly"
      ( mkpat_attrs (Ppat_lazy _3) _2)
# 9998 "ml/parser.ml"
               : 'pattern_gen))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 1662 "ml/parser.mly"
      ( mkpat(Ppat_var (mkrhs _1 1)) )
# 10005 "ml/parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_pattern_not_ident) in
    Obj.repr(
# 1663 "ml/parser.mly"
                             ( _1 )
# 10012 "ml/parser.ml"
               : 'simple_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 1667 "ml/parser.mly"
      ( mkpat(Ppat_any) )
# 10018 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'signed_constant) in
    Obj.repr(
# 1669 "ml/parser.mly"
      ( mkpat(Ppat_constant _1) )
# 10025 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'signed_constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'signed_constant) in
    Obj.repr(
# 1671 "ml/parser.mly"
      ( mkpat(Ppat_interval (_1, _3)) )
# 10033 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constr_longident) in
    Obj.repr(
# 1673 "ml/parser.mly"
      ( mkpat(Ppat_construct(mkrhs _1 1, None)) )
# 10040 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name_tag) in
    Obj.repr(
# 1675 "ml/parser.mly"
      ( mkpat(Ppat_variant(_1, None)) )
# 10047 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_longident) in
    Obj.repr(
# 1677 "ml/parser.mly"
      ( mkpat(Ppat_type (mkrhs _2 2)) )
# 10054 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_delimited_pattern) in
    Obj.repr(
# 1679 "ml/parser.mly"
      ( _1 )
# 10061 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_delimited_pattern) in
    Obj.repr(
# 1681 "ml/parser.mly"
      ( mkpat @@ Ppat_open(mkrhs _1 1, _3) )
# 10069 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mod_longident) in
    Obj.repr(
# 1683 "ml/parser.mly"
    ( mkpat @@ Ppat_open(mkrhs _1 1, mkpat @@
               Ppat_construct ( mkrhs (Lident "[]") 4, None)) )
# 10077 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mod_longident) in
    Obj.repr(
# 1686 "ml/parser.mly"
      ( mkpat @@ Ppat_open( mkrhs _1 1, mkpat @@
                 Ppat_construct ( mkrhs (Lident "()") 4, None) ) )
# 10085 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 1689 "ml/parser.mly"
      ( mkpat @@ Ppat_open (mkrhs _1 1, _4))
# 10093 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 1691 "ml/parser.mly"
      (unclosed "(" 3 ")" 5  )
# 10101 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mod_longident) in
    Obj.repr(
# 1693 "ml/parser.mly"
      ( expecting 4 "pattern" )
# 10108 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 1695 "ml/parser.mly"
      ( reloc_pat _2 )
# 10115 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 1697 "ml/parser.mly"
      ( unclosed "(" 1 ")" 3 )
# 10122 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    Obj.repr(
# 1699 "ml/parser.mly"
      ( mkpat(Ppat_constraint(_2, _4)) )
# 10130 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    Obj.repr(
# 1701 "ml/parser.mly"
      ( unclosed "(" 1 ")" 5 )
# 10138 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    Obj.repr(
# 1703 "ml/parser.mly"
      ( expecting 4 "type" )
# 10145 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1705 "ml/parser.mly"
      ( mkpat_attrs (Ppat_unpack (mkrhs _4 4)) _3 )
# 10153 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'package_type) in
    Obj.repr(
# 1707 "ml/parser.mly"
      ( mkpat_attrs
          (Ppat_constraint(mkpat(Ppat_unpack (mkrhs _4 4)),
                           ghtyp(Ptyp_package _6)))
          _3 )
# 10165 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'package_type) in
    Obj.repr(
# 1712 "ml/parser.mly"
      ( unclosed "(" 1 ")" 7 )
# 10174 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension) in
    Obj.repr(
# 1714 "ml/parser.mly"
      ( mkpat(Ppat_extension _1) )
# 10181 "ml/parser.ml"
               : 'simple_pattern_not_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lbl_pattern_list) in
    Obj.repr(
# 1719 "ml/parser.mly"
    ( let (fields, closed) = _2 in mkpat(Ppat_record(fields, closed)) )
# 10188 "ml/parser.ml"
               : 'simple_delimited_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lbl_pattern_list) in
    Obj.repr(
# 1721 "ml/parser.mly"
    ( unclosed "{" 1 "}" 3 )
# 10195 "ml/parser.ml"
               : 'simple_delimited_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1723 "ml/parser.mly"
    ( reloc_pat (mktailpat (rhs_loc 4) (List.rev _2)) )
# 10203 "ml/parser.ml"
               : 'simple_delimited_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1725 "ml/parser.mly"
    ( unclosed "[" 1 "]" 4 )
# 10211 "ml/parser.ml"
               : 'simple_delimited_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1727 "ml/parser.mly"
    ( mkpat(Ppat_array(List.rev _2)) )
# 10219 "ml/parser.ml"
               : 'simple_delimited_pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 1729 "ml/parser.mly"
    ( mkpat(Ppat_array []) )
# 10225 "ml/parser.ml"
               : 'simple_delimited_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_semi) in
    Obj.repr(
# 1731 "ml/parser.mly"
    ( unclosed "[|" 1 "|]" 4 )
# 10233 "ml/parser.ml"
               : 'simple_delimited_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1734 "ml/parser.mly"
                                                ( _3 :: _1 )
# 10241 "ml/parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1735 "ml/parser.mly"
                                                ( [_3; _1] )
# 10249 "ml/parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    Obj.repr(
# 1736 "ml/parser.mly"
                                                ( expecting 3 "pattern" )
# 10256 "ml/parser.ml"
               : 'pattern_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1739 "ml/parser.mly"
                                                ( _3 :: _1 )
# 10264 "ml/parser.ml"
               : 'pattern_no_exn_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1740 "ml/parser.mly"
                                                ( [_3; _1] )
# 10272 "ml/parser.ml"
               : 'pattern_no_exn_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_no_exn) in
    Obj.repr(
# 1741 "ml/parser.mly"
                                                ( expecting 3 "pattern" )
# 10279 "ml/parser.ml"
               : 'pattern_no_exn_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1744 "ml/parser.mly"
                                                ( [_1] )
# 10286 "ml/parser.ml"
               : 'pattern_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern_semi_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1745 "ml/parser.mly"
                                                ( _3 :: _1 )
# 10294 "ml/parser.ml"
               : 'pattern_semi_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lbl_pattern) in
    Obj.repr(
# 1748 "ml/parser.mly"
                ( [_1], Closed )
# 10301 "ml/parser.ml"
               : 'lbl_pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lbl_pattern) in
    Obj.repr(
# 1749 "ml/parser.mly"
                     ( [_1], Closed )
# 10308 "ml/parser.ml"
               : 'lbl_pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lbl_pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_semi) in
    Obj.repr(
# 1750 "ml/parser.mly"
                                         ( [_1], Open )
# 10316 "ml/parser.ml"
               : 'lbl_pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lbl_pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lbl_pattern_list) in
    Obj.repr(
# 1752 "ml/parser.mly"
      ( let (fields, closed) = _3 in _1 :: fields, closed )
# 10324 "ml/parser.ml"
               : 'lbl_pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'label_longident) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_pattern_type_constraint) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 1756 "ml/parser.mly"
     ( (mkrhs _1 1, mkpat_opt_constraint _4 _2) )
# 10333 "ml/parser.ml"
               : 'lbl_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'label_longident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_pattern_type_constraint) in
    Obj.repr(
# 1758 "ml/parser.mly"
     ( (mkrhs _1 1, mkpat_opt_constraint (pat_of_label _1 1) _2) )
# 10341 "ml/parser.ml"
               : 'lbl_pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1761 "ml/parser.mly"
                    ( Some _2 )
# 10348 "ml/parser.ml"
               : 'opt_pattern_type_constraint))
; (fun __caml_parser_env ->
    Obj.repr(
# 1762 "ml/parser.mly"
                ( None )
# 10354 "ml/parser.ml"
               : 'opt_pattern_type_constraint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'val_ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1769 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Val.mk (mkrhs _3 3) _5 ~attrs:(attrs@_6)
              ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
      , ext )
# 10367 "ml/parser.ml"
               : 'value_description))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string option) in
    Obj.repr(
# 1778 "ml/parser.mly"
                                                ( [fst _1] )
# 10374 "ml/parser.ml"
               : 'primitive_declaration_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * string option) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'primitive_declaration_body) in
    Obj.repr(
# 1779 "ml/parser.mly"
                                                ( fst _1 :: _2 )
# 10382 "ml/parser.ml"
               : 'primitive_declaration_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'val_ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'core_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'primitive_declaration_body) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1784 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        Val.mk (mkrhs _3 3) _5 ~prim:_7 ~attrs:(attrs@_8)
              ~loc:(symbol_rloc ()) ~docs:(symbol_docs ())
      , ext )
# 10396 "ml/parser.ml"
               : 'primitive_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_declaration) in
    Obj.repr(
# 1794 "ml/parser.mly"
      ( let (nonrec_flag, ty, ext) = _1 in (nonrec_flag, [ty], ext) )
# 10403 "ml/parser.ml"
               : 'type_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'and_type_declaration) in
    Obj.repr(
# 1796 "ml/parser.mly"
      ( let (nonrec_flag, tys, ext) = _1 in (nonrec_flag, _2 :: tys, ext) )
# 10411 "ml/parser.ml"
               : 'type_declarations))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'nonrec_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'optional_type_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'type_kind) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'constraints) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1802 "ml/parser.mly"
      ( let (kind, priv, manifest) = _6 in
        let (ext, attrs) = _2 in
        let ty =
          Type.mk (mkrhs _5 5) ~params:_4 ~cstrs:(List.rev _7) ~kind
            ~priv ?manifest ~attrs:(attrs@_8)
            ~loc:(symbol_rloc ()) ~docs:(symbol_docs ())
        in
          (_3, ty, ext) )
# 10431 "ml/parser.ml"
               : 'type_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'optional_type_parameters) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'type_kind) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'constraints) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1814 "ml/parser.mly"
      ( let (kind, priv, manifest) = _5 in
          Type.mk (mkrhs _4 4) ~params:_3 ~cstrs:(List.rev _6)
            ~kind ~priv ?manifest ~attrs:(_2@_7) ~loc:(symbol_rloc ())
            ~text:(symbol_text ()) ~docs:(symbol_docs ()) )
# 10446 "ml/parser.ml"
               : 'and_type_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constraints) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constrain) in
    Obj.repr(
# 1820 "ml/parser.mly"
                                                ( _3 :: _1 )
# 10454 "ml/parser.ml"
               : 'constraints))
; (fun __caml_parser_env ->
    Obj.repr(
# 1821 "ml/parser.mly"
                                                ( [] )
# 10460 "ml/parser.ml"
               : 'constraints))
; (fun __caml_parser_env ->
    Obj.repr(
# 1825 "ml/parser.mly"
      ( (Ptype_abstract, Public, None) )
# 10466 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1827 "ml/parser.mly"
      ( (Ptype_abstract, Public, Some _2) )
# 10473 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 1829 "ml/parser.mly"
      ( (Ptype_abstract, Private, Some _3) )
# 10480 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declarations) in
    Obj.repr(
# 1831 "ml/parser.mly"
      ( (Ptype_variant(List.rev _2), Public, None) )
# 10487 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declarations) in
    Obj.repr(
# 1833 "ml/parser.mly"
      ( (Ptype_variant(List.rev _3), Private, None) )
# 10494 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 1835 "ml/parser.mly"
      ( (Ptype_open, Public, None) )
# 10500 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 1837 "ml/parser.mly"
      ( (Ptype_open, Private, None) )
# 10506 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'private_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'label_declarations) in
    Obj.repr(
# 1839 "ml/parser.mly"
      ( (Ptype_record _4, _2, None) )
# 10514 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'core_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'private_flag) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declarations) in
    Obj.repr(
# 1841 "ml/parser.mly"
      ( (Ptype_variant(List.rev _5), _4, Some _2) )
# 10523 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'core_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'private_flag) in
    Obj.repr(
# 1843 "ml/parser.mly"
      ( (Ptype_open, _4, Some _2) )
# 10531 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'core_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'private_flag) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'label_declarations) in
    Obj.repr(
# 1845 "ml/parser.mly"
      ( (Ptype_record _6, _4, Some _2) )
# 10540 "ml/parser.ml"
               : 'type_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 1848 "ml/parser.mly"
                                                ( [] )
# 10546 "ml/parser.ml"
               : 'optional_type_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'optional_type_parameter) in
    Obj.repr(
# 1849 "ml/parser.mly"
                                                ( [_1] )
# 10553 "ml/parser.ml"
               : 'optional_type_parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optional_type_parameter_list) in
    Obj.repr(
# 1850 "ml/parser.mly"
                                                ( List.rev _2 )
# 10560 "ml/parser.ml"
               : 'optional_type_parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_variance) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optional_type_variable) in
    Obj.repr(
# 1853 "ml/parser.mly"
                                                ( _2, _1 )
# 10568 "ml/parser.ml"
               : 'optional_type_parameter))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'optional_type_parameter) in
    Obj.repr(
# 1856 "ml/parser.mly"
                                                         ( [_1] )
# 10575 "ml/parser.ml"
               : 'optional_type_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'optional_type_parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optional_type_parameter) in
    Obj.repr(
# 1857 "ml/parser.mly"
                                                                  ( _3 :: _1 )
# 10583 "ml/parser.ml"
               : 'optional_type_parameter_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 1860 "ml/parser.mly"
                                                ( mktyp(Ptyp_var _2) )
# 10590 "ml/parser.ml"
               : 'optional_type_variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 1861 "ml/parser.mly"
                                                ( mktyp(Ptyp_any) )
# 10596 "ml/parser.ml"
               : 'optional_type_variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_variance) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_variable) in
    Obj.repr(
# 1866 "ml/parser.mly"
                                                  ( _2, _1 )
# 10604 "ml/parser.ml"
               : 'type_parameter))
; (fun __caml_parser_env ->
    Obj.repr(
# 1869 "ml/parser.mly"
                                                ( Invariant )
# 10610 "ml/parser.ml"
               : 'type_variance))
; (fun __caml_parser_env ->
    Obj.repr(
# 1870 "ml/parser.mly"
                                                ( Covariant )
# 10616 "ml/parser.ml"
               : 'type_variance))
; (fun __caml_parser_env ->
    Obj.repr(
# 1871 "ml/parser.mly"
                                                ( Contravariant )
# 10622 "ml/parser.ml"
               : 'type_variance))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 1874 "ml/parser.mly"
                                                ( mktyp(Ptyp_var _2) )
# 10629 "ml/parser.ml"
               : 'type_variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_parameter) in
    Obj.repr(
# 1877 "ml/parser.mly"
                                                ( [_1] )
# 10636 "ml/parser.ml"
               : 'type_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_parameter_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_parameter) in
    Obj.repr(
# 1878 "ml/parser.mly"
                                                ( _3 :: _1 )
# 10644 "ml/parser.ml"
               : 'type_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_declaration) in
    Obj.repr(
# 1881 "ml/parser.mly"
                                                         ( [_1] )
# 10651 "ml/parser.ml"
               : 'constructor_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bar_constructor_declaration) in
    Obj.repr(
# 1882 "ml/parser.mly"
                                                         ( [_1] )
# 10658 "ml/parser.ml"
               : 'constructor_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constructor_declarations) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bar_constructor_declaration) in
    Obj.repr(
# 1883 "ml/parser.mly"
                                                         ( _2 :: _1 )
# 10666 "ml/parser.ml"
               : 'constructor_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constr_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'generalized_constructor_arguments) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 1887 "ml/parser.mly"
      (
       let args,res = _2 in
       Type.constructor (mkrhs _1 1) ~args ?res ~attrs:_3
         ~loc:(symbol_rloc()) ~info:(symbol_info ())
      )
# 10679 "ml/parser.ml"
               : 'constructor_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'constr_ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'generalized_constructor_arguments) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 1895 "ml/parser.mly"
      (
       let args,res = _3 in
       Type.constructor (mkrhs _2 2) ~args ?res ~attrs:_4
         ~loc:(symbol_rloc()) ~info:(symbol_info ())
      )
# 10692 "ml/parser.ml"
               : 'bar_constructor_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sig_exception_declaration) in
    Obj.repr(
# 1902 "ml/parser.mly"
                                                 ( _1 )
# 10699 "ml/parser.ml"
               : 'str_exception_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'constr_ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'constr_longident) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'attributes) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1905 "ml/parser.mly"
      ( let (ext,attrs) = _2 in
        Te.rebind (mkrhs _3 3) (mkrhs _5 5) ~attrs:(attrs @ _6 @ _7)
          ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
        , ext )
# 10713 "ml/parser.ml"
               : 'str_exception_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'constr_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'generalized_constructor_arguments) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'attributes) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1913 "ml/parser.mly"
      ( let args, res = _4 in
        let (ext,attrs) = _2 in
          Te.decl (mkrhs _3 3) ~args ?res ~attrs:(attrs @ _5 @ _6)
            ~loc:(symbol_rloc()) ~docs:(symbol_docs ())
        , ext )
# 10728 "ml/parser.ml"
               : 'sig_exception_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constr_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'generalized_constructor_arguments) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 1921 "ml/parser.mly"
      ( let args, res = _2 in
        Te.decl (mkrhs _1 1) ~args ?res ~attrs:_3 ~loc:(symbol_rloc()) )
# 10738 "ml/parser.ml"
               : 'let_exception_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 1925 "ml/parser.mly"
                                  ( (Pcstr_tuple [],None) )
# 10744 "ml/parser.ml"
               : 'generalized_constructor_arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_arguments) in
    Obj.repr(
# 1926 "ml/parser.mly"
                                  ( (_2,None) )
# 10751 "ml/parser.ml"
               : 'generalized_constructor_arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'constructor_arguments) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 1928 "ml/parser.mly"
                                  ( (_2,Some _4) )
# 10759 "ml/parser.ml"
               : 'generalized_constructor_arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 1930 "ml/parser.mly"
                                  ( (Pcstr_tuple [],Some _2) )
# 10766 "ml/parser.ml"
               : 'generalized_constructor_arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_list) in
    Obj.repr(
# 1934 "ml/parser.mly"
                                     ( Pcstr_tuple (List.rev _1) )
# 10773 "ml/parser.ml"
               : 'constructor_arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'label_declarations) in
    Obj.repr(
# 1935 "ml/parser.mly"
                                     ( Pcstr_record _2 )
# 10780 "ml/parser.ml"
               : 'constructor_arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'label_declaration) in
    Obj.repr(
# 1938 "ml/parser.mly"
                                                ( [_1] )
# 10787 "ml/parser.ml"
               : 'label_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'label_declaration_semi) in
    Obj.repr(
# 1939 "ml/parser.mly"
                                                ( [_1] )
# 10794 "ml/parser.ml"
               : 'label_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'label_declaration_semi) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'label_declarations) in
    Obj.repr(
# 1940 "ml/parser.mly"
                                                ( _1 :: _2 )
# 10802 "ml/parser.ml"
               : 'label_declarations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mutable_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'label) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'poly_type_no_attr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 1944 "ml/parser.mly"
      (
       Type.field (mkrhs _2 2) _4 ~mut:_1 ~attrs:_5
         ~loc:(symbol_rloc()) ~info:(symbol_info ())
      )
# 10815 "ml/parser.ml"
               : 'label_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'mutable_flag) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'label) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'poly_type_no_attr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 1951 "ml/parser.mly"
      (
       let info =
         match rhs_info 5 with
         | Some _ as info_before_semi -> info_before_semi
         | None -> symbol_info ()
       in
       Type.field (mkrhs _2 2) _4 ~mut:_1 ~attrs:(_5 @ _7)
         ~loc:(symbol_rloc()) ~info
      )
# 10834 "ml/parser.ml"
               : 'label_declaration_semi))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'nonrec_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'optional_type_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'type_longident) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'private_flag) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'str_extension_constructors) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1967 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        if _3 <> Recursive then not_expecting 3 "nonrec flag";
        Te.mk (mkrhs _5 5) (List.rev _8) ~params:_4 ~priv:_7
          ~attrs:(attrs@_9) ~docs:(symbol_docs ())
        , ext )
# 10851 "ml/parser.ml"
               : 'str_type_extension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'ext_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'nonrec_flag) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'optional_type_parameters) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'type_longident) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'private_flag) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'sig_extension_constructors) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 1976 "ml/parser.mly"
      ( let (ext, attrs) = _2 in
        if _3 <> Recursive then not_expecting 3 "nonrec flag";
        Te.mk (mkrhs _5 5) (List.rev _8) ~params:_4 ~priv:_7
          ~attrs:(attrs @ _9) ~docs:(symbol_docs ())
        , ext )
# 10868 "ml/parser.ml"
               : 'sig_type_extension))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension_constructor_declaration) in
    Obj.repr(
# 1983 "ml/parser.mly"
                                                          ( [_1] )
# 10875 "ml/parser.ml"
               : 'str_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bar_extension_constructor_declaration) in
    Obj.repr(
# 1984 "ml/parser.mly"
                                                          ( [_1] )
# 10882 "ml/parser.ml"
               : 'str_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension_constructor_rebind) in
    Obj.repr(
# 1985 "ml/parser.mly"
                                                          ( [_1] )
# 10889 "ml/parser.ml"
               : 'str_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bar_extension_constructor_rebind) in
    Obj.repr(
# 1986 "ml/parser.mly"
                                                          ( [_1] )
# 10896 "ml/parser.ml"
               : 'str_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'str_extension_constructors) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bar_extension_constructor_declaration) in
    Obj.repr(
# 1988 "ml/parser.mly"
      ( _2 :: _1 )
# 10904 "ml/parser.ml"
               : 'str_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'str_extension_constructors) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bar_extension_constructor_rebind) in
    Obj.repr(
# 1990 "ml/parser.mly"
      ( _2 :: _1 )
# 10912 "ml/parser.ml"
               : 'str_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension_constructor_declaration) in
    Obj.repr(
# 1993 "ml/parser.mly"
                                                          ( [_1] )
# 10919 "ml/parser.ml"
               : 'sig_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bar_extension_constructor_declaration) in
    Obj.repr(
# 1994 "ml/parser.mly"
                                                          ( [_1] )
# 10926 "ml/parser.ml"
               : 'sig_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'sig_extension_constructors) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bar_extension_constructor_declaration) in
    Obj.repr(
# 1996 "ml/parser.mly"
      ( _2 :: _1 )
# 10934 "ml/parser.ml"
               : 'sig_extension_constructors))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constr_ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'generalized_constructor_arguments) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2000 "ml/parser.mly"
      ( let args, res = _2 in
        Te.decl (mkrhs _1 1) ~args ?res ~attrs:_3
          ~loc:(symbol_rloc()) ~info:(symbol_info ()) )
# 10945 "ml/parser.ml"
               : 'extension_constructor_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'constr_ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'generalized_constructor_arguments) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2006 "ml/parser.mly"
      ( let args, res = _3 in
        Te.decl (mkrhs _2 2) ~args ?res ~attrs:_4
           ~loc:(symbol_rloc()) ~info:(symbol_info ()) )
# 10956 "ml/parser.ml"
               : 'bar_extension_constructor_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'constr_ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'constr_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2012 "ml/parser.mly"
      ( Te.rebind (mkrhs _1 1) (mkrhs _3 3) ~attrs:_4
          ~loc:(symbol_rloc()) ~info:(symbol_info ()) )
# 10966 "ml/parser.ml"
               : 'extension_constructor_rebind))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'constr_ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'constr_longident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2017 "ml/parser.mly"
      ( Te.rebind (mkrhs _2 2) (mkrhs _4 4) ~attrs:_5
          ~loc:(symbol_rloc()) ~info:(symbol_info ()) )
# 10976 "ml/parser.ml"
               : 'bar_extension_constructor_rebind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'with_constraint) in
    Obj.repr(
# 2024 "ml/parser.mly"
                                                ( [_1] )
# 10983 "ml/parser.ml"
               : 'with_constraints))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'with_constraints) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'with_constraint) in
    Obj.repr(
# 2025 "ml/parser.mly"
                                                ( _3 :: _1 )
# 10991 "ml/parser.ml"
               : 'with_constraints))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'optional_type_parameters) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'label_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'with_type_binder) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'core_type_no_attr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'constraints) in
    Obj.repr(
# 2030 "ml/parser.mly"
      ( Pwith_type
          (mkrhs _3 3,
           (Type.mk (mkrhs (Longident.last _3) 3)
              ~params:_2
              ~cstrs:(List.rev _6)
              ~manifest:_5
              ~priv:_4
              ~loc:(symbol_rloc()))) )
# 11009 "ml/parser.ml"
               : 'with_constraint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'optional_type_parameters) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'label_longident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_no_attr) in
    Obj.repr(
# 2041 "ml/parser.mly"
      ( Pwith_typesubst
         (mkrhs _3 3,
           (Type.mk (mkrhs (Longident.last _3) 3)
             ~params:_2
             ~manifest:_5
             ~loc:(symbol_rloc()))) )
# 11023 "ml/parser.ml"
               : 'with_constraint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'mod_ext_longident) in
    Obj.repr(
# 2048 "ml/parser.mly"
      ( Pwith_module (mkrhs _2 2, mkrhs _4 4) )
# 11031 "ml/parser.ml"
               : 'with_constraint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'mod_ext_longident) in
    Obj.repr(
# 2050 "ml/parser.mly"
      ( Pwith_modsubst (mkrhs _2 2, mkrhs _4 4) )
# 11039 "ml/parser.ml"
               : 'with_constraint))
; (fun __caml_parser_env ->
    Obj.repr(
# 2053 "ml/parser.mly"
                   ( Public )
# 11045 "ml/parser.ml"
               : 'with_type_binder))
; (fun __caml_parser_env ->
    Obj.repr(
# 2054 "ml/parser.mly"
                   ( Private )
# 11051 "ml/parser.ml"
               : 'with_type_binder))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 2060 "ml/parser.mly"
                                                ( [mkrhs _2 2] )
# 11058 "ml/parser.ml"
               : 'typevar_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typevar_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 2061 "ml/parser.mly"
                                                ( mkrhs _3 3 :: _1 )
# 11066 "ml/parser.ml"
               : 'typevar_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 2065 "ml/parser.mly"
          ( _1 )
# 11073 "ml/parser.ml"
               : 'poly_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typevar_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 2067 "ml/parser.mly"
          ( mktyp(Ptyp_poly(List.rev _1, _3)) )
# 11081 "ml/parser.ml"
               : 'poly_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_no_attr) in
    Obj.repr(
# 2071 "ml/parser.mly"
          ( _1 )
# 11088 "ml/parser.ml"
               : 'poly_type_no_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typevar_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_no_attr) in
    Obj.repr(
# 2073 "ml/parser.mly"
          ( mktyp(Ptyp_poly(List.rev _1, _3)) )
# 11096 "ml/parser.ml"
               : 'poly_type_no_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_no_attr) in
    Obj.repr(
# 2080 "ml/parser.mly"
      ( _1 )
# 11103 "ml/parser.ml"
               : 'core_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'core_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 2082 "ml/parser.mly"
      ( Typ.attr _1 _2 )
# 11111 "ml/parser.ml"
               : 'core_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type2) in
    Obj.repr(
# 2086 "ml/parser.mly"
      ( _1 )
# 11118 "ml/parser.ml"
               : 'core_type_no_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'core_type2) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 2088 "ml/parser.mly"
      ( mktyp(Ptyp_alias(_1, _4)) )
# 11126 "ml/parser.ml"
               : 'core_type_no_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type_or_tuple) in
    Obj.repr(
# 2092 "ml/parser.mly"
      ( _1 )
# 11133 "ml/parser.ml"
               : 'core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'core_type2) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'core_type2) in
    Obj.repr(
# 2094 "ml/parser.mly"
      ( let param = extra_rhs_core_type _4 ~pos:4 in
        mktyp (Ptyp_arrow(Optional _2 , param, _6)) )
# 11143 "ml/parser.ml"
               : 'core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'core_type2) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'core_type2) in
    Obj.repr(
# 2097 "ml/parser.mly"
      ( let param = extra_rhs_core_type _2 ~pos:2 in
        mktyp(Ptyp_arrow(Optional _1 , param, _4))
      )
# 11154 "ml/parser.ml"
               : 'core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'core_type2) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'core_type2) in
    Obj.repr(
# 2101 "ml/parser.mly"
      ( let param = extra_rhs_core_type _3 ~pos:3 in
        mktyp(Ptyp_arrow(Labelled _1, param, _5)) )
# 11164 "ml/parser.ml"
               : 'core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'core_type2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type2) in
    Obj.repr(
# 2104 "ml/parser.mly"
      ( let param = extra_rhs_core_type _1 ~pos:1 in
        mktyp(Ptyp_arrow(Nolabel, param, _3)) )
# 11173 "ml/parser.ml"
               : 'core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type2) in
    Obj.repr(
# 2110 "ml/parser.mly"
      ( _1 )
# 11180 "ml/parser.ml"
               : 'simple_core_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'core_type_comma_list) in
    Obj.repr(
# 2112 "ml/parser.mly"
      ( match _2 with [sty] -> sty | _ -> raise Parse_error )
# 11187 "ml/parser.ml"
               : 'simple_core_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 2117 "ml/parser.mly"
      ( mktyp(Ptyp_var _2) )
# 11194 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    Obj.repr(
# 2119 "ml/parser.mly"
      ( mktyp(Ptyp_any) )
# 11200 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_longident) in
    Obj.repr(
# 2121 "ml/parser.mly"
      ( mktyp(Ptyp_constr(mkrhs _1 1, [])) )
# 11207 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_core_type2) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_longident) in
    Obj.repr(
# 2123 "ml/parser.mly"
      ( mktyp(Ptyp_constr(mkrhs _2 2, [_1])) )
# 11215 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'core_type_comma_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_longident) in
    Obj.repr(
# 2125 "ml/parser.mly"
      ( mktyp(Ptyp_constr(mkrhs _4 4, List.rev _2)) )
# 11223 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'meth_list) in
    Obj.repr(
# 2127 "ml/parser.mly"
      ( let (f, c) = _2 in mktyp(Ptyp_object (f, c)) )
# 11230 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    Obj.repr(
# 2129 "ml/parser.mly"
      ( mktyp(Ptyp_object ([], Closed)) )
# 11236 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_longident) in
    Obj.repr(
# 2131 "ml/parser.mly"
      ( mktyp(Ptyp_class(mkrhs _2 2, [])) )
# 11243 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_core_type2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'class_longident) in
    Obj.repr(
# 2133 "ml/parser.mly"
      ( mktyp(Ptyp_class(mkrhs _3 3, [_1])) )
# 11251 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'core_type_comma_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'class_longident) in
    Obj.repr(
# 2135 "ml/parser.mly"
      ( mktyp(Ptyp_class(mkrhs _5 5, List.rev _2)) )
# 11259 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tag_field) in
    Obj.repr(
# 2137 "ml/parser.mly"
      ( mktyp(Ptyp_variant([_2], Closed, None)) )
# 11266 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'row_field_list) in
    Obj.repr(
# 2143 "ml/parser.mly"
      ( mktyp(Ptyp_variant(List.rev _3, Closed, None)) )
# 11273 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'row_field) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'row_field_list) in
    Obj.repr(
# 2145 "ml/parser.mly"
      ( mktyp(Ptyp_variant(_2 :: List.rev _4, Closed, None)) )
# 11281 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_bar) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'row_field_list) in
    Obj.repr(
# 2147 "ml/parser.mly"
      ( mktyp(Ptyp_variant(List.rev _3, Open, None)) )
# 11289 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    Obj.repr(
# 2149 "ml/parser.mly"
      ( mktyp(Ptyp_variant([], Open, None)) )
# 11295 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'opt_bar) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'row_field_list) in
    Obj.repr(
# 2151 "ml/parser.mly"
      ( mktyp(Ptyp_variant(List.rev _3, Closed, Some [])) )
# 11303 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'opt_bar) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'row_field_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'name_tag_list) in
    Obj.repr(
# 2153 "ml/parser.mly"
      ( mktyp(Ptyp_variant(List.rev _3, Closed, Some (List.rev _5))) )
# 11312 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ext_attributes) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'package_type) in
    Obj.repr(
# 2155 "ml/parser.mly"
      ( mktyp_attrs (Ptyp_package _4) _3 )
# 11320 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'extension) in
    Obj.repr(
# 2157 "ml/parser.mly"
      ( mktyp (Ptyp_extension _1) )
# 11327 "ml/parser.ml"
               : 'simple_core_type2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_type) in
    Obj.repr(
# 2160 "ml/parser.mly"
                ( package_type_of_module_type _1 )
# 11334 "ml/parser.ml"
               : 'package_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'row_field) in
    Obj.repr(
# 2163 "ml/parser.mly"
                                                ( [_1] )
# 11341 "ml/parser.ml"
               : 'row_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'row_field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'row_field) in
    Obj.repr(
# 2164 "ml/parser.mly"
                                                ( _3 :: _1 )
# 11349 "ml/parser.ml"
               : 'row_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tag_field) in
    Obj.repr(
# 2167 "ml/parser.mly"
                                                ( _1 )
# 11356 "ml/parser.ml"
               : 'row_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 2168 "ml/parser.mly"
                                                ( Rinherit _1 )
# 11363 "ml/parser.ml"
               : 'row_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'name_tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'opt_ampersand) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'amper_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2172 "ml/parser.mly"
      ( Rtag (mkrhs _1 1, add_info_attrs (symbol_info ()) _5,
               _3, List.rev _4) )
# 11374 "ml/parser.ml"
               : 'tag_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name_tag) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2175 "ml/parser.mly"
      ( Rtag (mkrhs _1 1, add_info_attrs (symbol_info ()) _2, true, []) )
# 11382 "ml/parser.ml"
               : 'tag_field))
; (fun __caml_parser_env ->
    Obj.repr(
# 2178 "ml/parser.mly"
                                                ( true )
# 11388 "ml/parser.ml"
               : 'opt_ampersand))
; (fun __caml_parser_env ->
    Obj.repr(
# 2179 "ml/parser.mly"
                                                ( false )
# 11394 "ml/parser.ml"
               : 'opt_ampersand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_no_attr) in
    Obj.repr(
# 2182 "ml/parser.mly"
                                                ( [_1] )
# 11401 "ml/parser.ml"
               : 'amper_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'amper_type_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_no_attr) in
    Obj.repr(
# 2183 "ml/parser.mly"
                                                ( _3 :: _1 )
# 11409 "ml/parser.ml"
               : 'amper_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name_tag) in
    Obj.repr(
# 2186 "ml/parser.mly"
                                                ( [_1] )
# 11416 "ml/parser.ml"
               : 'name_tag_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name_tag_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'name_tag) in
    Obj.repr(
# 2187 "ml/parser.mly"
                                                ( _2 :: _1 )
# 11424 "ml/parser.ml"
               : 'name_tag_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 2190 "ml/parser.mly"
                     ( _1 )
# 11431 "ml/parser.ml"
               : 'simple_core_type_or_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_core_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type_list) in
    Obj.repr(
# 2192 "ml/parser.mly"
      ( mktyp(Ptyp_tuple(_1 :: List.rev _3)) )
# 11439 "ml/parser.ml"
               : 'simple_core_type_or_tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 2195 "ml/parser.mly"
                                                ( [_1] )
# 11446 "ml/parser.ml"
               : 'core_type_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'core_type_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 2196 "ml/parser.mly"
                                                ( _3 :: _1 )
# 11454 "ml/parser.ml"
               : 'core_type_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 2199 "ml/parser.mly"
                                                ( [_1] )
# 11461 "ml/parser.ml"
               : 'core_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'core_type_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 2200 "ml/parser.mly"
                                                ( _3 :: _1 )
# 11469 "ml/parser.ml"
               : 'core_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_semi) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'meth_list) in
    Obj.repr(
# 2203 "ml/parser.mly"
                                                ( let (f, c) = _2 in (_1 :: f, c) )
# 11477 "ml/parser.ml"
               : 'meth_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inherit_field_semi) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'meth_list) in
    Obj.repr(
# 2204 "ml/parser.mly"
                                                ( let (f, c) = _2 in (_1 :: f, c) )
# 11485 "ml/parser.ml"
               : 'meth_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field_semi) in
    Obj.repr(
# 2205 "ml/parser.mly"
                                                ( [_1], Closed )
# 11492 "ml/parser.ml"
               : 'meth_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 2206 "ml/parser.mly"
                                                ( [_1], Closed )
# 11499 "ml/parser.ml"
               : 'meth_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inherit_field_semi) in
    Obj.repr(
# 2207 "ml/parser.mly"
                                                ( [_1], Closed )
# 11506 "ml/parser.ml"
               : 'meth_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_core_type) in
    Obj.repr(
# 2208 "ml/parser.mly"
                                                ( [Oinherit _1], Closed )
# 11513 "ml/parser.ml"
               : 'meth_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 2209 "ml/parser.mly"
                                                ( [], Open )
# 11519 "ml/parser.ml"
               : 'meth_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'label) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'poly_type_no_attr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2213 "ml/parser.mly"
    ( Otag (mkrhs _1 1, add_info_attrs (symbol_info ()) _4, _3) )
# 11528 "ml/parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'label) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'poly_type_no_attr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'attributes) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2218 "ml/parser.mly"
    ( let info =
        match rhs_info 4 with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info ()
      in
      ( Otag (mkrhs _1 1, add_info_attrs info (_4 @ _6), _3)) )
# 11543 "ml/parser.ml"
               : 'field_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_core_type) in
    Obj.repr(
# 2227 "ml/parser.mly"
                        ( Oinherit _1 )
# 11550 "ml/parser.ml"
               : 'inherit_field_semi))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2230 "ml/parser.mly"
                                                ( _1 )
# 11557 "ml/parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * char option) in
    Obj.repr(
# 2236 "ml/parser.mly"
                 ( let (n, m) = _1 in Pconst_integer (n, m) )
# 11564 "ml/parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 2237 "ml/parser.mly"
                 ( Pconst_char _1 )
# 11571 "ml/parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string option) in
    Obj.repr(
# 2238 "ml/parser.mly"
                 ( let (s, d) = _1 in Pconst_string (s, d) )
# 11578 "ml/parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * char option) in
    Obj.repr(
# 2239 "ml/parser.mly"
                 ( let (f, m) = _1 in Pconst_float (f, m) )
# 11585 "ml/parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 2242 "ml/parser.mly"
                 ( _1 )
# 11592 "ml/parser.ml"
               : 'signed_constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * char option) in
    Obj.repr(
# 2243 "ml/parser.mly"
                 ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
# 11599 "ml/parser.ml"
               : 'signed_constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * char option) in
    Obj.repr(
# 2244 "ml/parser.mly"
                 ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
# 11606 "ml/parser.ml"
               : 'signed_constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * char option) in
    Obj.repr(
# 2245 "ml/parser.mly"
                 ( let (n, m) = _2 in Pconst_integer (n, m) )
# 11613 "ml/parser.ml"
               : 'signed_constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * char option) in
    Obj.repr(
# 2246 "ml/parser.mly"
                 ( let (f, m) = _2 in Pconst_float(f, m) )
# 11620 "ml/parser.ml"
               : 'signed_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2252 "ml/parser.mly"
                                                ( _1 )
# 11627 "ml/parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2253 "ml/parser.mly"
                                                ( _1 )
# 11634 "ml/parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2256 "ml/parser.mly"
                                                ( _1 )
# 11641 "ml/parser.ml"
               : 'val_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'operator) in
    Obj.repr(
# 2257 "ml/parser.mly"
                                                ( _2 )
# 11648 "ml/parser.ml"
               : 'val_ident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'operator) in
    Obj.repr(
# 2258 "ml/parser.mly"
                                                ( unclosed "(" 1 ")" 3 )
# 11655 "ml/parser.ml"
               : 'val_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2259 "ml/parser.mly"
                                                ( expecting 2 "operator" )
# 11661 "ml/parser.ml"
               : 'val_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2260 "ml/parser.mly"
                                                ( expecting 3 "module-expr" )
# 11667 "ml/parser.ml"
               : 'val_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2263 "ml/parser.mly"
                                                ( _1 )
# 11674 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2264 "ml/parser.mly"
                                                ( _1 )
# 11681 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2265 "ml/parser.mly"
                                                ( _1 )
# 11688 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2266 "ml/parser.mly"
                                                ( _1 )
# 11695 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2267 "ml/parser.mly"
                                                ( _1 )
# 11702 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2268 "ml/parser.mly"
                                                ( _1 )
# 11709 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 2269 "ml/parser.mly"
                                                ( "."^ _1 ^"()" )
# 11716 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 2270 "ml/parser.mly"
                                                ( "."^ _1 ^ "()<-" )
# 11723 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 2271 "ml/parser.mly"
                                                ( "."^ _1 ^"[]" )
# 11730 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 2272 "ml/parser.mly"
                                                ( "."^ _1 ^ "[]<-" )
# 11737 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 2273 "ml/parser.mly"
                                                ( "."^ _1 ^"{}" )
# 11744 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 2274 "ml/parser.mly"
                                                ( "."^ _1 ^ "{}<-" )
# 11751 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2275 "ml/parser.mly"
                                                ( _1 )
# 11758 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2276 "ml/parser.mly"
                                                ( "!" )
# 11764 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2277 "ml/parser.mly"
                                                ( "+" )
# 11770 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2278 "ml/parser.mly"
                                                ( "+." )
# 11776 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2279 "ml/parser.mly"
                                                ( "-" )
# 11782 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2280 "ml/parser.mly"
                                                ( "-." )
# 11788 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2281 "ml/parser.mly"
                                                ( "*" )
# 11794 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2282 "ml/parser.mly"
                                                ( "=" )
# 11800 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2283 "ml/parser.mly"
                                                ( "<" )
# 11806 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2284 "ml/parser.mly"
                                                ( ">" )
# 11812 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2285 "ml/parser.mly"
                                                ( "or" )
# 11818 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2286 "ml/parser.mly"
                                                ( "||" )
# 11824 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2287 "ml/parser.mly"
                                                ( "&" )
# 11830 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2288 "ml/parser.mly"
                                                ( "&&" )
# 11836 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2289 "ml/parser.mly"
                                                ( ":=" )
# 11842 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2290 "ml/parser.mly"
                                                ( "+=" )
# 11848 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 2291 "ml/parser.mly"
                                                ( "%" )
# 11854 "ml/parser.ml"
               : 'operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2294 "ml/parser.mly"
                                                ( _1 )
# 11861 "ml/parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2295 "ml/parser.mly"
                                                ( "[]" )
# 11867 "ml/parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2296 "ml/parser.mly"
                                                ( "()" )
# 11873 "ml/parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2297 "ml/parser.mly"
                                                ( "::" )
# 11879 "ml/parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2298 "ml/parser.mly"
                                                ( "false" )
# 11885 "ml/parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2299 "ml/parser.mly"
                                                ( "true" )
# 11891 "ml/parser.ml"
               : 'constr_ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 2303 "ml/parser.mly"
                                                ( Lident _1 )
# 11898 "ml/parser.ml"
               : 'val_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val_ident) in
    Obj.repr(
# 2304 "ml/parser.mly"
                                                ( Ldot(_1, _3) )
# 11906 "ml/parser.ml"
               : 'val_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mod_longident) in
    Obj.repr(
# 2307 "ml/parser.mly"
                                                ( _1 )
# 11913 "ml/parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'mod_longident) in
    Obj.repr(
# 2308 "ml/parser.mly"
                                                ( Ldot(_1,"::") )
# 11920 "ml/parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2309 "ml/parser.mly"
                                                ( Lident "[]" )
# 11926 "ml/parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2310 "ml/parser.mly"
                                                ( Lident "()" )
# 11932 "ml/parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2311 "ml/parser.mly"
                                                ( Lident "::" )
# 11938 "ml/parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2312 "ml/parser.mly"
                                                ( Lident "false" )
# 11944 "ml/parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    Obj.repr(
# 2313 "ml/parser.mly"
                                                ( Lident "true" )
# 11950 "ml/parser.ml"
               : 'constr_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2316 "ml/parser.mly"
                                                ( Lident _1 )
# 11957 "ml/parser.ml"
               : 'label_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2317 "ml/parser.mly"
                                                ( Ldot(_1, _3) )
# 11965 "ml/parser.ml"
               : 'label_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2320 "ml/parser.mly"
                                                ( Lident _1 )
# 11972 "ml/parser.ml"
               : 'type_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_ext_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2321 "ml/parser.mly"
                                                ( Ldot(_1, _3) )
# 11980 "ml/parser.ml"
               : 'type_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2324 "ml/parser.mly"
                                                ( Lident _1 )
# 11987 "ml/parser.ml"
               : 'mod_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2325 "ml/parser.mly"
                                                ( Ldot(_1, _3) )
# 11995 "ml/parser.ml"
               : 'mod_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2328 "ml/parser.mly"
                                                ( Lident _1 )
# 12002 "ml/parser.ml"
               : 'mod_ext_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_ext_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2329 "ml/parser.mly"
                                                ( Ldot(_1, _3) )
# 12010 "ml/parser.ml"
               : 'mod_ext_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'mod_ext_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mod_ext_longident) in
    Obj.repr(
# 2330 "ml/parser.mly"
                                                      ( lapply _1 _3 )
# 12018 "ml/parser.ml"
               : 'mod_ext_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 2333 "ml/parser.mly"
                                                ( Lident _1 )
# 12025 "ml/parser.ml"
               : 'mty_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_ext_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 2334 "ml/parser.mly"
                                                ( Ldot(_1, _3) )
# 12033 "ml/parser.ml"
               : 'mty_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2337 "ml/parser.mly"
                                                ( Lident _1 )
# 12040 "ml/parser.ml"
               : 'clty_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_ext_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2338 "ml/parser.mly"
                                                ( Ldot(_1, _3) )
# 12048 "ml/parser.ml"
               : 'clty_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2341 "ml/parser.mly"
                                                ( Lident _1 )
# 12055 "ml/parser.ml"
               : 'class_longident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mod_longident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2342 "ml/parser.mly"
                                                ( Ldot(_1, _3) )
# 12063 "ml/parser.ml"
               : 'class_longident))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 2348 "ml/parser.mly"
                               ( Ptop_dir(_2, Pdir_none) )
# 12070 "ml/parser.ml"
               : 'toplevel_directive))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * string option) in
    Obj.repr(
# 2349 "ml/parser.mly"
                               ( Ptop_dir(_2, Pdir_string (fst _3)) )
# 12078 "ml/parser.ml"
               : 'toplevel_directive))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * char option) in
    Obj.repr(
# 2350 "ml/parser.mly"
                               ( let (n, m) = _3 in
                                  Ptop_dir(_2, Pdir_int (n ,m)) )
# 12087 "ml/parser.ml"
               : 'toplevel_directive))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'val_longident) in
    Obj.repr(
# 2352 "ml/parser.mly"
                               ( Ptop_dir(_2, Pdir_ident _3) )
# 12095 "ml/parser.ml"
               : 'toplevel_directive))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mod_longident) in
    Obj.repr(
# 2353 "ml/parser.mly"
                               ( Ptop_dir(_2, Pdir_ident _3) )
# 12103 "ml/parser.ml"
               : 'toplevel_directive))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    Obj.repr(
# 2354 "ml/parser.mly"
                               ( Ptop_dir(_2, Pdir_bool false) )
# 12110 "ml/parser.ml"
               : 'toplevel_directive))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    Obj.repr(
# 2355 "ml/parser.mly"
                               ( Ptop_dir(_2, Pdir_bool true) )
# 12117 "ml/parser.ml"
               : 'toplevel_directive))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 2361 "ml/parser.mly"
                                                ( _2 )
# 12124 "ml/parser.ml"
               : 'name_tag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2364 "ml/parser.mly"
                                                ( Nonrecursive )
# 12130 "ml/parser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2365 "ml/parser.mly"
                                                ( Recursive )
# 12136 "ml/parser.ml"
               : 'rec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2368 "ml/parser.mly"
                                                ( Recursive )
# 12142 "ml/parser.ml"
               : 'nonrec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2369 "ml/parser.mly"
                                                ( Nonrecursive )
# 12148 "ml/parser.ml"
               : 'nonrec_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2372 "ml/parser.mly"
                                                ( Upto )
# 12154 "ml/parser.ml"
               : 'direction_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2373 "ml/parser.mly"
                                                ( Downto )
# 12160 "ml/parser.ml"
               : 'direction_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2376 "ml/parser.mly"
                                                ( Public )
# 12166 "ml/parser.ml"
               : 'private_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2377 "ml/parser.mly"
                                                ( Private )
# 12172 "ml/parser.ml"
               : 'private_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2380 "ml/parser.mly"
                                                ( Immutable )
# 12178 "ml/parser.ml"
               : 'mutable_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2381 "ml/parser.mly"
                                                ( Mutable )
# 12184 "ml/parser.ml"
               : 'mutable_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2384 "ml/parser.mly"
                                                ( Concrete )
# 12190 "ml/parser.ml"
               : 'virtual_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2385 "ml/parser.mly"
                                                ( Virtual )
# 12196 "ml/parser.ml"
               : 'virtual_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2388 "ml/parser.mly"
                 ( Public, Concrete )
# 12202 "ml/parser.ml"
               : 'private_virtual_flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 2389 "ml/parser.mly"
            ( Private, Concrete )
# 12208 "ml/parser.ml"
               : 'private_virtual_flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 2390 "ml/parser.mly"
            ( Public, Virtual )
# 12214 "ml/parser.ml"
               : 'private_virtual_flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 2391 "ml/parser.mly"
                    ( Private, Virtual )
# 12220 "ml/parser.ml"
               : 'private_virtual_flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 2392 "ml/parser.mly"
                    ( Private, Virtual )
# 12226 "ml/parser.ml"
               : 'private_virtual_flags))
; (fun __caml_parser_env ->
    Obj.repr(
# 2395 "ml/parser.mly"
                                                ( Fresh )
# 12232 "ml/parser.ml"
               : 'override_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2396 "ml/parser.mly"
                                                ( Override )
# 12238 "ml/parser.ml"
               : 'override_flag))
; (fun __caml_parser_env ->
    Obj.repr(
# 2399 "ml/parser.mly"
                                                ( () )
# 12244 "ml/parser.ml"
               : 'opt_bar))
; (fun __caml_parser_env ->
    Obj.repr(
# 2400 "ml/parser.mly"
                                                ( () )
# 12250 "ml/parser.ml"
               : 'opt_bar))
; (fun __caml_parser_env ->
    Obj.repr(
# 2403 "ml/parser.mly"
                                                ( () )
# 12256 "ml/parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 2404 "ml/parser.mly"
                                                ( () )
# 12262 "ml/parser.ml"
               : 'opt_semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 2407 "ml/parser.mly"
                                                ( "-" )
# 12268 "ml/parser.ml"
               : 'subtractive))
; (fun __caml_parser_env ->
    Obj.repr(
# 2408 "ml/parser.mly"
                                                ( "-." )
# 12274 "ml/parser.ml"
               : 'subtractive))
; (fun __caml_parser_env ->
    Obj.repr(
# 2411 "ml/parser.mly"
                                                ( "+" )
# 12280 "ml/parser.ml"
               : 'additive))
; (fun __caml_parser_env ->
    Obj.repr(
# 2412 "ml/parser.mly"
                                                ( "+." )
# 12286 "ml/parser.ml"
               : 'additive))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2418 "ml/parser.mly"
           ( _1 )
# 12293 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 2419 "ml/parser.mly"
           ( _1 )
# 12300 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2420 "ml/parser.mly"
        ( "and" )
# 12306 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2421 "ml/parser.mly"
       ( "as" )
# 12312 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2422 "ml/parser.mly"
           ( "assert" )
# 12318 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2423 "ml/parser.mly"
          ( "begin" )
# 12324 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2424 "ml/parser.mly"
          ( "class" )
# 12330 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2425 "ml/parser.mly"
               ( "constraint" )
# 12336 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2426 "ml/parser.mly"
       ( "do" )
# 12342 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2427 "ml/parser.mly"
         ( "done" )
# 12348 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2428 "ml/parser.mly"
           ( "downto" )
# 12354 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2429 "ml/parser.mly"
         ( "else" )
# 12360 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2430 "ml/parser.mly"
        ( "end" )
# 12366 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2431 "ml/parser.mly"
              ( "exception" )
# 12372 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2432 "ml/parser.mly"
             ( "external" )
# 12378 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2433 "ml/parser.mly"
          ( "false" )
# 12384 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2434 "ml/parser.mly"
        ( "for" )
# 12390 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2435 "ml/parser.mly"
        ( "fun" )
# 12396 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2436 "ml/parser.mly"
             ( "function" )
# 12402 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2437 "ml/parser.mly"
            ( "functor" )
# 12408 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2438 "ml/parser.mly"
       ( "if" )
# 12414 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2439 "ml/parser.mly"
       ( "in" )
# 12420 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2440 "ml/parser.mly"
            ( "include" )
# 12426 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2441 "ml/parser.mly"
            ( "inherit" )
# 12432 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2442 "ml/parser.mly"
                ( "initializer" )
# 12438 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2443 "ml/parser.mly"
         ( "lazy" )
# 12444 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2444 "ml/parser.mly"
        ( "let" )
# 12450 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2445 "ml/parser.mly"
          ( "match" )
# 12456 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2446 "ml/parser.mly"
           ( "method" )
# 12462 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2447 "ml/parser.mly"
           ( "module" )
# 12468 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2448 "ml/parser.mly"
            ( "mutable" )
# 12474 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2449 "ml/parser.mly"
        ( "new" )
# 12480 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2450 "ml/parser.mly"
           ( "nonrec" )
# 12486 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2451 "ml/parser.mly"
           ( "object" )
# 12492 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2452 "ml/parser.mly"
       ( "of" )
# 12498 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2453 "ml/parser.mly"
         ( "open" )
# 12504 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2454 "ml/parser.mly"
       ( "or" )
# 12510 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2455 "ml/parser.mly"
            ( "private" )
# 12516 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2456 "ml/parser.mly"
        ( "rec" )
# 12522 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2457 "ml/parser.mly"
        ( "sig" )
# 12528 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2458 "ml/parser.mly"
           ( "struct" )
# 12534 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2459 "ml/parser.mly"
         ( "then" )
# 12540 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2460 "ml/parser.mly"
       ( "to" )
# 12546 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2461 "ml/parser.mly"
         ( "true" )
# 12552 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2462 "ml/parser.mly"
        ( "try" )
# 12558 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2463 "ml/parser.mly"
         ( "type" )
# 12564 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2464 "ml/parser.mly"
        ( "val" )
# 12570 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2465 "ml/parser.mly"
            ( "virtual" )
# 12576 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2466 "ml/parser.mly"
         ( "when" )
# 12582 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2467 "ml/parser.mly"
          ( "while" )
# 12588 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 2468 "ml/parser.mly"
         ( "with" )
# 12594 "ml/parser.ml"
               : 'single_attr_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'single_attr_id) in
    Obj.repr(
# 2473 "ml/parser.mly"
                   ( mkloc _1 (symbol_rloc()) )
# 12601 "ml/parser.ml"
               : 'attr_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'single_attr_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_id) in
    Obj.repr(
# 2474 "ml/parser.mly"
                               ( mkloc (_1 ^ "." ^ _3.txt) (symbol_rloc()))
# 12609 "ml/parser.ml"
               : 'attr_id))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'payload) in
    Obj.repr(
# 2477 "ml/parser.mly"
                                      ( (_2, _3) )
# 12617 "ml/parser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'payload) in
    Obj.repr(
# 2480 "ml/parser.mly"
                                        ( (_2, _3) )
# 12625 "ml/parser.ml"
               : 'post_item_attribute))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'payload) in
    Obj.repr(
# 2483 "ml/parser.mly"
                                          ( (_2, _3) )
# 12633 "ml/parser.ml"
               : 'floating_attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 2486 "ml/parser.mly"
                 ( [] )
# 12639 "ml/parser.ml"
               : 'post_item_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'post_item_attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'post_item_attributes) in
    Obj.repr(
# 2487 "ml/parser.mly"
                                             ( _1 :: _2 )
# 12647 "ml/parser.ml"
               : 'post_item_attributes))
; (fun __caml_parser_env ->
    Obj.repr(
# 2490 "ml/parser.mly"
               ( [] )
# 12653 "ml/parser.ml"
               : 'attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2491 "ml/parser.mly"
                         ( _1 :: _2 )
# 12661 "ml/parser.ml"
               : 'attributes))
; (fun __caml_parser_env ->
    Obj.repr(
# 2494 "ml/parser.mly"
                 ( None, [] )
# 12667 "ml/parser.ml"
               : 'ext_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2495 "ml/parser.mly"
                         ( None, _1 :: _2 )
# 12675 "ml/parser.ml"
               : 'ext_attributes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attributes) in
    Obj.repr(
# 2496 "ml/parser.mly"
                               ( Some _2, _3 )
# 12683 "ml/parser.ml"
               : 'ext_attributes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'payload) in
    Obj.repr(
# 2499 "ml/parser.mly"
                                           ( (_2, _3) )
# 12691 "ml/parser.ml"
               : 'extension))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr_id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'payload) in
    Obj.repr(
# 2502 "ml/parser.mly"
                                                  ( (_2, _3) )
# 12699 "ml/parser.ml"
               : 'item_extension))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'structure) in
    Obj.repr(
# 2505 "ml/parser.mly"
              ( PStr _1 )
# 12706 "ml/parser.ml"
               : 'payload))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'signature) in
    Obj.repr(
# 2506 "ml/parser.mly"
                    ( PSig _2 )
# 12713 "ml/parser.ml"
               : 'payload))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'core_type) in
    Obj.repr(
# 2507 "ml/parser.mly"
                    ( PTyp _2 )
# 12720 "ml/parser.ml"
               : 'payload))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 2508 "ml/parser.mly"
                     ( PPat (_2, None) )
# 12727 "ml/parser.ml"
               : 'payload))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 2509 "ml/parser.mly"
                                   ( PPat (_2, Some _4) )
# 12735 "ml/parser.ml"
               : 'payload))
(* Entry implementation *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry interface *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry toplevel_phrase *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry use_file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parse_core_type *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parse_expression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parse_pattern *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let implementation (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Parsetree.structure)
let interface (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Parsetree.signature)
let toplevel_phrase (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Parsetree.toplevel_phrase)
let use_file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Parsetree.toplevel_phrase list)
let parse_core_type (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Parsetree.core_type)
let parse_expression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 6 lexfun lexbuf : Parsetree.expression)
let parse_pattern (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 7 lexfun lexbuf : Parsetree.pattern)
;;

end
module Lexer : sig 
#1 "lexer.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* The lexical analyzer *)

val init : unit -> unit
val token: Lexing.lexbuf -> Parser.token
val skip_hash_bang: Lexing.lexbuf -> unit

type directive_type 

type error =
  | Illegal_character of char
  | Illegal_escape of string
  | Unterminated_comment of Location.t
  | Unterminated_string
  | Unterminated_string_in_comment of Location.t * Location.t
  | Keyword_as_label of string
  | Invalid_literal of string
  | Invalid_directive of string * string option
  | Unterminated_paren_in_conditional
  | Unterminated_if
  | Unterminated_else 
  | Unexpected_token_in_conditional 
  | Expect_hash_then_in_conditional
  | Illegal_semver of string
  | Unexpected_directive
  | Conditional_expr_expected_type of directive_type * directive_type                           
;;

exception Error of error * Location.t



val in_comment : unit -> bool;;
val in_string : unit -> bool;;


val print_warnings : bool ref
val handle_docstrings: bool ref
val comments : unit -> (string * Location.t) list
val token_with_comments : Lexing.lexbuf -> Parser.token

(*
  [set_preprocessor init preprocessor] registers [init] as the function
to call to initialize the preprocessor when the lexer is initialized,
and [preprocessor] a function that is called when a new token is needed
by the parser, as [preprocessor lexer lexbuf] where [lexer] is the
lexing function.

When a preprocessor is configured by calling [set_preprocessor], the lexer
changes its behavior to accept backslash-newline as a token-separating blank.
*)

val set_preprocessor :
  (unit -> unit) ->
  ((Lexing.lexbuf -> Parser.token) -> Lexing.lexbuf -> Parser.token) ->
  unit

(** semantic version predicate *)
val semver : Location.t ->   string -> string -> bool

val filter_directive_from_lexbuf : Lexing.lexbuf -> (int * int) list

val replace_directive_int : string -> int -> unit
val replace_directive_string : string -> string -> unit
val replace_directive_bool : string -> bool -> unit 
val remove_directive_built_in_value : string -> unit

(** @return false means failed to define *)
val define_key_value : string -> string -> bool
val list_variables : Format.formatter -> unit

end = struct
#1 "lexer.ml"
# 18 "ml/lexer.mll"
 
open Lexing
open Misc
open Parser

type directive_value =
  | Dir_bool of bool 
  | Dir_float of float
  | Dir_int of int
  | Dir_string of string
  | Dir_null 

type directive_type = 
  | Dir_type_bool 
  | Dir_type_float 
  | Dir_type_int 
  | Dir_type_string 
  | Dir_type_null 

let type_of_directive x =
  match x with 
  | Dir_bool _ -> Dir_type_bool
  | Dir_float _ -> Dir_type_float
  | Dir_int _ -> Dir_type_int
  | Dir_string _ -> Dir_type_string
  | Dir_null -> Dir_type_null

let string_of_type_directive x = 
  match x with 
  | Dir_type_bool  -> "bool"
  | Dir_type_float  -> "float"
  | Dir_type_int  -> "int"
  | Dir_type_string  -> "string"
  | Dir_type_null -> "null"

type error =
  | Illegal_character of char
  | Illegal_escape of string
  | Unterminated_comment of Location.t
  | Unterminated_string
  | Unterminated_string_in_comment of Location.t * Location.t
  | Keyword_as_label of string
  | Invalid_literal of string
  | Invalid_directive of string * string option
  | Unterminated_paren_in_conditional
  | Unterminated_if
  | Unterminated_else 
  | Unexpected_token_in_conditional 
  | Expect_hash_then_in_conditional
  | Illegal_semver of string
  | Unexpected_directive 
  | Conditional_expr_expected_type of directive_type * directive_type
                           
;;

exception Error of error * Location.t;;

let assert_same_type  lexbuf x y = 
  let lhs = type_of_directive x in let rhs =  type_of_directive y  in
  if lhs <> rhs then 
    raise (Error(Conditional_expr_expected_type(lhs,rhs), Location.curr lexbuf))
  else y

let directive_built_in_values  =
  Hashtbl.create 51


let replace_directive_built_in_value k v = 
  Hashtbl.replace directive_built_in_values k v 

let remove_directive_built_in_value k  = 
  Hashtbl.replace directive_built_in_values k Dir_null

let replace_directive_int k v = 
  Hashtbl.replace directive_built_in_values k (Dir_int v)

let replace_directive_bool k v = 
  Hashtbl.replace directive_built_in_values k (Dir_bool v)

let replace_directive_string k v = 
  Hashtbl.replace directive_built_in_values k (Dir_string v)

let () =
  (* Note we use {!Config} instead of {!Sys} becasue 
     we want to overwrite in some cases with the 
     same stdlib
  *)
  let version = 
    Config.version (* so that it can be overridden*)
  in
  replace_directive_built_in_value "OCAML_VERSION" 
    (Dir_string version);
  replace_directive_built_in_value "OS_TYPE" 
    (Dir_string Sys.os_type);
  replace_directive_built_in_value "BIG_ENDIAN" 
    (Dir_bool Sys.big_endian)

let find_directive_built_in_value k =
  Hashtbl.find directive_built_in_values k 

let iter_directive_built_in_value f = Hashtbl.iter f directive_built_in_values

(*
   {[
     # semver 0 "12";;
     - : int * int * int * string = (12, 0, 0, "");;
     # semver 0 "12.3";;
     - : int * int * int * string = (12, 3, 0, "");;
       semver 0 "12.3.10";;
     - : int * int * int * string = (12, 3, 10, "");;
     # semver 0 "12.3.10+x";;
     - : int * int * int * string = (12, 3, 10, "+x")
   ]}
*)    
let zero = Char.code '0' 
let dot = Char.code '.'
let semantic_version_parse str start  last_index = 
  let rec aux start  acc last_index =
    if start <= last_index then
      let c = Char.code (String.unsafe_get str start) in
      if c = dot then (acc, start + 1) (* consume [4.] instead of [4]*)
      else 
        let v =  c - zero in
        if v >=0 && v <= 9  then
          aux (start + 1) (acc * 10 + v) last_index
        else (acc , start)
    else (acc, start)
  in
  let major, major_end =  aux start 0 last_index  in
  let minor, minor_end = aux major_end 0 last_index in
  let patch, patch_end = aux minor_end 0 last_index in 
  let additional = String.sub str patch_end (last_index - patch_end  +1) in
  (major, minor, patch), additional

(** 
   {[
     semver Location.none "1.2.3" "~1.3.0" = false;;
     semver Location.none "1.2.3" "^1.3.0" = true ;;
     semver Location.none "1.2.3" ">1.3.0" = false ;;
     semver Location.none "1.2.3" ">=1.3.0" = false ;;
     semver Location.none "1.2.3" "<1.3.0" = true ;;
     semver Location.none "1.2.3" "<=1.3.0" = true ;;
   ]}
*)
let semver loc lhs str =
  let last_index = String.length str - 1 in 
  if last_index < 0 then raise (Error(Illegal_semver str, loc))
  else 
    let pred, ((major, minor, _patch) as version, _) = 
      let v = String.unsafe_get str 0 in 
      match v with
      | '>' -> 
          if last_index = 0 then raise (Error(Illegal_semver str, loc)) else 
          if String.unsafe_get str 1 = '=' then 
            `Ge, semantic_version_parse str 2 last_index
          else `Gt, semantic_version_parse str 1 last_index
      | '<' 
        ->
          if last_index = 0 then raise (Error(Illegal_semver str, loc)) else 
          if String.unsafe_get str 1 = '=' then 
            `Le, semantic_version_parse str 2 last_index
          else `Lt, semantic_version_parse str 1 last_index
      | '^' 
        -> `Compatible, semantic_version_parse str 1 last_index
      | '~' ->  `Approximate, semantic_version_parse str 1 last_index
      | _ -> `Exact, semantic_version_parse str 0 last_index 
    in 
    let ((l_major, l_minor, _l_patch) as lversion,_) =
      semantic_version_parse lhs 0 (String.length lhs - 1) in 
    match pred with 
    | `Ge -> lversion >= version 
    | `Gt -> lversion > version 
    | `Le -> lversion <= version
    | `Lt -> lversion < version 
    | `Approximate -> major = l_major && minor = l_minor 
    |  `Compatible -> major = l_major
    | `Exact -> lversion = version 


let pp_directive_value fmt (x : directive_value) =
  match x with
  | Dir_bool b -> Format.pp_print_bool fmt b
  | Dir_int b -> Format.pp_print_int fmt b
  | Dir_float b -> Format.pp_print_float fmt b
  | Dir_string s  -> Format.fprintf fmt "%S" s
  | Dir_null -> Format.pp_print_string fmt "null"    

let list_variables fmt = 
  iter_directive_built_in_value 
    (fun s  dir_value ->
       Format.fprintf
         fmt "@[%s@ %a@]@."
         s pp_directive_value dir_value
    )

let defined str =
  begin match  find_directive_built_in_value str with 
  |  Dir_null -> false 
  | _ ->  true
  | exception _ -> 
      try ignore @@ Sys.getenv str; true with _ ->  false 
  end

let query _loc str =
  begin match find_directive_built_in_value str with
  | Dir_null -> Dir_bool false
  | v -> v
  | exception Not_found ->
      begin match Sys.getenv str with 
      | v -> 
          begin 
            try Dir_bool (bool_of_string v) with 
              _ -> 
                begin 
                  try Dir_int (int_of_string v )
                  with 
                    _ -> 
                      begin try (Dir_float (float_of_string v)) 
                      with _ -> Dir_string v
                      end
                end
          end
      | exception Not_found -> 
          Dir_bool false
      end
  end


let define_key_value key v  =
  if String.length key > 0
      && Char.uppercase_ascii (key.[0]) = key.[0] then 
    begin 
      replace_directive_built_in_value key
      begin
        (* NEED Sync up across {!lexer.mll} {!bspp.ml} and here,
           TODO: put it in {!lexer.mll}
        *)
        try Dir_bool (bool_of_string v) with 
          _ -> 
          begin 
            try Dir_int (int_of_string v )
            with 
              _ -> 
              begin try (Dir_float (float_of_string v)) 
                with _ -> Dir_string v
              end
          end
      end;
    true
    end
  else false 

let cvt_int_literal s =
  - int_of_string ("-" ^ s)
  
let value_of_token loc (t : Parser.token)  = 
  match t with 
  | INT (i,None) -> Dir_int (cvt_int_literal i) 
  | STRING (s,_) -> Dir_string s 
  | FLOAT (s,None)  -> Dir_float (float_of_string s)
  | TRUE -> Dir_bool true
  | FALSE -> Dir_bool false
  | UIDENT s -> query loc s 
  | _ -> raise (Error (Unexpected_token_in_conditional, loc))


let directive_parse token_with_comments lexbuf =
  let look_ahead = ref None in
  let token () : Parser.token =
    let v = !look_ahead in
    match v with 
    | Some v -> 
        look_ahead := None ;
        v
    | None ->
       let rec skip () = 
        match token_with_comments lexbuf  with
        | COMMENT _ 
        | DOCSTRING _ -> skip ()
        | EOF -> raise (Error (Unterminated_if, Location.curr lexbuf)) 
        | t -> t 
        in  skip ()
  in
  let push e =
    (* INVARIANT: only look at most one token *)
    assert (!look_ahead = None);
    look_ahead := Some e 
  in
  let rec
    token_op calc   ~no  lhs   =
    match token () with 
    | (LESS 
    | GREATER 
    | INFIXOP0 "<=" 
    | INFIXOP0 ">=" 
    | EQUAL
    | INFIXOP0 "<>" as op) ->
        let f =  
          match op with 
          | LESS -> (<) 
          | GREATER -> (>)
          | INFIXOP0 "<=" -> (<=)
          | EQUAL -> (=)
          | INFIXOP0 "<>" -> (<>) 
          | _ -> assert false
        in 
        let curr_loc = Location.curr lexbuf in 
        let rhs = value_of_token curr_loc (token ()) in 
        not calc ||
        f lhs (assert_same_type lexbuf lhs rhs)
    | INFIXOP0 "=~" -> 
        not calc ||
        begin match lhs with 
        | Dir_string s ->
            let curr_loc = Location.curr lexbuf in 
            let rhs = value_of_token curr_loc (token ()) in 
            begin match rhs with 
            | Dir_string rhs -> 
                semver curr_loc s rhs
            | _ -> 
                raise
                  (Error
                     ( Conditional_expr_expected_type
                         (Dir_type_string, type_of_directive lhs), Location.curr lexbuf))
            end
        | _ -> raise
                 (Error
                    ( Conditional_expr_expected_type
                        (Dir_type_string, type_of_directive lhs), Location.curr lexbuf))
        end
    | e -> no e 
  and
    parse_or calc : bool =
    parse_or_aux calc (parse_and calc)
  and  (* a || (b || (c || d))*)
    parse_or_aux calc v : bool =
    (* let l = v  in *)
    match token () with
    | BARBAR ->
        let b =   parse_or (calc && not v)  in
        v || b 
    | e -> push e ; v
  and parse_and calc = 
    parse_and_aux calc (parse_relation calc)
  and parse_and_aux calc v = (* a && (b && (c && d)) *)
    (* let l = v  in *)
    match token () with
    | AMPERAMPER ->
        let b =  parse_and (calc && v) in
        v && b
    | e -> push e ; v
  and parse_relation (calc : bool) : bool  =
    let curr_token = token () in
    let curr_loc = Location.curr lexbuf in
    match curr_token with
    | TRUE -> true 
    | FALSE -> false
    | UIDENT v ->
        let value_v = query curr_loc v in
        token_op calc 
          ~no:(fun e -> push e ;
                match value_v with 
                | Dir_bool b -> b 
                | _ -> 
                    let ty = type_of_directive value_v in
                    raise
                      (Error(Conditional_expr_expected_type (Dir_type_bool, ty),
                             curr_loc)))
          value_v
    | INT (v,None) -> 
      let num_v = cvt_int_literal v in 
      token_op calc
          ~no:(fun e -> 
                push e; 
                num_v <> 0
              )
          (Dir_int num_v)
    | FLOAT (v,None) -> 
        token_op calc
          ~no:(fun _e -> 
              raise (Error(Conditional_expr_expected_type(Dir_type_bool, Dir_type_float),
                           curr_loc)))
          (Dir_float (float_of_string v))
    | STRING (v,_) -> 
        token_op calc
          ~no:(fun _e ->
              raise (Error
                       (Conditional_expr_expected_type(Dir_type_bool, Dir_type_string),
                        curr_loc)))
          (Dir_string v)
    | LIDENT ("defined" | "undefined" as r) ->
        let t = token () in 
        let loc = Location.curr lexbuf in
        begin match t with
        | UIDENT s -> 
            not calc || 
            if r.[0] = 'u' then 
              not @@ defined s
            else defined s 
        | _ -> raise (Error (Unexpected_token_in_conditional, loc))
        end
    | LPAREN ->
        let v = parse_or calc in
        begin match token () with
        | RPAREN ->  v
        | _ -> raise (Error(Unterminated_paren_in_conditional, Location.curr lexbuf))
        end 

    | _ -> raise (Error (Unexpected_token_in_conditional, curr_loc))
  in
  let v = parse_or true in
  begin match token () with
  | THEN | EOL ->  v 
  | _ -> raise (Error (Expect_hash_then_in_conditional, Location.curr lexbuf))
  end


type dir_conditional =
  | Dir_if_true
  | Dir_if_false
  | Dir_out 

(* let string_of_dir_conditional (x : dir_conditional) = *)
(*   match x with  *)
(*   | Dir_if_true -> "Dir_if_true" *)
(*   | Dir_if_false -> "Dir_if_false" *)
(*   | Dir_out -> "Dir_out" *)

let is_elif (i : Parser.token ) =
  match i with
  | LIDENT "elif" -> true
  | _ -> false (* avoid polymorphic equal *)


(* The table of keywords *)

let keyword_table =
  create_hashtable 149 [
    "and", AND;
    "as", AS;
    "assert", ASSERT;
    "begin", BEGIN;
    "class", CLASS;
    "constraint", CONSTRAINT;
    "do", DO;
    "done", DONE;
    "downto", DOWNTO;
    "else", ELSE;
    "end", END;
    "exception", EXCEPTION;
    "external", EXTERNAL;
    "false", FALSE;
    "for", FOR;
    "fun", FUN;
    "function", FUNCTION;
    "functor", FUNCTOR;
    "if", IF;
    "in", IN;
    "include", INCLUDE;
    "inherit", INHERIT;
    "initializer", INITIALIZER;
    "lazy", LAZY;
    "let", LET;
    "match", MATCH;
    "method", METHOD;
    "module", MODULE;
    "mutable", MUTABLE;
    "new", NEW;
    "nonrec", NONREC;
    "object", OBJECT;
    "of", OF;
    "open", OPEN;
    "or", OR;
(*  "parser", PARSER; *)
    "private", PRIVATE;
    "rec", REC;
    "sig", SIG;
    "struct", STRUCT;
    "then", THEN;
    "to", TO;
    "true", TRUE;
    "try", TRY;
    "type", TYPE;
    "val", VAL;
    "virtual", VIRTUAL;
    "when", WHEN;
    "while", WHILE;
    "with", WITH;

    "lor", INFIXOP3("lor"); (* Should be INFIXOP2 *)
    "lxor", INFIXOP3("lxor"); (* Should be INFIXOP2 *)
    "mod", INFIXOP3("mod");
    "land", INFIXOP3("land");
    "lsl", INFIXOP4("lsl");
    "lsr", INFIXOP4("lsr");
    "asr", INFIXOP4("asr")
]

(* To buffer string literals *)

let string_buffer = Buffer.create 256
let reset_string_buffer () = Buffer.reset string_buffer
let get_stored_string () = Buffer.contents string_buffer

let store_string_char c = Buffer.add_char string_buffer c
let store_string_utf_8_uchar u = Buffer.add_utf_8_uchar string_buffer u
let store_string s = Buffer.add_string string_buffer s
let store_lexeme lexbuf = store_string (Lexing.lexeme lexbuf)

(* To store the position of the beginning of a string and comment *)
let string_start_loc = ref Location.none;;
let comment_start_loc = ref [];;
let in_comment () = !comment_start_loc <> [];;
let is_in_string = ref false
let in_string () = !is_in_string
let print_warnings = ref true
let if_then_else = ref Dir_out
let sharp_look_ahead = ref None
let update_if_then_else v = 
  (* Format.fprintf Format.err_formatter "@[update %s \n@]@." (string_of_dir_conditional v); *)
  if_then_else := v

(* Escaped chars are interpreted in strings unless they are in comments. *)
let store_escaped_char lexbuf c =
  if in_comment () then store_lexeme lexbuf else store_string_char c

let store_escaped_uchar lexbuf u =
  if in_comment () then store_lexeme lexbuf else store_string_utf_8_uchar u

let with_comment_buffer comment lexbuf =
  let start_loc = Location.curr lexbuf  in
  comment_start_loc := [start_loc];
  reset_string_buffer ();
  let end_loc = comment lexbuf in
  let s = get_stored_string () in
  reset_string_buffer ();
  let loc = { start_loc with Location.loc_end = end_loc.Location.loc_end } in
  s, loc

(* To translate escape sequences *)

let hex_digit_value d = (* assert (d in '0'..'9' 'a'..'f' 'A'..'F') *)
  let d = Char.code d in
  if d >= 97 then d - 87 else
  if d >= 65 then d - 55 else
  d - 48

let hex_num_value lexbuf ~first ~last =
  let rec loop acc i = match i > last with
  | true -> acc
  | false ->
      let value = hex_digit_value (Lexing.lexeme_char lexbuf i) in
      loop (16 * acc + value) (i + 1)
  in
  loop 0 first

let char_for_backslash = function
  | 'n' -> '\010'
  | 'r' -> '\013'
  | 'b' -> '\008'
  | 't' -> '\009'
  | c   -> c

let char_for_decimal_code lexbuf i =
  let c = 100 * (Char.code(Lexing.lexeme_char lexbuf i) - 48) +
           10 * (Char.code(Lexing.lexeme_char lexbuf (i+1)) - 48) +
                (Char.code(Lexing.lexeme_char lexbuf (i+2)) - 48) in
  if not (Uchar.is_valid c ) then
    if in_comment ()
    then 'x'
    else raise (Error(Illegal_escape (Lexing.lexeme lexbuf),
                      Location.curr lexbuf))
  else (Obj.magic (c : int) : char)

let char_for_octal_code lexbuf i =
  let c = 64 * (Char.code(Lexing.lexeme_char lexbuf i) - 48) +
           8 * (Char.code(Lexing.lexeme_char lexbuf (i+1)) - 48) +
               (Char.code(Lexing.lexeme_char lexbuf (i+2)) - 48) in
  Char.chr c

let char_for_hexadecimal_code lexbuf i =
  let byte = hex_num_value lexbuf ~first:i ~last:(i+1) in
  Char.chr byte

let uchar_for_uchar_escape lexbuf =
  let err e =
    raise
      (Error (Illegal_escape (Lexing.lexeme lexbuf ^ e), Location.curr lexbuf))
  in
  let len = Lexing.lexeme_end lexbuf - Lexing.lexeme_start lexbuf in
  let first = 3 (* skip opening \u{ *) in
  let last = len - 2 (* skip closing } *) in
  let digit_count = last - first + 1 in
  match digit_count > 6 with
  | true -> err ", too many digits, expected 1 to 6 hexadecimal digits"
  | false ->
      let cp = hex_num_value lexbuf ~first ~last in
      if Uchar.is_valid cp then Uchar.unsafe_of_int cp else
      err (", " ^ Printf.sprintf "%X" cp ^ " is not a Unicode scalar value")

(* recover the name from a LABEL or OPTLABEL token *)

let get_label_name lexbuf =
  let s = Lexing.lexeme lexbuf in
  let name = String.sub s 1 (String.length s - 2) in
  if Hashtbl.mem keyword_table name then
    raise (Error(Keyword_as_label name, Location.curr lexbuf));
  name
;;

(* Update the current location with file name and line number. *)

let update_loc lexbuf file line absolute chars =
  let pos = lexbuf.lex_curr_p in
  let new_file = match file with
                 | None -> pos.pos_fname
                 | Some s -> s
  in
  lexbuf.lex_curr_p <- { pos with
    pos_fname = new_file;
    pos_lnum = if absolute then line else pos.pos_lnum + line;
    pos_bol = pos.pos_cnum - chars;
  }
;;

let preprocessor = ref None

let escaped_newlines = ref false


let handle_docstrings = ref true
let comment_list = ref []

let add_comment com =
  comment_list := com :: !comment_list

let add_docstring_comment ds =
  let com =
    ("*" ^ Docstrings.docstring_body ds, Docstrings.docstring_loc ds)
  in
    add_comment com

let comments () = List.rev !comment_list

(* Error report *)

open Format

let report_error ppf = function
  | Illegal_character c ->
      fprintf ppf "Illegal character (%s)" (Char.escaped c)
  | Illegal_escape s ->
      fprintf ppf "Illegal backslash escape in string or character (%s)" s
  | Unterminated_comment _ ->
      fprintf ppf "Comment not terminated"
  | Unterminated_string ->
      fprintf ppf "String literal not terminated"
  | Unterminated_string_in_comment (_, loc) ->
      fprintf ppf "This comment contains an unterminated string literal@.\
                   %aString literal begins here"
              Location.print_error loc
  | Keyword_as_label kwd ->
      fprintf ppf "`%s' is a keyword, it cannot be used as label name" kwd
  | Invalid_literal s ->
      fprintf ppf "Invalid literal %s" s
  | Invalid_directive (dir, explanation) ->
      fprintf ppf "Invalid lexer directive %S" dir;
      begin match explanation with
        | None -> ()
        | Some expl -> fprintf ppf ": %s" expl
      end
  | Unterminated_if -> 
      fprintf ppf "#if not terminated"
  | Unterminated_else -> 
      fprintf ppf "#else not terminated"
  | Unexpected_directive -> fprintf ppf "Unexpected directive"
  | Unexpected_token_in_conditional -> 
      fprintf ppf "Unexpected token in conditional predicate"
  | Unterminated_paren_in_conditional ->
    fprintf ppf "Unterminated parens in conditional predicate"
  | Expect_hash_then_in_conditional -> 
      fprintf ppf "Expect `then` after conditional predicate"
  | Conditional_expr_expected_type (a,b) -> 
      fprintf ppf "Conditional expression type mismatch (%s,%s)" 
        (string_of_type_directive a )
        (string_of_type_directive b )
  | Illegal_semver s -> 
      fprintf ppf "Illegal semantic version string %s" s

let () =
  Location.register_error_of_exn
    (function
      | Error (err, loc) ->
          Some (Location.error_of_printer loc report_error err)
      | _ ->
          None
    )


# 702 "ml/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\166\255\167\255\094\000\129\000\164\000\199\000\234\000\
    \013\001\190\255\048\001\085\001\198\255\041\001\124\001\159\001\
    \069\000\084\000\193\001\228\001\216\255\218\255\221\255\007\002\
    \102\002\137\002\087\000\125\000\167\002\240\255\251\002\079\003\
    \163\003\247\003\081\004\173\004\001\005\138\000\254\255\001\000\
    \005\000\255\255\006\000\007\000\091\005\121\005\250\255\205\005\
    \248\255\033\006\117\006\201\006\029\007\113\007\197\007\025\008\
    \109\008\193\008\021\009\105\009\129\000\189\009\017\010\101\010\
    \185\010\013\011\024\002\196\255\239\255\135\002\104\011\094\000\
    \095\000\011\000\238\255\237\255\232\255\138\011\164\000\034\002\
    \104\000\236\255\064\002\105\000\235\255\054\002\074\002\109\000\
    \234\255\177\011\110\000\233\255\118\000\228\255\127\000\227\255\
    \153\000\222\011\226\255\001\012\022\012\137\002\225\255\012\000\
    \013\000\241\000\020\001\017\000\225\255\018\000\051\012\086\012\
    \121\012\156\012\191\012\213\255\208\255\209\255\210\255\206\255\
    \226\012\114\000\089\000\199\255\200\255\201\255\097\000\186\255\
    \184\255\193\255\005\013\189\255\191\255\040\013\075\013\110\013\
    \145\013\125\004\243\255\244\255\186\000\245\255\141\001\143\013\
    \253\255\122\000\131\000\255\255\254\255\252\255\175\013\010\014\
    \159\000\164\000\195\000\251\255\250\255\249\255\044\014\154\002\
    \165\000\248\255\164\002\177\000\247\255\083\014\180\000\246\255\
    \220\000\142\001\245\255\246\255\247\255\221\000\154\014\255\255\
    \248\255\098\000\188\014\199\000\098\004\253\255\220\000\230\000\
    \255\000\173\004\252\255\155\003\239\003\251\255\227\014\250\255\
    \250\014\032\015\249\255\018\001\051\001\252\255\061\015\254\255\
    \255\255\034\001\035\001\253\255\090\015\203\000\206\000\012\001\
    \016\001\231\000\025\001\231\000\019\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\086\000\085\000\082\000\081\000\074\000\
    \072\000\255\255\063\000\060\000\255\255\053\000\052\000\050\000\
    \048\000\044\000\041\000\077\000\255\255\255\255\255\255\032\000\
    \031\000\038\000\036\000\035\000\058\000\255\255\010\000\010\000\
    \009\000\008\000\006\000\004\000\003\000\002\000\255\255\089\000\
    \089\000\255\255\255\255\255\255\080\000\255\255\255\255\255\255\
    \255\255\014\000\014\000\012\000\011\000\014\000\011\000\011\000\
    \010\000\012\000\011\000\012\000\255\255\013\000\013\000\010\000\
    \010\000\012\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\023\000\023\000\023\000\
    \023\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\255\255\025\000\255\255\
    \026\000\084\000\255\255\087\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\033\000\083\000\
    \078\000\040\000\043\000\255\255\255\255\255\255\255\255\255\255\
    \051\000\070\000\067\000\255\255\255\255\255\255\068\000\255\255\
    \255\255\255\255\061\000\255\255\255\255\079\000\073\000\076\000\
    \075\000\255\255\255\255\255\255\012\000\255\255\012\000\012\000\
    \255\255\012\000\012\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\010\000\010\000\255\255\
    \255\255\007\000\007\000\007\000\007\000\255\255\001\000\007\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\255\255\
    \255\255\003\000\255\255\255\255\255\255\002\000\255\255\255\255\
    \001\000\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\071\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\076\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\104\000\255\255\000\000\255\255\
    \104\000\105\000\104\000\107\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\138\000\000\000\000\000\255\255\000\000\152\000\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\170\000\000\000\000\000\000\000\255\255\176\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\197\000\000\000\255\255\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\207\000\
    \210\000\255\255\210\000\255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\037\000\038\000\038\000\037\000\039\000\043\000\041\000\
    \041\000\038\000\042\000\042\000\043\000\072\000\102\000\102\000\
    \073\000\103\000\103\000\108\000\108\000\213\000\109\000\109\000\
    \037\000\008\000\029\000\024\000\006\000\004\000\023\000\027\000\
    \026\000\021\000\025\000\007\000\020\000\019\000\018\000\003\000\
    \031\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\017\000\016\000\015\000\014\000\010\000\034\000\
    \005\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\013\000\040\000\012\000\005\000\036\000\
    \022\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\028\000\011\000\009\000\035\000\003\000\
    \119\000\092\000\003\000\003\000\003\000\075\000\074\000\072\000\
    \003\000\003\000\073\000\003\000\003\000\003\000\118\000\081\000\
    \084\000\117\000\116\000\037\000\088\000\091\000\037\000\128\000\
    \003\000\126\000\003\000\003\000\003\000\003\000\003\000\093\000\
    \094\000\127\000\003\000\148\000\255\255\003\000\003\000\003\000\
    \095\000\096\000\037\000\003\000\003\000\147\000\003\000\003\000\
    \003\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\095\000\096\000\139\000\005\000\157\000\168\000\
    \005\000\005\000\005\000\156\000\161\000\153\000\005\000\005\000\
    \154\000\005\000\005\000\005\000\085\000\085\000\085\000\085\000\
    \164\000\070\000\003\000\167\000\003\000\192\000\005\000\003\000\
    \005\000\005\000\005\000\005\000\005\000\182\000\139\000\172\000\
    \006\000\168\000\195\000\006\000\006\000\006\000\206\000\207\000\
    \182\000\006\000\006\000\184\000\006\000\006\000\006\000\187\000\
    \187\000\187\000\187\000\102\000\182\000\003\000\103\000\003\000\
    \002\000\006\000\005\000\006\000\006\000\006\000\006\000\006\000\
    \211\000\182\000\212\000\111\000\184\000\255\255\111\000\111\000\
    \111\000\255\255\000\000\107\000\111\000\111\000\208\000\111\000\
    \136\000\111\000\209\000\000\000\172\000\106\000\102\000\195\000\
    \005\000\103\000\005\000\209\000\111\000\006\000\111\000\135\000\
    \111\000\111\000\111\000\000\000\200\000\200\000\133\000\202\000\
    \202\000\133\000\133\000\133\000\106\000\000\000\105\000\133\000\
    \133\000\000\000\133\000\133\000\133\000\200\000\000\000\000\000\
    \201\000\000\000\000\000\006\000\000\000\006\000\000\000\133\000\
    \111\000\133\000\134\000\133\000\133\000\133\000\121\000\000\000\
    \000\000\006\000\000\000\000\000\006\000\006\000\006\000\000\000\
    \000\000\000\000\006\000\006\000\000\000\006\000\006\000\006\000\
    \000\000\000\000\000\000\000\000\000\000\124\000\111\000\123\000\
    \111\000\122\000\006\000\133\000\006\000\006\000\006\000\006\000\
    \006\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
    \000\000\006\000\006\000\006\000\000\000\255\255\000\000\006\000\
    \006\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \000\000\133\000\000\000\133\000\000\000\132\000\006\000\006\000\
    \000\000\006\000\006\000\006\000\006\000\006\000\000\000\153\000\
    \172\000\000\000\154\000\173\000\000\000\006\000\000\000\000\000\
    \006\000\006\000\006\000\000\000\000\000\125\000\006\000\006\000\
    \000\000\006\000\006\000\006\000\006\000\131\000\006\000\198\000\
    \175\000\000\000\129\000\006\000\155\000\000\000\006\000\000\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \006\000\000\000\000\000\006\000\006\000\006\000\000\000\000\000\
    \000\000\006\000\006\000\000\000\120\000\006\000\006\000\000\000\
    \000\000\130\000\000\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \000\000\000\000\114\000\000\000\000\000\114\000\114\000\114\000\
    \000\000\151\000\174\000\114\000\114\000\000\000\114\000\115\000\
    \114\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \006\000\000\000\006\000\114\000\000\000\006\000\114\000\114\000\
    \114\000\114\000\000\000\000\000\000\000\111\000\000\000\000\000\
    \111\000\111\000\111\000\000\000\255\255\000\000\111\000\111\000\
    \255\255\111\000\112\000\111\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\000\000\006\000\000\000\006\000\111\000\114\000\
    \111\000\111\000\113\000\111\000\111\000\000\000\000\000\000\000\
    \006\000\000\000\000\000\006\000\006\000\110\000\000\000\000\000\
    \000\000\006\000\006\000\199\000\006\000\006\000\006\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\114\000\000\000\114\000\
    \000\000\006\000\111\000\006\000\006\000\006\000\006\000\006\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\000\000\000\000\000\000\000\000\
    \111\000\000\000\111\000\000\000\000\000\006\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\000\000\101\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\000\000\006\000\000\000\006\000\101\000\099\000\
    \000\000\099\000\099\000\099\000\099\000\255\255\171\000\000\000\
    \099\000\099\000\101\000\099\000\099\000\099\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \099\000\000\000\099\000\099\000\099\000\099\000\099\000\000\000\
    \000\000\101\000\003\000\000\000\000\000\003\000\003\000\003\000\
    \000\000\000\000\098\000\097\000\003\000\000\000\003\000\003\000\
    \003\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\003\000\099\000\003\000\003\000\003\000\
    \003\000\003\000\162\000\162\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\163\000\163\000\163\000\163\000\
    \163\000\163\000\163\000\163\000\163\000\163\000\000\000\000\000\
    \000\000\000\000\099\000\067\000\099\000\000\000\069\000\003\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\000\000\068\000\000\000\003\000\069\000\003\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\049\000\068\000\000\000\000\000\000\000\000\000\
    \000\000\051\000\000\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
    \050\000\049\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\000\000\000\000\
    \000\000\000\000\030\000\000\000\049\000\049\000\049\000\049\000\
    \050\000\049\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\049\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\051\000\000\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \049\000\053\000\049\000\049\000\050\000\049\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\054\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\055\000\
    \052\000\052\000\000\000\000\000\000\000\000\000\030\000\000\000\
    \049\000\053\000\049\000\049\000\050\000\049\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\054\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\055\000\
    \052\000\052\000\032\000\188\000\188\000\188\000\188\000\188\000\
    \188\000\188\000\188\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
    \000\000\000\000\032\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\033\000\189\000\
    \189\000\189\000\189\000\189\000\189\000\189\000\189\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\000\000\000\000\000\000\000\000\033\000\000\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\044\000\000\000\000\000\044\000\044\000\044\000\
    \000\000\000\000\000\000\044\000\044\000\000\000\044\000\044\000\
    \044\000\000\000\000\000\000\000\000\000\000\000\000\000\139\000\
    \000\000\000\000\140\000\044\000\000\000\044\000\044\000\044\000\
    \044\000\044\000\185\000\185\000\185\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\000\000\000\000\000\000\144\000\
    \000\000\000\000\000\000\000\000\142\000\146\000\000\000\145\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
    \047\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\000\000\044\000\044\000\044\000\
    \000\000\044\000\044\000\044\000\000\000\000\000\000\000\044\000\
    \044\000\000\000\044\000\044\000\044\000\186\000\186\000\186\000\
    \186\000\186\000\186\000\186\000\186\000\186\000\186\000\044\000\
    \000\000\044\000\044\000\044\000\044\000\044\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\044\000\045\000\000\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \033\000\044\000\000\000\044\000\000\000\000\000\000\000\000\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\000\000\000\000\000\000\000\000\
    \033\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\044\000\141\000\000\000\044\000\
    \044\000\044\000\000\000\000\000\000\000\044\000\044\000\000\000\
    \044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\044\000\000\000\044\000\
    \044\000\044\000\044\000\044\000\000\000\000\000\000\000\000\000\
    \045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\046\000\000\000\000\000\000\000\000\000\
    \000\000\044\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\000\000\000\000\000\000\044\000\
    \045\000\044\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\047\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\048\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \000\000\000\000\000\000\000\000\047\000\000\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
    \049\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
    \066\000\000\000\066\000\000\000\000\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \000\000\000\000\000\000\000\000\049\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\049\000\049\000\049\000\050\000\049\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\000\000\000\000\000\000\000\000\
    \051\000\000\000\049\000\049\000\049\000\049\000\050\000\049\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\049\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \000\000\000\000\000\000\000\000\049\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\064\000\064\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
    \049\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\049\000\049\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \000\000\000\000\000\000\000\000\049\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
    \049\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\057\000\000\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\058\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \000\000\000\000\000\000\000\000\056\000\000\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\058\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\062\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\000\000\000\000\000\000\000\000\
    \057\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\062\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\049\000\000\000\000\000\000\000\
    \060\000\000\000\060\000\000\000\000\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \000\000\000\000\000\000\000\000\049\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\000\000\000\000\000\000\000\000\
    \059\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\049\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \000\000\000\000\000\000\000\000\049\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\000\000\000\000\000\000\060\000\000\000\060\000\000\000\
    \000\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
    \049\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\049\000\049\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \000\000\000\000\000\000\000\000\063\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\064\000\064\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\000\000\000\000\000\000\000\000\
    \064\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\049\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \000\000\000\000\000\000\000\000\065\000\000\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \080\000\000\000\080\000\000\000\000\000\000\000\000\000\080\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\089\000\080\000\000\000\000\000\000\000\
    \000\000\000\000\080\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\000\000\000\000\000\000\000\000\000\000\080\000\078\000\
    \000\000\000\000\080\000\000\000\080\000\000\000\000\000\000\000\
    \077\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\000\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
    \000\000\000\000\097\000\097\000\097\000\000\000\000\000\000\000\
    \097\000\097\000\000\000\097\000\097\000\097\000\000\000\000\000\
    \000\000\000\000\090\000\090\000\090\000\090\000\090\000\090\000\
    \097\000\000\000\097\000\097\000\097\000\097\000\097\000\106\000\
    \102\000\000\000\099\000\103\000\099\000\099\000\099\000\099\000\
    \000\000\000\000\000\000\099\000\099\000\000\000\099\000\099\000\
    \099\000\000\000\000\000\000\000\000\000\000\000\106\000\000\000\
    \105\000\000\000\000\000\099\000\097\000\099\000\099\000\099\000\
    \099\000\099\000\000\000\000\000\000\000\000\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \000\000\000\000\000\000\000\000\006\000\000\000\000\000\006\000\
    \006\000\006\000\097\000\000\000\097\000\006\000\006\000\099\000\
    \006\000\006\000\006\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\006\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\000\000\000\000\000\000\111\000\
    \000\000\000\000\111\000\111\000\111\000\099\000\000\000\099\000\
    \111\000\111\000\000\000\111\000\111\000\111\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \111\000\006\000\111\000\111\000\111\000\111\000\111\000\000\000\
    \000\000\000\000\111\000\000\000\000\000\111\000\111\000\111\000\
    \000\000\000\000\000\000\111\000\111\000\000\000\111\000\111\000\
    \111\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \000\000\006\000\000\000\111\000\111\000\111\000\111\000\111\000\
    \111\000\111\000\000\000\000\000\000\000\111\000\000\000\000\000\
    \111\000\111\000\111\000\000\000\000\000\000\000\111\000\111\000\
    \000\000\111\000\111\000\111\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\111\000\000\000\111\000\000\000\111\000\111\000\
    \111\000\111\000\111\000\111\000\111\000\000\000\000\000\000\000\
    \114\000\000\000\000\000\114\000\114\000\114\000\000\000\000\000\
    \000\000\114\000\114\000\000\000\114\000\114\000\114\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\111\000\000\000\111\000\
    \000\000\114\000\111\000\114\000\114\000\114\000\114\000\114\000\
    \000\000\000\000\000\000\006\000\000\000\000\000\006\000\006\000\
    \006\000\000\000\000\000\000\000\006\000\006\000\000\000\006\000\
    \006\000\006\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \111\000\000\000\111\000\000\000\006\000\114\000\006\000\006\000\
    \006\000\006\000\006\000\000\000\000\000\000\000\006\000\000\000\
    \000\000\006\000\006\000\006\000\000\000\000\000\000\000\006\000\
    \006\000\000\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\114\000\000\000\114\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\000\000\000\000\
    \000\000\133\000\000\000\000\000\133\000\133\000\133\000\000\000\
    \000\000\000\000\133\000\133\000\000\000\133\000\133\000\133\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
    \006\000\000\000\133\000\006\000\133\000\133\000\133\000\133\000\
    \133\000\000\000\000\000\000\000\133\000\000\000\000\000\133\000\
    \133\000\133\000\000\000\000\000\000\000\133\000\133\000\000\000\
    \133\000\133\000\133\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\006\000\000\000\006\000\000\000\133\000\133\000\133\000\
    \133\000\133\000\133\000\133\000\000\000\000\000\000\000\111\000\
    \000\000\000\000\111\000\111\000\111\000\000\000\000\000\000\000\
    \111\000\111\000\000\000\111\000\111\000\111\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\133\000\000\000\133\000\000\000\
    \111\000\133\000\111\000\111\000\111\000\111\000\111\000\000\000\
    \000\000\000\000\111\000\000\000\000\000\111\000\111\000\111\000\
    \000\000\000\000\000\000\111\000\111\000\000\000\111\000\111\000\
    \111\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\
    \000\000\133\000\000\000\111\000\111\000\111\000\111\000\111\000\
    \111\000\111\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\111\000\000\000\111\000\000\000\150\000\111\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\000\000\149\000\000\000\111\000\150\000\111\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\160\000\149\000\160\000\000\000\000\000\000\000\
    \000\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\159\000\159\000\159\000\159\000\159\000\159\000\
    \159\000\159\000\159\000\159\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\165\000\160\000\000\000\
    \000\000\000\000\000\000\000\000\160\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\000\000\000\000\000\000\000\000\000\000\
    \160\000\000\000\000\000\000\000\160\000\000\000\160\000\000\000\
    \000\000\000\000\158\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\000\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\182\000\000\000\000\000\183\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\181\000\000\000\181\000\000\000\000\000\000\000\
    \000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\190\000\190\000\190\000\190\000\
    \190\000\190\000\190\000\190\000\190\000\190\000\181\000\000\000\
    \000\000\000\000\000\000\000\000\181\000\190\000\190\000\190\000\
    \190\000\190\000\190\000\000\000\000\000\000\000\000\000\000\000\
    \181\000\179\000\000\000\000\000\181\000\000\000\181\000\177\000\
    \000\000\000\000\178\000\191\000\191\000\191\000\191\000\191\000\
    \191\000\191\000\191\000\191\000\191\000\190\000\190\000\190\000\
    \190\000\190\000\190\000\000\000\191\000\191\000\191\000\191\000\
    \191\000\191\000\193\000\193\000\193\000\193\000\193\000\193\000\
    \193\000\193\000\193\000\193\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\193\000\193\000\193\000\193\000\193\000\
    \193\000\000\000\000\000\000\000\191\000\191\000\191\000\191\000\
    \191\000\191\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \193\000\193\000\193\000\193\000\193\000\193\000\193\000\193\000\
    \193\000\193\000\000\000\193\000\193\000\193\000\193\000\193\000\
    \193\000\193\000\193\000\193\000\193\000\193\000\193\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\193\000\193\000\193\000\193\000\193\000\193\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\204\000\194\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
    \000\000\204\000\203\000\204\000\204\000\204\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\000\000\000\000\203\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\039\000\000\000\000\000\039\000\040\000\
    \042\000\043\000\040\000\042\000\043\000\073\000\103\000\104\000\
    \073\000\103\000\104\000\107\000\109\000\212\000\107\000\109\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \016\000\026\000\003\000\003\000\003\000\071\000\072\000\027\000\
    \003\000\003\000\027\000\003\000\003\000\003\000\017\000\080\000\
    \083\000\017\000\017\000\037\000\087\000\090\000\037\000\121\000\
    \003\000\122\000\003\000\003\000\003\000\003\000\003\000\092\000\
    \092\000\126\000\004\000\145\000\027\000\004\000\004\000\004\000\
    \094\000\094\000\037\000\004\000\004\000\146\000\004\000\004\000\
    \004\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\004\000\003\000\004\000\004\000\004\000\
    \004\000\004\000\096\000\096\000\140\000\005\000\152\000\140\000\
    \005\000\005\000\005\000\153\000\160\000\154\000\005\000\005\000\
    \154\000\005\000\005\000\005\000\078\000\078\000\078\000\078\000\
    \163\000\027\000\003\000\166\000\003\000\177\000\005\000\004\000\
    \005\000\005\000\005\000\005\000\005\000\182\000\168\000\173\000\
    \006\000\168\000\173\000\006\000\006\000\006\000\205\000\206\000\
    \183\000\006\000\006\000\183\000\006\000\006\000\006\000\179\000\
    \179\000\179\000\179\000\105\000\182\000\004\000\105\000\004\000\
    \000\000\006\000\005\000\006\000\006\000\006\000\006\000\006\000\
    \209\000\184\000\211\000\007\000\184\000\104\000\007\000\007\000\
    \007\000\107\000\255\255\105\000\007\000\007\000\207\000\007\000\
    \007\000\007\000\208\000\255\255\195\000\106\000\106\000\195\000\
    \005\000\106\000\005\000\210\000\007\000\006\000\007\000\007\000\
    \007\000\007\000\007\000\255\255\201\000\202\000\008\000\201\000\
    \202\000\008\000\008\000\008\000\106\000\255\255\106\000\008\000\
    \008\000\255\255\008\000\008\000\008\000\196\000\255\255\255\255\
    \196\000\255\255\255\255\006\000\255\255\006\000\255\255\008\000\
    \007\000\008\000\008\000\008\000\008\000\008\000\013\000\255\255\
    \255\255\010\000\255\255\255\255\010\000\010\000\010\000\255\255\
    \255\255\255\255\010\000\010\000\255\255\010\000\010\000\010\000\
    \255\255\255\255\255\255\255\255\255\255\013\000\007\000\013\000\
    \007\000\013\000\010\000\008\000\010\000\010\000\010\000\010\000\
    \010\000\255\255\255\255\255\255\255\255\255\255\011\000\255\255\
    \255\255\011\000\011\000\011\000\255\255\027\000\255\255\011\000\
    \011\000\255\255\011\000\011\000\011\000\255\255\255\255\255\255\
    \255\255\008\000\255\255\008\000\255\255\010\000\010\000\011\000\
    \255\255\011\000\011\000\011\000\011\000\011\000\255\255\142\000\
    \169\000\255\255\142\000\169\000\255\255\014\000\255\255\255\255\
    \014\000\014\000\014\000\255\255\255\255\013\000\014\000\014\000\
    \255\255\014\000\014\000\014\000\010\000\010\000\010\000\196\000\
    \169\000\255\255\011\000\011\000\142\000\255\255\014\000\255\255\
    \014\000\014\000\014\000\014\000\014\000\255\255\255\255\255\255\
    \015\000\255\255\255\255\015\000\015\000\015\000\255\255\255\255\
    \255\255\015\000\015\000\255\255\015\000\015\000\015\000\255\255\
    \255\255\011\000\255\255\011\000\255\255\255\255\255\255\255\255\
    \255\255\015\000\014\000\015\000\015\000\015\000\015\000\015\000\
    \255\255\255\255\018\000\255\255\255\255\018\000\018\000\018\000\
    \255\255\142\000\169\000\018\000\018\000\255\255\018\000\018\000\
    \018\000\105\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \014\000\255\255\014\000\018\000\255\255\015\000\018\000\018\000\
    \018\000\018\000\255\255\255\255\255\255\019\000\255\255\255\255\
    \019\000\019\000\019\000\255\255\207\000\255\255\019\000\019\000\
    \208\000\019\000\019\000\019\000\106\000\255\255\255\255\255\255\
    \255\255\210\000\255\255\015\000\255\255\015\000\019\000\018\000\
    \019\000\019\000\019\000\019\000\019\000\255\255\255\255\255\255\
    \023\000\255\255\255\255\023\000\023\000\023\000\255\255\255\255\
    \255\255\023\000\023\000\196\000\023\000\023\000\023\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\018\000\255\255\018\000\
    \255\255\023\000\019\000\023\000\023\000\023\000\023\000\023\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\255\255\255\255\255\255\255\255\
    \019\000\255\255\019\000\255\255\255\255\023\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\255\255\024\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\255\255\023\000\255\255\023\000\024\000\024\000\
    \255\255\024\000\024\000\024\000\024\000\142\000\169\000\255\255\
    \024\000\024\000\101\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\255\255\024\000\024\000\024\000\024\000\024\000\255\255\
    \255\255\101\000\025\000\255\255\255\255\025\000\025\000\025\000\
    \255\255\255\255\025\000\025\000\025\000\255\255\025\000\025\000\
    \025\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\025\000\024\000\025\000\025\000\025\000\
    \025\000\025\000\159\000\159\000\159\000\159\000\159\000\159\000\
    \159\000\159\000\159\000\159\000\162\000\162\000\162\000\162\000\
    \162\000\162\000\162\000\162\000\162\000\162\000\255\255\255\255\
    \255\255\255\255\024\000\028\000\024\000\255\255\069\000\025\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\255\255\069\000\255\255\025\000\028\000\025\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\030\000\028\000\255\255\255\255\255\255\255\255\
    \255\255\030\000\255\255\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\255\255\255\255\
    \255\255\255\255\030\000\255\255\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\031\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\031\000\255\255\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\255\255\255\255\255\255\255\255\031\000\255\255\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\032\000\187\000\187\000\187\000\187\000\187\000\
    \187\000\187\000\187\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\255\255\255\255\
    \255\255\255\255\032\000\255\255\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\033\000\188\000\
    \188\000\188\000\188\000\188\000\188\000\188\000\188\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\255\255\255\255\255\255\255\255\033\000\255\255\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\034\000\255\255\255\255\034\000\034\000\034\000\
    \255\255\255\255\255\255\034\000\034\000\255\255\034\000\034\000\
    \034\000\255\255\255\255\255\255\255\255\255\255\255\255\137\000\
    \255\255\255\255\137\000\034\000\255\255\034\000\034\000\034\000\
    \034\000\034\000\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\255\255\255\255\255\255\137\000\
    \255\255\255\255\255\255\255\255\137\000\137\000\255\255\137\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\000\
    \034\000\255\255\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\255\255\034\000\035\000\034\000\
    \255\255\035\000\035\000\035\000\255\255\255\255\255\255\035\000\
    \035\000\255\255\035\000\035\000\035\000\185\000\185\000\185\000\
    \185\000\185\000\185\000\185\000\185\000\185\000\185\000\035\000\
    \255\255\035\000\035\000\035\000\035\000\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \137\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\035\000\035\000\255\255\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \036\000\035\000\255\255\035\000\255\255\255\255\255\255\255\255\
    \255\255\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\255\255\255\255\255\255\255\255\
    \036\000\255\255\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\044\000\137\000\255\255\044\000\
    \044\000\044\000\255\255\255\255\255\255\044\000\044\000\255\255\
    \044\000\044\000\044\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\044\000\255\255\044\000\
    \044\000\044\000\044\000\044\000\255\255\255\255\255\255\255\255\
    \045\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\255\255\255\255\255\255\255\255\
    \255\255\044\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\255\255\255\255\255\255\044\000\
    \045\000\044\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\047\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \255\255\255\255\255\255\255\255\047\000\255\255\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \049\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\255\255\255\255\255\255\255\255\
    \049\000\255\255\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\050\000\255\255\255\255\255\255\
    \050\000\255\255\050\000\255\255\255\255\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \255\255\255\255\255\255\255\255\050\000\255\255\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \051\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\255\255\255\255\255\255\255\255\
    \051\000\255\255\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\052\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \255\255\255\255\255\255\255\255\052\000\255\255\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \053\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\255\255\255\255\255\255\255\255\
    \053\000\255\255\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\054\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \255\255\255\255\255\255\255\255\054\000\255\255\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \055\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\255\255\255\255\255\255\255\255\
    \055\000\255\255\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\056\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\056\000\255\255\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \255\255\255\255\255\255\255\255\056\000\255\255\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \057\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\255\255\255\255\255\255\255\255\
    \057\000\255\255\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\058\000\255\255\255\255\255\255\
    \058\000\255\255\058\000\255\255\255\255\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \255\255\255\255\255\255\255\255\058\000\255\255\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \059\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\255\255\255\255\255\255\255\255\
    \059\000\255\255\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\061\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \255\255\255\255\255\255\255\255\061\000\255\255\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \062\000\255\255\255\255\255\255\062\000\255\255\062\000\255\255\
    \255\255\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\255\255\255\255\255\255\255\255\
    \062\000\255\255\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\063\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \255\255\255\255\255\255\255\255\063\000\255\255\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \064\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\255\255\255\255\255\255\255\255\
    \064\000\255\255\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\065\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \255\255\255\255\255\255\255\255\065\000\255\255\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \070\000\255\255\070\000\255\255\255\255\255\255\255\255\070\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\070\000\255\255\255\255\255\255\
    \255\255\255\255\070\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\255\255\255\255\255\255\255\255\255\255\070\000\070\000\
    \255\255\255\255\070\000\255\255\070\000\255\255\255\255\255\255\
    \070\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\255\255\089\000\089\000\089\000\089\000\089\000\089\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\097\000\
    \255\255\255\255\097\000\097\000\097\000\255\255\255\255\255\255\
    \097\000\097\000\255\255\097\000\097\000\097\000\255\255\255\255\
    \255\255\255\255\089\000\089\000\089\000\089\000\089\000\089\000\
    \097\000\255\255\097\000\097\000\097\000\097\000\097\000\100\000\
    \100\000\255\255\099\000\100\000\099\000\099\000\099\000\099\000\
    \255\255\255\255\255\255\099\000\099\000\255\255\099\000\099\000\
    \099\000\255\255\255\255\255\255\255\255\255\255\100\000\255\255\
    \100\000\255\255\255\255\099\000\097\000\099\000\099\000\099\000\
    \099\000\099\000\255\255\255\255\255\255\255\255\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \255\255\255\255\255\255\255\255\110\000\255\255\255\255\110\000\
    \110\000\110\000\097\000\255\255\097\000\110\000\110\000\099\000\
    \110\000\110\000\110\000\255\255\255\255\255\255\255\255\255\255\
    \070\000\255\255\255\255\255\255\255\255\110\000\255\255\110\000\
    \110\000\110\000\110\000\110\000\255\255\255\255\255\255\111\000\
    \255\255\255\255\111\000\111\000\111\000\099\000\255\255\099\000\
    \111\000\111\000\255\255\111\000\111\000\111\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \111\000\110\000\111\000\111\000\111\000\111\000\111\000\255\255\
    \255\255\255\255\112\000\255\255\255\255\112\000\112\000\112\000\
    \255\255\255\255\255\255\112\000\112\000\255\255\112\000\112\000\
    \112\000\255\255\255\255\255\255\255\255\255\255\255\255\110\000\
    \255\255\110\000\255\255\112\000\111\000\112\000\112\000\112\000\
    \112\000\112\000\255\255\255\255\255\255\113\000\255\255\255\255\
    \113\000\113\000\113\000\255\255\255\255\255\255\113\000\113\000\
    \255\255\113\000\113\000\113\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\111\000\255\255\111\000\255\255\113\000\112\000\
    \113\000\113\000\113\000\113\000\113\000\255\255\255\255\255\255\
    \114\000\255\255\255\255\114\000\114\000\114\000\255\255\255\255\
    \255\255\114\000\114\000\255\255\114\000\114\000\114\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\112\000\255\255\112\000\
    \255\255\114\000\113\000\114\000\114\000\114\000\114\000\114\000\
    \255\255\255\255\255\255\120\000\255\255\255\255\120\000\120\000\
    \120\000\255\255\255\255\255\255\120\000\120\000\255\255\120\000\
    \120\000\120\000\255\255\255\255\255\255\255\255\100\000\255\255\
    \113\000\255\255\113\000\255\255\120\000\114\000\120\000\120\000\
    \120\000\120\000\120\000\255\255\255\255\255\255\130\000\255\255\
    \255\255\130\000\130\000\130\000\255\255\255\255\255\255\130\000\
    \130\000\255\255\130\000\130\000\130\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\114\000\255\255\114\000\255\255\130\000\
    \120\000\130\000\130\000\130\000\130\000\130\000\255\255\255\255\
    \255\255\133\000\255\255\255\255\133\000\133\000\133\000\255\255\
    \255\255\255\255\133\000\133\000\255\255\133\000\133\000\133\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\120\000\255\255\
    \120\000\255\255\133\000\130\000\133\000\133\000\133\000\133\000\
    \133\000\255\255\255\255\255\255\134\000\255\255\255\255\134\000\
    \134\000\134\000\255\255\255\255\255\255\134\000\134\000\255\255\
    \134\000\134\000\134\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\130\000\255\255\130\000\255\255\134\000\133\000\134\000\
    \134\000\134\000\134\000\134\000\255\255\255\255\255\255\135\000\
    \255\255\255\255\135\000\135\000\135\000\255\255\255\255\255\255\
    \135\000\135\000\255\255\135\000\135\000\135\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\133\000\255\255\133\000\255\255\
    \135\000\134\000\135\000\135\000\135\000\135\000\135\000\255\255\
    \255\255\255\255\136\000\255\255\255\255\136\000\136\000\136\000\
    \255\255\255\255\255\255\136\000\136\000\255\255\136\000\136\000\
    \136\000\255\255\255\255\255\255\255\255\255\255\255\255\134\000\
    \255\255\134\000\255\255\136\000\135\000\136\000\136\000\136\000\
    \136\000\136\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\135\000\255\255\135\000\255\255\143\000\136\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\255\255\143\000\255\255\136\000\150\000\136\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
    \150\000\150\000\151\000\150\000\151\000\255\255\255\255\255\255\
    \255\255\151\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\151\000\151\000\151\000\151\000\151\000\151\000\
    \151\000\151\000\151\000\151\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\158\000\158\000\158\000\158\000\
    \158\000\158\000\158\000\158\000\158\000\158\000\151\000\255\255\
    \255\255\255\255\255\255\255\255\151\000\158\000\158\000\158\000\
    \158\000\158\000\158\000\255\255\255\255\255\255\255\255\255\255\
    \151\000\255\255\255\255\255\255\151\000\255\255\151\000\255\255\
    \255\255\255\255\151\000\165\000\165\000\165\000\165\000\165\000\
    \165\000\165\000\165\000\165\000\165\000\158\000\158\000\158\000\
    \158\000\158\000\158\000\255\255\165\000\165\000\165\000\165\000\
    \165\000\165\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\174\000\255\255\255\255\174\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\165\000\165\000\165\000\165\000\
    \165\000\165\000\174\000\255\255\174\000\255\255\255\255\255\255\
    \255\255\174\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\174\000\174\000\174\000\174\000\174\000\174\000\
    \174\000\174\000\174\000\174\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\178\000\174\000\255\255\
    \255\255\255\255\255\255\255\255\174\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\255\255\255\255\255\255\255\255\255\255\
    \174\000\174\000\255\255\255\255\174\000\255\255\174\000\174\000\
    \255\255\255\255\174\000\190\000\190\000\190\000\190\000\190\000\
    \190\000\190\000\190\000\190\000\190\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\255\255\190\000\190\000\190\000\190\000\
    \190\000\190\000\192\000\192\000\192\000\192\000\192\000\192\000\
    \192\000\192\000\192\000\192\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\192\000\192\000\192\000\192\000\192\000\
    \192\000\255\255\255\255\255\255\190\000\190\000\190\000\190\000\
    \190\000\190\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \193\000\193\000\193\000\193\000\193\000\193\000\193\000\193\000\
    \193\000\193\000\255\255\192\000\192\000\192\000\192\000\192\000\
    \192\000\193\000\193\000\193\000\193\000\193\000\193\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\193\000\193\000\193\000\193\000\193\000\193\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\174\000\255\255\198\000\193\000\198\000\198\000\
    \198\000\198\000\198\000\198\000\198\000\198\000\198\000\198\000\
    \198\000\198\000\198\000\198\000\198\000\198\000\198\000\198\000\
    \198\000\198\000\198\000\198\000\198\000\198\000\198\000\198\000\
    \255\255\204\000\198\000\204\000\204\000\204\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\255\255\255\255\204\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\010\000\036\000\022\000\000\000\
    \000\000\000\000\005\000\000\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\050\000\050\000\000\000\009\000\050\000\
    \000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\009\000\001\000\000\000\009\000\000\000\034\000\
    \000\000\000\000\009\000\000\000\012\000\001\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\001\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\024\000\105\000\174\000\183\000\105\000\106\000\184\000\
    \255\255\255\255\255\255\100\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \024\000\255\255\105\000\000\000\255\255\106\000\255\255\106\000\
    \255\255\255\255\100\000\255\255\100\000\101\000\255\255\255\255\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\101\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\101\000\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \105\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_code =
   "\255\005\255\255\007\255\006\255\255\007\255\255\009\255\008\255\
    \255\006\255\007\255\255\004\255\000\005\001\006\002\007\255\009\
    \255\255\008\255\009\255\255\000\005\001\006\004\008\003\009\002\
    \007\255\001\255\255\000\001\255";
}

let rec token lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 10 (-1); __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 751 "ml/lexer.mll"
                 (
      if not !escaped_newlines then
        raise (Error(Illegal_character (Lexing.lexeme_char lexbuf 0),
                     Location.curr lexbuf));
      update_loc lexbuf None 1 false 0;
      token lexbuf )
# 2017 "ml/lexer.ml"

  | 1 ->
# 758 "ml/lexer.mll"
      ( update_loc lexbuf None 1 false 0;
        EOL )
# 2023 "ml/lexer.ml"

  | 2 ->
# 761 "ml/lexer.mll"
      ( token lexbuf )
# 2028 "ml/lexer.ml"

  | 3 ->
# 763 "ml/lexer.mll"
      ( UNDERSCORE )
# 2033 "ml/lexer.ml"

  | 4 ->
# 765 "ml/lexer.mll"
      ( TILDE )
# 2038 "ml/lexer.ml"

  | 5 ->
# 767 "ml/lexer.mll"
      ( LABEL (get_label_name lexbuf) )
# 2043 "ml/lexer.ml"

  | 6 ->
# 769 "ml/lexer.mll"
      ( QUESTION )
# 2048 "ml/lexer.ml"

  | 7 ->
# 771 "ml/lexer.mll"
      ( OPTLABEL (get_label_name lexbuf) )
# 2053 "ml/lexer.ml"

  | 8 ->
# 773 "ml/lexer.mll"
      ( let s = Lexing.lexeme lexbuf in
        try Hashtbl.find keyword_table s
        with Not_found -> LIDENT s )
# 2060 "ml/lexer.ml"

  | 9 ->
# 777 "ml/lexer.mll"
      ( UIDENT(Lexing.lexeme lexbuf) )
# 2065 "ml/lexer.ml"

  | 10 ->
# 778 "ml/lexer.mll"
                ( INT (Lexing.lexeme lexbuf, None) )
# 2070 "ml/lexer.ml"

  | 11 ->
let
# 779 "ml/lexer.mll"
                    lit
# 2076 "ml/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1)
and
# 779 "ml/lexer.mll"
                                              modif
# 2081 "ml/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_curr_pos + -1) in
# 780 "ml/lexer.mll"
      ( INT (lit, Some modif) )
# 2085 "ml/lexer.ml"

  | 12 ->
# 782 "ml/lexer.mll"
      ( FLOAT (Lexing.lexeme lexbuf, None) )
# 2090 "ml/lexer.ml"

  | 13 ->
let
# 783 "ml/lexer.mll"
                                            lit
# 2096 "ml/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1)
and
# 783 "ml/lexer.mll"
                                                                      modif
# 2101 "ml/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_curr_pos + -1) in
# 784 "ml/lexer.mll"
      ( FLOAT (lit, Some modif) )
# 2105 "ml/lexer.ml"

  | 14 ->
# 786 "ml/lexer.mll"
      ( raise (Error(Invalid_literal (Lexing.lexeme lexbuf),
                     Location.curr lexbuf)) )
# 2111 "ml/lexer.ml"

  | 15 ->
# 789 "ml/lexer.mll"
      ( reset_string_buffer();
        is_in_string := true;
        let string_start = lexbuf.lex_start_p in
        string_start_loc := Location.curr lexbuf;
        string lexbuf;
        is_in_string := false;
        lexbuf.lex_start_p <- string_start;
        STRING (get_stored_string(), None) )
# 2123 "ml/lexer.ml"

  | 16 ->
# 798 "ml/lexer.mll"
      ( reset_string_buffer();
        let delim = Lexing.lexeme lexbuf in
        let delim = String.sub delim 1 (String.length delim - 2) in
        is_in_string := true;
        let string_start = lexbuf.lex_start_p in
        string_start_loc := Location.curr lexbuf;
        quoted_string delim lexbuf;
        is_in_string := false;
        lexbuf.lex_start_p <- string_start;
        STRING (get_stored_string(), Some delim) )
# 2137 "ml/lexer.ml"

  | 17 ->
# 809 "ml/lexer.mll"
      ( update_loc lexbuf None 1 false 1;
        CHAR (Lexing.lexeme_char lexbuf 1) )
# 2143 "ml/lexer.ml"

  | 18 ->
# 812 "ml/lexer.mll"
      ( CHAR(Lexing.lexeme_char lexbuf 1) )
# 2148 "ml/lexer.ml"

  | 19 ->
# 814 "ml/lexer.mll"
      ( CHAR(char_for_backslash (Lexing.lexeme_char lexbuf 2)) )
# 2153 "ml/lexer.ml"

  | 20 ->
# 816 "ml/lexer.mll"
      ( CHAR(char_for_decimal_code lexbuf 2) )
# 2158 "ml/lexer.ml"

  | 21 ->
# 818 "ml/lexer.mll"
      ( CHAR(char_for_octal_code lexbuf 3) )
# 2163 "ml/lexer.ml"

  | 22 ->
# 820 "ml/lexer.mll"
      ( CHAR(char_for_hexadecimal_code lexbuf 3) )
# 2168 "ml/lexer.ml"

  | 23 ->
# 822 "ml/lexer.mll"
      ( let l = Lexing.lexeme lexbuf in
        let esc = String.sub l 1 (String.length l - 1) in
        raise (Error(Illegal_escape esc, Location.curr lexbuf))
      )
# 2176 "ml/lexer.ml"

  | 24 ->
# 827 "ml/lexer.mll"
      ( let s, loc = with_comment_buffer comment lexbuf in
        COMMENT (s, loc) )
# 2182 "ml/lexer.ml"

  | 25 ->
# 830 "ml/lexer.mll"
      ( let s, loc = with_comment_buffer comment lexbuf in
        if !handle_docstrings then
          DOCSTRING (Docstrings.docstring s loc)
        else
          COMMENT ("*" ^ s, loc)
      )
# 2192 "ml/lexer.ml"

  | 26 ->
let
# 836 "ml/lexer.mll"
                     stars
# 2198 "ml/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 3) lexbuf.Lexing.lex_curr_pos in
# 837 "ml/lexer.mll"
      ( let s, loc =
          with_comment_buffer
            (fun lexbuf ->
               store_string ("*" ^ stars);
               comment lexbuf)
            lexbuf
        in
        COMMENT (s, loc) )
# 2209 "ml/lexer.ml"

  | 27 ->
# 846 "ml/lexer.mll"
      ( if !print_warnings then
          Location.prerr_warning (Location.curr lexbuf) Warnings.Comment_start;
        let s, loc = with_comment_buffer comment lexbuf in
        COMMENT (s, loc) )
# 2217 "ml/lexer.ml"

  | 28 ->
let
# 850 "ml/lexer.mll"
                    stars
# 2223 "ml/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) (lexbuf.Lexing.lex_curr_pos + -2) in
# 851 "ml/lexer.mll"
      ( if !handle_docstrings && stars="" then
         (* (**) is an empty docstring *)
          DOCSTRING(Docstrings.docstring "" (Location.curr lexbuf))
        else
          COMMENT (stars, Location.curr lexbuf) )
# 2231 "ml/lexer.ml"

  | 29 ->
# 857 "ml/lexer.mll"
      ( let loc = Location.curr lexbuf in
        Location.prerr_warning loc Warnings.Comment_not_end;
        lexbuf.Lexing.lex_curr_pos <- lexbuf.Lexing.lex_curr_pos - 1;
        let curpos = lexbuf.lex_curr_p in
        lexbuf.lex_curr_p <- { curpos with pos_cnum = curpos.pos_cnum - 1 };
        STAR
      )
# 2242 "ml/lexer.ml"

  | 30 ->
let
# 864 "ml/lexer.mll"
                                    num
# 2248 "ml/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 865 "ml/lexer.mll"
                                            name
# 2253 "ml/lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(4) lexbuf.Lexing.lex_mem.(3)
and
# 865 "ml/lexer.mll"
                                                             directive
# 2258 "ml/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(2) in
# 867 "ml/lexer.mll"
      (
        match int_of_string num with
        | exception _ ->
            (* PR#7165 *)
            let loc = Location.curr lexbuf in
            let explanation = "line number out of range" in
            let error = Invalid_directive (directive, Some explanation) in
            raise (Error (error, loc))
        | line_num ->
           (* Documentation says that the line number should be
              positive, but we have never guarded against this and it
              might have useful hackish uses. *)
            update_loc lexbuf name line_num true 0;
            token lexbuf
      )
# 2276 "ml/lexer.ml"

  | 31 ->
# 882 "ml/lexer.mll"
         ( HASH )
# 2281 "ml/lexer.ml"

  | 32 ->
# 883 "ml/lexer.mll"
         ( AMPERSAND )
# 2286 "ml/lexer.ml"

  | 33 ->
# 884 "ml/lexer.mll"
         ( AMPERAMPER )
# 2291 "ml/lexer.ml"

  | 34 ->
# 885 "ml/lexer.mll"
         ( BACKQUOTE )
# 2296 "ml/lexer.ml"

  | 35 ->
# 886 "ml/lexer.mll"
         ( QUOTE )
# 2301 "ml/lexer.ml"

  | 36 ->
# 887 "ml/lexer.mll"
         ( LPAREN )
# 2306 "ml/lexer.ml"

  | 37 ->
# 888 "ml/lexer.mll"
         ( RPAREN )
# 2311 "ml/lexer.ml"

  | 38 ->
# 889 "ml/lexer.mll"
         ( STAR )
# 2316 "ml/lexer.ml"

  | 39 ->
# 890 "ml/lexer.mll"
         ( COMMA )
# 2321 "ml/lexer.ml"

  | 40 ->
# 891 "ml/lexer.mll"
         ( MINUSGREATER )
# 2326 "ml/lexer.ml"

  | 41 ->
# 892 "ml/lexer.mll"
         ( DOT )
# 2331 "ml/lexer.ml"

  | 42 ->
# 893 "ml/lexer.mll"
         ( DOTDOT )
# 2336 "ml/lexer.ml"

  | 43 ->
let
# 894 "ml/lexer.mll"
                                      s
# 2342 "ml/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 894 "ml/lexer.mll"
                                         ( DOTOP s )
# 2346 "ml/lexer.ml"

  | 44 ->
# 895 "ml/lexer.mll"
         ( COLON )
# 2351 "ml/lexer.ml"

  | 45 ->
# 896 "ml/lexer.mll"
         ( COLONCOLON )
# 2356 "ml/lexer.ml"

  | 46 ->
# 897 "ml/lexer.mll"
         ( COLONEQUAL )
# 2361 "ml/lexer.ml"

  | 47 ->
# 898 "ml/lexer.mll"
         ( COLONGREATER )
# 2366 "ml/lexer.ml"

  | 48 ->
# 899 "ml/lexer.mll"
         ( SEMI )
# 2371 "ml/lexer.ml"

  | 49 ->
# 900 "ml/lexer.mll"
         ( SEMISEMI )
# 2376 "ml/lexer.ml"

  | 50 ->
# 901 "ml/lexer.mll"
         ( LESS )
# 2381 "ml/lexer.ml"

  | 51 ->
# 902 "ml/lexer.mll"
         ( LESSMINUS )
# 2386 "ml/lexer.ml"

  | 52 ->
# 903 "ml/lexer.mll"
         ( EQUAL )
# 2391 "ml/lexer.ml"

  | 53 ->
# 904 "ml/lexer.mll"
         ( LBRACKET )
# 2396 "ml/lexer.ml"

  | 54 ->
# 905 "ml/lexer.mll"
         ( LBRACKETBAR )
# 2401 "ml/lexer.ml"

  | 55 ->
# 906 "ml/lexer.mll"
         ( LBRACKETLESS )
# 2406 "ml/lexer.ml"

  | 56 ->
# 907 "ml/lexer.mll"
         ( LBRACKETGREATER )
# 2411 "ml/lexer.ml"

  | 57 ->
# 908 "ml/lexer.mll"
         ( RBRACKET )
# 2416 "ml/lexer.ml"

  | 58 ->
# 909 "ml/lexer.mll"
         ( LBRACE )
# 2421 "ml/lexer.ml"

  | 59 ->
# 910 "ml/lexer.mll"
         ( LBRACELESS )
# 2426 "ml/lexer.ml"

  | 60 ->
# 911 "ml/lexer.mll"
         ( BAR )
# 2431 "ml/lexer.ml"

  | 61 ->
# 912 "ml/lexer.mll"
         ( BARBAR )
# 2436 "ml/lexer.ml"

  | 62 ->
# 913 "ml/lexer.mll"
         ( BARRBRACKET )
# 2441 "ml/lexer.ml"

  | 63 ->
# 914 "ml/lexer.mll"
         ( GREATER )
# 2446 "ml/lexer.ml"

  | 64 ->
# 915 "ml/lexer.mll"
         ( GREATERRBRACKET )
# 2451 "ml/lexer.ml"

  | 65 ->
# 916 "ml/lexer.mll"
         ( RBRACE )
# 2456 "ml/lexer.ml"

  | 66 ->
# 917 "ml/lexer.mll"
         ( GREATERRBRACE )
# 2461 "ml/lexer.ml"

  | 67 ->
# 918 "ml/lexer.mll"
         ( LBRACKETAT )
# 2466 "ml/lexer.ml"

  | 68 ->
# 919 "ml/lexer.mll"
           ( LBRACKETATAT )
# 2471 "ml/lexer.ml"

  | 69 ->
# 920 "ml/lexer.mll"
           ( LBRACKETATATAT )
# 2476 "ml/lexer.ml"

  | 70 ->
# 921 "ml/lexer.mll"
           ( LBRACKETPERCENT )
# 2481 "ml/lexer.ml"

  | 71 ->
# 922 "ml/lexer.mll"
           ( LBRACKETPERCENTPERCENT )
# 2486 "ml/lexer.ml"

  | 72 ->
# 923 "ml/lexer.mll"
         ( BANG )
# 2491 "ml/lexer.ml"

  | 73 ->
# 924 "ml/lexer.mll"
         ( INFIXOP0 "!=" )
# 2496 "ml/lexer.ml"

  | 74 ->
# 925 "ml/lexer.mll"
         ( PLUS )
# 2501 "ml/lexer.ml"

  | 75 ->
# 926 "ml/lexer.mll"
         ( PLUSDOT )
# 2506 "ml/lexer.ml"

  | 76 ->
# 927 "ml/lexer.mll"
         ( PLUSEQ )
# 2511 "ml/lexer.ml"

  | 77 ->
# 928 "ml/lexer.mll"
         ( MINUS )
# 2516 "ml/lexer.ml"

  | 78 ->
# 929 "ml/lexer.mll"
         ( MINUSDOT )
# 2521 "ml/lexer.ml"

  | 79 ->
# 932 "ml/lexer.mll"
            ( PREFIXOP(Lexing.lexeme lexbuf) )
# 2526 "ml/lexer.ml"

  | 80 ->
# 934 "ml/lexer.mll"
            ( PREFIXOP(Lexing.lexeme lexbuf) )
# 2531 "ml/lexer.ml"

  | 81 ->
# 936 "ml/lexer.mll"
            ( INFIXOP0(Lexing.lexeme lexbuf) )
# 2536 "ml/lexer.ml"

  | 82 ->
# 938 "ml/lexer.mll"
            ( INFIXOP1(Lexing.lexeme lexbuf) )
# 2541 "ml/lexer.ml"

  | 83 ->
# 940 "ml/lexer.mll"
            ( INFIXOP2(Lexing.lexeme lexbuf) )
# 2546 "ml/lexer.ml"

  | 84 ->
# 942 "ml/lexer.mll"
            ( INFIXOP4(Lexing.lexeme lexbuf) )
# 2551 "ml/lexer.ml"

  | 85 ->
# 943 "ml/lexer.mll"
            ( PERCENT )
# 2556 "ml/lexer.ml"

  | 86 ->
# 945 "ml/lexer.mll"
            ( INFIXOP3(Lexing.lexeme lexbuf) )
# 2561 "ml/lexer.ml"

  | 87 ->
# 947 "ml/lexer.mll"
            ( HASHOP(Lexing.lexeme lexbuf) )
# 2566 "ml/lexer.ml"

  | 88 ->
# 948 "ml/lexer.mll"
        (
    if !if_then_else <> Dir_out then
      if !if_then_else = Dir_if_true then
        raise (Error (Unterminated_if, Location.curr lexbuf))
      else raise (Error(Unterminated_else, Location.curr lexbuf))
    else 
      EOF

  )
# 2579 "ml/lexer.ml"

  | 89 ->
# 958 "ml/lexer.mll"
      ( raise (Error(Illegal_character (Lexing.lexeme_char lexbuf 0),
                     Location.curr lexbuf))
      )
# 2586 "ml/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 137
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 964 "ml/lexer.mll"
      ( comment_start_loc := (Location.curr lexbuf) :: !comment_start_loc;
        store_lexeme lexbuf;
        comment lexbuf
      )
# 2601 "ml/lexer.ml"

  | 1 ->
# 969 "ml/lexer.mll"
      ( match !comment_start_loc with
        | [] -> assert false
        | [_] -> comment_start_loc := []; Location.curr lexbuf
        | _ :: l -> comment_start_loc := l;
                  store_lexeme lexbuf;
                  comment lexbuf
       )
# 2612 "ml/lexer.ml"

  | 2 ->
# 977 "ml/lexer.mll"
      (
        string_start_loc := Location.curr lexbuf;
        store_string_char '\"';
        is_in_string := true;
        begin try string lexbuf
        with Error (Unterminated_string, str_start) ->
          match !comment_start_loc with
          | [] -> assert false
          | loc :: _ ->
            let start = List.hd (List.rev !comment_start_loc) in
            comment_start_loc := [];
            raise (Error (Unterminated_string_in_comment (start, str_start),
                          loc))
        end;
        is_in_string := false;
        store_string_char '\"';
        comment lexbuf )
# 2633 "ml/lexer.ml"

  | 3 ->
# 995 "ml/lexer.mll"
      (
        let delim = Lexing.lexeme lexbuf in
        let delim = String.sub delim 1 (String.length delim - 2) in
        string_start_loc := Location.curr lexbuf;
        store_lexeme lexbuf;
        is_in_string := true;
        begin try quoted_string delim lexbuf
        with Error (Unterminated_string, str_start) ->
          match !comment_start_loc with
          | [] -> assert false
          | loc :: _ ->
            let start = List.hd (List.rev !comment_start_loc) in
            comment_start_loc := [];
            raise (Error (Unterminated_string_in_comment (start, str_start),
                          loc))
        end;
        is_in_string := false;
        store_string_char '|';
        store_string delim;
        store_string_char '}';
        comment lexbuf )
# 2658 "ml/lexer.ml"

  | 4 ->
# 1018 "ml/lexer.mll"
      ( store_lexeme lexbuf; comment lexbuf )
# 2663 "ml/lexer.ml"

  | 5 ->
# 1020 "ml/lexer.mll"
      ( update_loc lexbuf None 1 false 1;
        store_lexeme lexbuf;
        comment lexbuf
      )
# 2671 "ml/lexer.ml"

  | 6 ->
# 1025 "ml/lexer.mll"
      ( store_lexeme lexbuf; comment lexbuf )
# 2676 "ml/lexer.ml"

  | 7 ->
# 1027 "ml/lexer.mll"
      ( store_lexeme lexbuf; comment lexbuf )
# 2681 "ml/lexer.ml"

  | 8 ->
# 1029 "ml/lexer.mll"
      ( store_lexeme lexbuf; comment lexbuf )
# 2686 "ml/lexer.ml"

  | 9 ->
# 1031 "ml/lexer.mll"
      ( store_lexeme lexbuf; comment lexbuf )
# 2691 "ml/lexer.ml"

  | 10 ->
# 1033 "ml/lexer.mll"
      ( match !comment_start_loc with
        | [] -> assert false
        | loc :: _ ->
          let start = List.hd (List.rev !comment_start_loc) in
          comment_start_loc := [];
          raise (Error (Unterminated_comment start, loc))
      )
# 2702 "ml/lexer.ml"

  | 11 ->
# 1041 "ml/lexer.mll"
      ( update_loc lexbuf None 1 false 0;
        store_lexeme lexbuf;
        comment lexbuf
      )
# 2710 "ml/lexer.ml"

  | 12 ->
# 1046 "ml/lexer.mll"
      ( store_lexeme lexbuf; comment lexbuf )
# 2715 "ml/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1); __ocaml_lex_string_rec lexbuf 169
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 1050 "ml/lexer.mll"
      ( () )
# 2727 "ml/lexer.ml"

  | 1 ->
let
# 1051 "ml/lexer.mll"
                                  space
# 2733 "ml/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 1052 "ml/lexer.mll"
      ( update_loc lexbuf None 1 false (String.length space);
        if in_comment () then store_lexeme lexbuf;
        string lexbuf
      )
# 2740 "ml/lexer.ml"

  | 2 ->
# 1057 "ml/lexer.mll"
      ( store_escaped_char lexbuf
                           (char_for_backslash(Lexing.lexeme_char lexbuf 1));
        string lexbuf )
# 2747 "ml/lexer.ml"

  | 3 ->
# 1061 "ml/lexer.mll"
      ( store_escaped_char lexbuf (char_for_decimal_code lexbuf 1);
         string lexbuf )
# 2753 "ml/lexer.ml"

  | 4 ->
# 1064 "ml/lexer.mll"
      ( store_escaped_char lexbuf (char_for_octal_code lexbuf 2);
         string lexbuf )
# 2759 "ml/lexer.ml"

  | 5 ->
# 1067 "ml/lexer.mll"
      ( store_escaped_char lexbuf (char_for_hexadecimal_code lexbuf 2);
         string lexbuf )
# 2765 "ml/lexer.ml"

  | 6 ->
# 1070 "ml/lexer.mll"
        ( store_escaped_uchar lexbuf (uchar_for_uchar_escape lexbuf);
          string lexbuf )
# 2771 "ml/lexer.ml"

  | 7 ->
# 1073 "ml/lexer.mll"
      ( if not (in_comment ()) then begin
(*  Should be an error, but we are very lax.
          raise (Error (Illegal_escape (Lexing.lexeme lexbuf),
                        Location.curr lexbuf))
*)
          let loc = Location.curr lexbuf in
          Location.prerr_warning loc Warnings.Illegal_backslash;
        end;
        store_lexeme lexbuf;
        string lexbuf
      )
# 2786 "ml/lexer.ml"

  | 8 ->
# 1085 "ml/lexer.mll"
      ( if not (in_comment ()) then
          Location.prerr_warning (Location.curr lexbuf) Warnings.Eol_in_string;
        update_loc lexbuf None 1 false 0;
        store_lexeme lexbuf;
        string lexbuf
      )
# 2796 "ml/lexer.ml"

  | 9 ->
# 1092 "ml/lexer.mll"
      ( is_in_string := false;
        raise (Error (Unterminated_string, !string_start_loc)) )
# 2802 "ml/lexer.ml"

  | 10 ->
# 1095 "ml/lexer.mll"
      ( store_string_char(Lexing.lexeme_char lexbuf 0);
        string lexbuf )
# 2808 "ml/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and quoted_string delim lexbuf =
   __ocaml_lex_quoted_string_rec delim lexbuf 196
and __ocaml_lex_quoted_string_rec delim lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 1100 "ml/lexer.mll"
      ( update_loc lexbuf None 1 false 0;
        store_lexeme lexbuf;
        quoted_string delim lexbuf
      )
# 2823 "ml/lexer.ml"

  | 1 ->
# 1105 "ml/lexer.mll"
      ( is_in_string := false;
        raise (Error (Unterminated_string, !string_start_loc)) )
# 2829 "ml/lexer.ml"

  | 2 ->
# 1108 "ml/lexer.mll"
      (
        let edelim = Lexing.lexeme lexbuf in
        let edelim = String.sub edelim 1 (String.length edelim - 2) in
        if delim = edelim then ()
        else (store_lexeme lexbuf; quoted_string delim lexbuf)
      )
# 2839 "ml/lexer.ml"

  | 3 ->
# 1115 "ml/lexer.mll"
      ( store_string_char(Lexing.lexeme_char lexbuf 0);
        quoted_string delim lexbuf )
# 2845 "ml/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_quoted_string_rec delim lexbuf __ocaml_lex_state

and skip_hash_bang lexbuf =
   __ocaml_lex_skip_hash_bang_rec lexbuf 205
and __ocaml_lex_skip_hash_bang_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 1120 "ml/lexer.mll"
       ( update_loc lexbuf None 3 false 0 )
# 2857 "ml/lexer.ml"

  | 1 ->
# 1122 "ml/lexer.mll"
       ( update_loc lexbuf None 1 false 0 )
# 2862 "ml/lexer.ml"

  | 2 ->
# 1123 "ml/lexer.mll"
       ( () )
# 2867 "ml/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_skip_hash_bang_rec lexbuf __ocaml_lex_state

;;

# 1125 "ml/lexer.mll"
 
  let at_bol lexbuf = 
    let pos = Lexing.lexeme_start_p lexbuf in 
    pos.pos_cnum = pos.pos_bol 

  let token_with_comments lexbuf =
    match !preprocessor with
    | None -> token lexbuf
    | Some (_init, preprocess) -> preprocess token lexbuf

  type newline_state =
    | NoLine (* There have been no blank lines yet. *)
    | NewLine
        (* There have been no blank lines, and the previous
           token was a newline. *)
    | BlankLine (* There have been blank lines. *)

  type doc_state =
    | Initial  (* There have been no docstrings yet *)
    | After of docstring list
        (* There have been docstrings, none of which were
           preceded by a blank line *)
    | Before of docstring list * docstring list * docstring list
        (* There have been docstrings, some of which were
           preceded by a blank line *)

  and docstring = Docstrings.docstring

  let interpret_directive lexbuf cont look_ahead = 
    let if_then_else = !if_then_else in
    begin match token_with_comments lexbuf, if_then_else with 
    |  IF, Dir_out  ->
        let rec skip_from_if_false () = 
          let token = token_with_comments lexbuf in
          if token = EOF then 
            raise (Error (Unterminated_if, Location.curr lexbuf)) else
          if token = HASH && at_bol lexbuf then 
            begin 
              let token = token_with_comments lexbuf in
              match token with
              | END -> 
                  begin
                    update_if_then_else Dir_out;
                    cont lexbuf
                  end
              | ELSE -> 
                  begin
                    update_if_then_else Dir_if_false;
                    cont lexbuf
                  end
              | IF ->
                  raise (Error (Unexpected_directive, Location.curr lexbuf))
              | _ -> 
                  if is_elif token &&
                     directive_parse token_with_comments lexbuf then
                    begin
                      update_if_then_else Dir_if_true;
                      cont lexbuf
                    end
                  else skip_from_if_false ()                               
            end
          else skip_from_if_false () in 
        if directive_parse token_with_comments lexbuf then
          begin 
            update_if_then_else Dir_if_true (* Next state: ELSE *);
            cont lexbuf
          end
        else
          skip_from_if_false ()
    | IF,  (Dir_if_false | Dir_if_true)->
        raise (Error(Unexpected_directive, Location.curr lexbuf))
    | LIDENT "elif", (Dir_if_false | Dir_out)
      -> (* when the predicate is false, it will continue eating `elif` *)
        raise (Error(Unexpected_directive, Location.curr lexbuf))
    | (LIDENT "elif" | ELSE as token), Dir_if_true ->           
        (* looking for #end, however, it can not see #if anymore *)
        let rec skip_from_if_true else_seen = 
          let token = token_with_comments lexbuf in
          if token = EOF then 
            raise (Error (Unterminated_else, Location.curr lexbuf)) else
          if token = HASH && at_bol lexbuf then 
            begin 
              let token = token_with_comments lexbuf in 
              match token with  
              | END -> 
                  begin
                    update_if_then_else Dir_out;
                    cont lexbuf
                  end  
              | IF ->  
                  raise (Error (Unexpected_directive, Location.curr lexbuf)) 
              | ELSE ->
                  if else_seen then 
                    raise (Error (Unexpected_directive, Location.curr lexbuf))
                  else 
                    skip_from_if_true true
              | _ ->
                  if else_seen && is_elif token then  
                    raise (Error (Unexpected_directive, Location.curr lexbuf))
                  else 
                    skip_from_if_true else_seen
            end
          else skip_from_if_true else_seen in 
        skip_from_if_true (token = ELSE)
    | ELSE, Dir_if_false 
    | ELSE, Dir_out -> 
        raise (Error(Unexpected_directive, Location.curr lexbuf))
    | END, (Dir_if_false | Dir_if_true ) -> 
        update_if_then_else  Dir_out;
        cont lexbuf
    | END,  Dir_out  -> 
        raise (Error(Unexpected_directive, Location.curr lexbuf))
    | token, (Dir_if_true | Dir_if_false | Dir_out) ->
        look_ahead token 
    end

  let token lexbuf =
    let post_pos = lexeme_end_p lexbuf in
    let attach lines docs pre_pos =
      let open Docstrings in
        match docs, lines with
        | Initial, _ -> ()
        | After a, (NoLine | NewLine) ->
            set_post_docstrings post_pos (List.rev a);
            set_pre_docstrings pre_pos a;
        | After a, BlankLine ->
            set_post_docstrings post_pos (List.rev a);
            set_pre_extra_docstrings pre_pos (List.rev a)
        | Before(a, f, b), (NoLine | NewLine) ->
            set_post_docstrings post_pos (List.rev a);
            set_post_extra_docstrings post_pos
              (List.rev_append f (List.rev b));
            set_floating_docstrings pre_pos (List.rev f);
            set_pre_extra_docstrings pre_pos (List.rev a);
            set_pre_docstrings pre_pos b
        | Before(a, f, b), BlankLine ->
            set_post_docstrings post_pos (List.rev a);
            set_post_extra_docstrings post_pos
              (List.rev_append f (List.rev b));
            set_floating_docstrings pre_pos
              (List.rev_append f (List.rev b));
            set_pre_extra_docstrings pre_pos (List.rev a)
    in
    let rec loop lines docs lexbuf =
      match token_with_comments lexbuf with
      | COMMENT (s, loc) ->
          add_comment (s, loc);
          let lines' =
            match lines with
            | NoLine -> NoLine
            | NewLine -> NoLine
            | BlankLine -> BlankLine
          in
          loop lines' docs lexbuf
      | EOL ->
          let lines' =
            match lines with
            | NoLine -> NewLine
            | NewLine -> BlankLine
            | BlankLine -> BlankLine
          in
          loop lines' docs lexbuf
      | HASH when at_bol lexbuf -> 
          interpret_directive lexbuf 
            (fun lexbuf -> loop lines docs lexbuf)
            (fun token -> sharp_look_ahead := Some token; HASH)            
      | DOCSTRING doc ->
          Docstrings.register doc;
          add_docstring_comment doc;
          let docs' =
            if Docstrings.docstring_body doc = "/*" then
              match docs with
              | Initial -> Before([], [doc], [])
              | After a -> Before (a, [doc], [])
              | Before(a, f, b) -> Before(a, doc :: b @ f, [])
            else
              match docs, lines with
              | Initial, (NoLine | NewLine) -> After [doc]
              | Initial, BlankLine -> Before([], [], [doc])
              | After a, (NoLine | NewLine) -> After (doc :: a)
              | After a, BlankLine -> Before (a, [], [doc])
              | Before(a, f, b), (NoLine | NewLine) -> Before(a, f, doc :: b)
              | Before(a, f, b), BlankLine -> Before(a, b @ f, [doc])
          in
          loop NoLine docs' lexbuf
      | tok ->
          attach lines docs (lexeme_start_p lexbuf);
          tok
    in
      match !sharp_look_ahead with
      | None -> 
          loop NoLine Initial lexbuf
      | Some token ->
          sharp_look_ahead := None ;
          token

  let init () =
    sharp_look_ahead := None;
    update_if_then_else  Dir_out;
    is_in_string := false;
    comment_start_loc := [];
    comment_list := [];
    match !preprocessor with
    | None -> ()
    | Some (init, _preprocess) -> init ()

  let rec filter_directive pos   acc lexbuf : (int * int ) list =
    match token_with_comments lexbuf with
    | HASH when at_bol lexbuf ->
        (* ^[start_pos]#if ... #then^[end_pos] *)
        let start_pos = Lexing.lexeme_start lexbuf in 
        interpret_directive lexbuf 
          (fun lexbuf -> 
             filter_directive 
               (Lexing.lexeme_end lexbuf)
               ((pos, start_pos) :: acc)
               lexbuf
          
          )
          (fun _token -> filter_directive pos acc lexbuf  )
    | EOF -> (pos, Lexing.lexeme_end lexbuf) :: acc
    | _ -> filter_directive pos  acc lexbuf

  let filter_directive_from_lexbuf lexbuf = 
    List.rev (filter_directive 0 [] lexbuf )

  let set_preprocessor init preprocess =
    escaped_newlines := true;
    preprocessor := Some (init, preprocess)


# 3106 "ml/lexer.ml"

end
module Parse : sig 
#1 "parse.mli"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(** Entry points in the parser *)

val implementation : Lexing.lexbuf -> Parsetree.structure
val interface : Lexing.lexbuf -> Parsetree.signature
val toplevel_phrase : Lexing.lexbuf -> Parsetree.toplevel_phrase
val use_file : Lexing.lexbuf -> Parsetree.toplevel_phrase list
val core_type : Lexing.lexbuf -> Parsetree.core_type
val expression : Lexing.lexbuf -> Parsetree.expression
val pattern : Lexing.lexbuf -> Parsetree.pattern

end = struct
#1 "parse.ml"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* Entry points in the parser *)

(* Skip tokens to the end of the phrase *)

let rec skip_phrase lexbuf =
  try
    match Lexer.token lexbuf with
      Parser.SEMISEMI | Parser.EOF -> ()
    | _ -> skip_phrase lexbuf
  with
    | Lexer.Error (Lexer.Unterminated_comment _, _)
    | Lexer.Error (Lexer.Unterminated_string, _)
    | Lexer.Error (Lexer.Unterminated_string_in_comment _, _)
    | Lexer.Error (Lexer.Illegal_character _, _) -> skip_phrase lexbuf
;;

let maybe_skip_phrase lexbuf =
  if Parsing.is_current_lookahead Parser.SEMISEMI
  || Parsing.is_current_lookahead Parser.EOF
  then ()
  else skip_phrase lexbuf

let wrap parsing_fun lexbuf =
  try
    Docstrings.init ();
    Lexer.init ();
    let ast = parsing_fun Lexer.token lexbuf in
    Parsing.clear_parser();
    Docstrings.warn_bad_docstrings ();
    ast
  with
  | Lexer.Error(Lexer.Illegal_character _, _) as err
    when !Location.input_name = "//toplevel//"->
      skip_phrase lexbuf;
      raise err
  | Syntaxerr.Error _ as err
    when !Location.input_name = "//toplevel//" ->
      maybe_skip_phrase lexbuf;
      raise err
  | Parsing.Parse_error | Syntaxerr.Escape_error ->
      let loc = Location.curr lexbuf in
      if !Location.input_name = "//toplevel//"
      then maybe_skip_phrase lexbuf;
      raise(Syntaxerr.Error(Syntaxerr.Other loc))

let implementation = wrap Parser.implementation
and interface = wrap Parser.interface
and toplevel_phrase = wrap Parser.toplevel_phrase
and use_file = wrap Parser.use_file
and core_type = wrap Parser.parse_core_type
and expression = wrap Parser.parse_expression
and pattern = wrap Parser.parse_pattern

end
module Bspack_main : sig 
#1 "bspack_main.mli"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)


val read_lines : string -> string  -> string list 
(* example 
   {[ 
     Line_process.read_lines "." "./tools/tools.mllib" 
   ]} 

   FIXME: we can only concat (dir/file) not (dir/dir)
   {[
     Filename.concat "/bb/x/" "/bb/x/";;
   ]}
*)


end = struct
#1 "bspack_main.ml"
(* Copyright (C) 2015-2016 Bloomberg Finance L.P.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition to the permissions granted to you by the LGPL, you may combine
 * or link a "work that uses the Library" with a publicly distributed version
 * of this file to produce a combined library or application, then distribute
 * that combined work under the terms of your choosing, with no requirement
 * to comply with the obligations normally placed on you by section 4 of the
 * LGPL version 3 (or the corresponding section of a later version of the LGPL
 * should you choose to use a later version).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)

module L_string_set = Set.Make (String)
(* lexical order *)

let ( @> ) (b, v) acc = if b then v :: acc else acc

let preprocess_to_buffer fn (str : string) (oc : Buffer.t) : unit =
  let lexbuf = Lexing.from_string str in
  Lexer.init ();
  Location.init lexbuf fn;
  let segments = Lexer.filter_directive_from_lexbuf lexbuf in
  Ext_list.iter segments (fun (start, pos) ->
      Buffer.add_substring oc str start (pos - start))

let verify_valid_ml (str : string) =
  try
    ignore @@ Parse.implementation (Lexing.from_string str);
    true
  with _ -> false

(* same as {!preprocess_to_buffer} except writing to channel directly *)
let preprocess_string fn (str : string) oc =
  let lexbuf = Lexing.from_string str in
  Lexer.init ();
  Location.init lexbuf fn;
  let segments = Lexer.filter_directive_from_lexbuf lexbuf in
  Ext_list.iter segments (fun (start, pos) ->
      output_substring oc str start (pos - start))

let ( // ) = Filename.concat

let rec process_line cwd filedir line =
  let line = Ext_string.trim line in
  let len = String.length line in
  if len = 0 then []
  else
    match line.[0] with
    | '#' -> []
    | _ -> (
        let segments =
          Ext_string.split_by ~keep_empty:false
            (fun x -> x = ' ' || x = '\t')
            line
        in
        match segments with
        | [ "include"; path ] ->
            (* prerr_endline path;  *)
            read_lines cwd (filedir // path)
        | [ x ] ->
            let ml = (filedir // x) ^ ".ml" in
            let mli = (filedir // x) ^ ".mli" in
            let ml_exists, mli_exists =
              (Sys.file_exists ml, Sys.file_exists mli)
            in
            if (not ml_exists) && not mli_exists then (
              prerr_endline ((filedir // x) ^ " not exists");
              [])
            else (ml_exists, ml) @> (mli_exists, mli) @> []
        | _ -> Ext_fmt.failwithf ~loc:__LOC__ "invalid line %s" line)

and read_lines (cwd : string) (file : string) : string list =
  Ext_list.fold_left (Ext_io.rev_lines_of_file file) [] (fun acc f ->
      let filedir = Filename.dirname file in
      let extras = process_line cwd filedir f in
      Ext_list.append extras acc)

let implementation sourcefile =
  let content = Ext_io.load_file sourcefile in
  let ast =
    let oldname = !Location.input_name in
    Location.input_name := sourcefile;
    let lexbuf = Lexing.from_string content in
    Location.init lexbuf sourcefile;
    match Parse.implementation lexbuf with
    | exception e ->
        Location.input_name := oldname;
        raise e
    | ast ->
        Location.input_name := oldname;
        ast
  in
  (ast, content)

let interface sourcefile =
  let content = Ext_io.load_file sourcefile in
  let ast =
    let oldname = !Location.input_name in
    Location.input_name := sourcefile;
    let lexbuf = Lexing.from_string content in
    Location.init lexbuf sourcefile;
    match Parse.interface lexbuf with
    | exception e ->
        Location.input_name := oldname;
        raise e
    | ast ->
        Location.input_name := oldname;
        ast
  in
  (ast, content)

let emit_line_directive = ref true

let emit out_chan name =
  if !emit_line_directive then (
    output_string out_chan "#1 \"";
    (*Note here we do this is mostly to avoid leaking user's
      information, like private path, in the future, we can have
      a flag
    *)
    output_string out_chan (Filename.basename name);
    output_string out_chan "\"\n")

let decorate_module ?(module_bound = true) out_chan base mli_name ml_name
    mli_content ml_content =
  if module_bound then (
    let base = Ext_string.capitalize_ascii base in
    output_string out_chan "module ";
    output_string out_chan base;
    output_string out_chan " : sig \n";
    emit out_chan mli_name;
    preprocess_string mli_name mli_content out_chan;
    output_string out_chan "\nend = struct\n";
    emit out_chan ml_name;
    preprocess_string ml_name ml_content out_chan;
    output_string out_chan "\nend\n")
  else (
    output_string out_chan "include (struct\n";
    emit out_chan ml_name;
    preprocess_string ml_name ml_content out_chan;
    output_string out_chan "\nend : sig \n";
    emit out_chan mli_name;
    preprocess_string mli_name mli_content out_chan;
    output_string out_chan "\nend)")

let decorate_module_only ?(check : unit option) ?(module_bound = true) out_chan
    base ml_name ml_content =
  if module_bound then (
    let base = Ext_string.capitalize_ascii base in
    output_string out_chan "module ";
    output_string out_chan base;
    output_string out_chan "\n= struct\n");
  emit out_chan ml_name;
  if check <> None then (
    let buf = Buffer.create 2000 in
    preprocess_to_buffer ml_name ml_content buf;
    let str = Buffer.contents buf in
    if not @@ verify_valid_ml str then
      failwith (ml_name ^ " can not be a valid ml module")
    else output_string out_chan str)
  else preprocess_string ml_name ml_content out_chan;
  if module_bound then output_string out_chan "\nend\n"

(** recursive module is not good for performance, here module type only 
    has to be pure types otherwise it would not compile any way
*)
let decorate_interface_only out_chan base mli_name mli_content =
  output_string out_chan "(** Interface as module  *)\n";
  decorate_module_only out_chan base mli_name mli_content ~check:()

(** set mllib *)
let mllib = ref None

let set_string s = mllib := Some s

let batch_files = ref []

let collect_file name = batch_files := name :: !batch_files

let output_file = ref None

let set_output file = output_file := Some file

let header_option = ref false

type main_module = { modulename : string; export : bool }

(** set bs-main*)
let main_module : main_module option ref = ref None

let set_main_module modulename =
  main_module := Some { modulename; export = false }

let set_main_export modulename =
  main_module := Some { modulename; export = true }

let set_mllib_file = ref false

let prelude = ref None

let set_prelude f =
  if Sys.file_exists f then prelude := Some f
  else raise (Arg.Bad ("file " ^ f ^ " don't exist "))

let prelude_str = ref None

let set_prelude_str f = prelude_str := Some f

(**
   {[
     # process_include "ghsogh?a,b,c";;
     - : [> `Dir of string | `Dir_with_excludes of string * string list ] =
     `Dir_with_excludes ("ghsogh", ["a"; "b"; "c"])
                        # process_include "ghsogh?a";;
     - : [> `Dir of string | `Dir_with_excludes of string * string list ] =
     `Dir_with_excludes ("ghsogh", ["a"])
   ]}
*)

(* type dir_spec =  *)
(*   [ `Dir of string | `Dir_with_excludes of string * string list ] *)

let cwd = Sys.getcwd ()

let normalize s = Ext_path.normalize_absolute_path (Ext_path.combine cwd s)

type dir_spec = Bspack_ast_extract.dir_spec

let process_include s : dir_spec =
  let i = Ext_string.rindex_neg s '?' in
  if i < 0 then { dir = normalize s; excludes = [] }
  else
    let dir = String.sub s 0 i in
    {
      dir = normalize dir;
      excludes =
        Ext_string.split (String.sub s (i + 1) (String.length s - i - 1)) ',';
    }

let deduplicate_dirs (xs : dir_spec list) =
  let set : dir_spec Hash_string.t = Hash_string.create 64 in
  Ext_list.filter xs (fun ({ dir; excludes = new_excludes } as y) ->
      match Hash_string.find_opt set dir with
      | None ->
          Hash_string.add set dir y;
          true
      | Some x ->
          x.excludes <- new_excludes @ x.excludes;
          false)

let includes : _ list ref = ref []

let add_include dir = includes := process_include dir :: !includes

let exclude_modules = ref []

let add_exclude module_ = exclude_modules := module_ :: !exclude_modules

let no_implicit_include = ref false

let alias_map = Hash_string.create 0

let alias_map_rev = Hash_string.create 0

(**
   {[
     A -> B 
       A1 -> B
   ]}
   print 
   {[

     module A = B
     module A1 = B  
   ]}   
   We don't suppport 
   {[
     A -> B 
       A -> C
   ]}
*)
let alias_module s =
  match Ext_string.split s '=' with
  | [ a; b ] ->
      (* Error checking later*)
      if Hash_string.mem alias_map a then
        raise (Arg.Bad ("duplicated module alias " ^ a))
      else (
        Hash_string.add alias_map_rev b a;
        Hash_string.add alias_map a b)
  | _ -> raise (Arg.Bad "invalid module alias format like A=B")

let undefine_symbol (s : string) = Lexer.remove_directive_built_in_value s

let define_symbol (s : string) =
  match Ext_string.split ~keep_empty:true s '=' with
  | [ key; v ] ->
      if not @@ Lexer.define_key_value key v then
        raise (Arg.Bad ("illegal definition: " ^ s))
  | _ -> raise (Arg.Bad ("illegal definition: " ^ s))

let specs : (string * Arg.spec * string) list =
  [
    ("-bs-loc", Arg.Set emit_line_directive, " Add # linum filename directive");
    ( "-bs-no-implicit-include",
      Arg.Set no_implicit_include,
      " Not including cwd as search path" );
    ( "-prelude-str",
      Arg.String set_prelude_str,
      " Set a prelude string, (before -prelude) option" );
    ( "-module-alias",
      Arg.String alias_module,
      " -module-alis A=B, whenever need A,replace it with B" );
    ( "-prelude",
      Arg.String set_prelude,
      " Set a prelude file, literally copy into the beginning" );
    ("-bs-mllib", Arg.String set_string, " Files collected from mllib");
    ( "-bs-MD",
      Arg.Set set_mllib_file,
      " Log files into mllib(only effective under -bs-main mode)" );
    ("-o", Arg.String set_output, " Set output file (default to stdout)");
    ("-with-header", Arg.Set header_option, " with header of time stamp");
    ( "-bs-exclude-I",
      Arg.String add_exclude,
      " don't read and pack such modules from -I (in the future, we should \
       detect conflicts in mllib or commandline) " );
    ("-bs-main", Arg.String set_main_module, " set the main entry module");
    ( "-main-export",
      Arg.String set_main_export,
      " Set the main module and respect its exports" );
    ("-I", Arg.String add_include, " add dir to search path");
    ("-U", Arg.String undefine_symbol, " Undefine a symbol when bspacking");
    ("-D", Arg.String define_symbol, " Define a symbol when bspacking");
  ]

let anonymous filename = collect_file filename

let usage = "Usage: bspack <options> <files>\nOptions are:"

let () =
  try
    Arg.parse specs anonymous usage;
    let command_files = !batch_files in
    let mllib = !mllib in
    (* emit code now *)
    let out_chan =
      lazy
        (match !output_file with
        | None -> stdout
        | Some file -> open_out_bin file)
    in
    let emit_header out_chan =
      let local_time = Unix.(localtime (gettimeofday ())) in
      if !header_option then
        output_string out_chan
          (Printf.sprintf "(** Generated by bspack %02d/%02d-%02d:%02d *)\n"
             (local_time.tm_mon + 1) local_time.tm_mday local_time.tm_hour
             local_time.tm_min);
      (match !prelude_str with
      | None -> ()
      | Some s ->
          output_string out_chan s;
          output_string out_chan "\n");
      match !prelude with
      | None -> ()
      | Some f ->
          output_string out_chan (Ext_io.load_file f);
          output_string out_chan "\n"
    in
    let close_out_chan out_chan =
      if out_chan != stdout then close_out out_chan
    in
    let files =
      Ext_list.append
        (match mllib with Some s -> read_lines (Sys.getcwd ()) s | None -> [])
        command_files
    in

    match (!main_module, files) with
    | Some _, _ :: _ ->
        Ext_fmt.failwithf ~loc:__LOC__
          "-bs-main conflicts with other flags [ %s ]"
          (String.concat ", " files)
    | Some { modulename = main_module; export }, [] -> (
        let excludes =
          match !exclude_modules with
          | [] -> []
          | xs -> Ext_list.flat_map xs (fun x -> [ x ^ ".ml"; x ^ ".mli" ])
        in
        let extra_dirs =
          deduplicate_dirs
          @@
          if not !no_implicit_include then
            { dir = cwd; excludes = [] } :: !includes
          else !includes
        in
        let ast_table, tasks =
          Bspack_ast_extract.collect_from_main ~excludes ~extra_dirs ~alias_map
            Format.err_formatter
            (fun _ppf sourcefile -> lazy (implementation sourcefile))
            (fun _ppf sourcefile -> lazy (interface sourcefile))
            (fun (lazy (stru, _)) -> stru)
            (fun (lazy (sigi, _)) -> sigi)
            main_module
        in
        if Queue.is_empty tasks then
          raise
            (Arg.Bad
               (main_module ^ " does not pull in any libs, maybe wrong input"));
        let out_chan = Lazy.force out_chan in
        let collect_module_by_filenames = !set_mllib_file in
        let collection_modules = Queue.create () in
        let count = ref 0 in
        let task_length = Queue.length tasks in
        emit_header out_chan;
        Bspack_ast_extract.handle_queue tasks ast_table
          (fun base ml_name (lazy (_, ml_content)) ->
            incr count;
            if collect_module_by_filenames then
              Queue.add ml_name collection_modules;
            let module_bound = (not export) || task_length > !count in
            decorate_module_only ~module_bound out_chan base ml_name ml_content;
            let aliased = Ext_string.capitalize_ascii base in
            Hash_string.find_all alias_map_rev aliased
            |> List.iter (fun s ->
                   output_string out_chan
                     (Printf.sprintf "module %s = %s \n" s aliased)))
          (fun base mli_name (lazy (_, mli_content)) ->
            incr count;
            if collect_module_by_filenames then
              Queue.add mli_name collection_modules;

            decorate_interface_only out_chan base mli_name mli_content;
            let aliased = Ext_string.capitalize_ascii base in
            Hash_string.find_all alias_map_rev aliased
            |> List.iter (fun s ->
                   output_string out_chan
                     (Printf.sprintf "module %s = %s \n" s aliased)))
          (fun base mli_name ml_name (lazy (_, mli_content))
               (lazy (_, ml_content)) ->
            incr count;
            (*TODO: assume mli_name, ml_name are in the same dir,
              Needs to be addressed
            *)
            if collect_module_by_filenames then (
              Queue.add ml_name collection_modules;
              Queue.add mli_name collection_modules);
            (* if export
                print it as
                {[inclue (struct end : sig end)]}
            *)
            let module_bound = (not export) || task_length > !count in
            decorate_module ~module_bound out_chan base mli_name ml_name
              mli_content ml_content;
            let aliased = Ext_string.capitalize_ascii base in
            Hash_string.find_all alias_map_rev aliased
            |> List.iter (fun s ->
                   output_string out_chan
                     (Printf.sprintf "module %s = %s \n" s aliased)));
        close_out_chan out_chan;
        if !set_mllib_file then
          match !output_file with
          | None -> ()
          | Some file ->
              let output = file ^ ".d" in
              let sorted_dep_queue =
                Queue.fold
                  (fun acc collection_module ->
                    L_string_set.add
                      ((*FIXME: now we normalized path,
                         we need a beautiful output too for relative path
                         The relative path should be also be normalized..
                       *)
                       Filename.concat
                         (Ext_path.rel_normalized_absolute_path ~from:cwd
                            (Filename.dirname collection_module))
                         (Filename.basename collection_module))
                      (* collection_module  *)
                      acc)
                  L_string_set.empty collection_modules
              in
              Ext_io.write_file output
                (L_string_set.fold
                   (fun dep acc -> acc ^ file ^ ": " ^ dep ^ "\n")
                   sorted_dep_queue
                   ""
                   (* (file ^ ": " ) *)
                   (* collection_modules *)))
    | None, _ ->
        let ast_table =
          Bspack_ast_extract.collect_ast_map Format.err_formatter files
            (fun _ppf sourcefile -> implementation sourcefile)
            (fun _ppf sourcefile -> interface sourcefile)
        in
        let tasks = Bspack_ast_extract.sort fst fst ast_table in
        let out_chan = Lazy.force out_chan in
        emit_header out_chan;
        Bspack_ast_extract.handle_queue tasks ast_table
          (fun base ml_name (_, ml_content) ->
            decorate_module_only out_chan base ml_name ml_content)
          (fun base mli_name (_, mli_content) ->
            decorate_interface_only out_chan base mli_name mli_content)
          (fun base mli_name ml_name (_, mli_content) (_, ml_content) ->
            decorate_module out_chan base mli_name ml_name mli_content
              ml_content);
        close_out_chan out_chan
  with x ->
    Location.report_exception Format.err_formatter x;
    exit 2

end
