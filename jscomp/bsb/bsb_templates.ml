(* This file has been generated by ocp-ocamlres *)
let root = OCamlRes.Res.([
  Dir  ("basic", [
    Dir  ("src", [
      File  ("demo.ml",
        "\n\
         \n\
         let () = Js.log \"Hello, BuckleScript\"")]) ;
    File  ("README.md",
      "\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Watch\n\
       \n\
       ```\n\
       npm run watch\n\
       ```\n\
       \n\
       \n\
       # Editor\n\
       If you use `vscode`, Press `Windows + Shift + B` it will build automatically") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"watch\": \"bsb -make-world -w\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bs-platform\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }") ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": {\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  },\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"bs-dependencies\": [\n\
      \      // add your bs-dependencies here \n\
      \  ],\n\
      \  \"warnings\": {\n\
      \    \"error\" : \"+101\"\n\
      \  },\n\
      \  \"refmt\": 3\n\
       }\n\
       ") ;
    Dir  (".vscode", [
      File  ("tasks.json",
        "{\n\
        \    \"version\": \"${bsb:proj-version}\",\n\
        \    \"command\": \"npm\",\n\
        \    \"options\": {\n\
        \        \"cwd\": \"${workspaceRoot}\"\n\
        \    },\n\
        \    \"isShellCommand\": true,\n\
        \    \"args\": [\n\
        \        \"run\",\n\
        \        \"watch\"\n\
        \    ],\n\
        \    \"showOutput\": \"always\",\n\
        \    \"isBackground\": true,\n\
        \    \"problemMatcher\": {\n\
        \        \"fileLocation\": \"absolute\",\n\
        \        \"owner\": \"ocaml\",\n\
        \        \"watching\": {\n\
        \            \"activeOnStart\": false,\n\
        \            \"beginsPattern\": \">>>> Start compiling\",\n\
        \            \"endsPattern\": \">>>> Finish compiling\"\n\
        \        },\n\
        \        \"pattern\": [\n\
        \            {\n\
        \                \"regexp\": \"^File \\\"(.*)\\\", line (\\\\d+)(?:, characters (\\\\d+)-(\\\\d+))?:$\",\n\
        \                \"file\": 1,\n\
        \                \"line\": 2,\n\
        \                \"column\": 3,\n\
        \                \"endColumn\": 4\n\
        \            },\n\
        \            {\n\
        \                \"regexp\": \"^(?:(?:Parse\\\\s+)?(Warning|[Ee]rror)(?:\\\\s+\\\\d+)?:)?\\\\s+(.*)$\",\n\
        \                \"severity\": 1,\n\
        \                \"message\": 2,\n\
        \                \"loop\": true\n\
        \            }\n\
        \        ]\n\
        \    }\n\
         }")]) ;
    File  (".gitignore",
      "*.exe\n\
       *.obj\n\
       *.out\n\
       *.compile\n\
       *.native\n\
       *.byte\n\
       *.cmo\n\
       *.annot\n\
       *.cmi\n\
       *.cmx\n\
       *.cmt\n\
       *.cmti\n\
       *.cma\n\
       *.a\n\
       *.cmxa\n\
       *.obj\n\
       *~\n\
       *.annot\n\
       *.cmj\n\
       *.bak\n\
       lib/bs\n\
       *.mlast\n\
       *.mliast\n\
       .vscode\n\
       .merlin\n\
       .bsb.lock")]) ;
  Dir  ("basic-reason", [
    Dir  ("src", [
      File  ("Demo.re",
        "Js.log(\"Hello, BuckleScript and Reason!\");\n\
         ")]) ;
    File  ("README.md",
      "# Basic Reason Template\n\
       \n\
       Hello! This project allows you to quickly get started with Reason and BuckleScript. If you wanted a more sophisticated version, try the `react` template (`bsb -theme react -init .`).\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Build + Watch\n\
       \n\
       ```\n\
       npm run start\n\
       ```\n\
       \n\
       \n\
       # Editor\n\
       If you use `vscode`, Press `Windows + Shift + B` it will build automatically\n\
       ") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"start\": \"bsb -make-world -w\",\n\
      \    \"clean\": \"bsb -clean-world\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bs-platform\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }\n\
       ") ;
    File  ("bsconfig.json",
      "// This is the configuration file used by BuckleScript's build system bsb. Its documentation lives here: http://bucklescript.github.io/bucklescript/docson/#build-schema.json\n\
       // BuckleScript comes with its own parser for bsconfig.json, which is normal JSON, with the extra support of comments and trailing commas.\n\
       {\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": {\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  },\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"bs-dependencies\": [\n\
      \      // add your dependencies here. You'd usually install them normally through `npm install my-dependency`. If my-dependency has a bsconfig.json too, then everything will work seamlessly.\n\
      \  ],\n\
      \  \"warnings\": {\n\
      \    \"error\" : \"+101\"\n\
      \  },\n\
      \  \"namespace\": true,\n\
      \  \"refmt\": 3\n\
       }\n\
       ") ;
    Dir  (".vscode", [
      File  ("tasks.json",
        "{\n\
        \    \"version\": \"${bsb:proj-version}\",\n\
        \    \"command\": \"npm\",\n\
        \    \"options\": {\n\
        \      \"cwd\": \"${workspaceRoot}\"\n\
        \    },\n\
        \    \"type\": \"shell\",\n\
        \    \"args\": [\"run\", \"start\"],\n\
        \    \"presentation\": {\n\
        \      \"echo\": true,\n\
        \      \"reveal\": \"always\",\n\
        \      \"focus\": false,\n\
        \      \"panel\": \"shared\"\n\
        \    },\n\
        \    \"isBackground\": true,\n\
        \    \"problemMatcher\": {\n\
        \      \"fileLocation\": \"absolute\",\n\
        \      \"owner\": \"ocaml\",\n\
        \      \"background\": {\n\
        \        \"activeOnStart\": false,\n\
        \        \"beginsPattern\": \">>>> Start compiling\",\n\
        \        \"endsPattern\": \">>>> Finish compiling\"\n\
        \      },\n\
        \      \"pattern\": [\n\
        \        {\n\
        \          \"regexp\":\n\
        \            \"^File \\\"(.*)\\\", line (\\\\d+)(?:, characters (\\\\d+)-(\\\\d+))?:$\",\n\
        \          \"file\": 1,\n\
        \          \"line\": 2,\n\
        \          \"column\": 3,\n\
        \          \"endColumn\": 4\n\
        \        },\n\
        \        {\n\
        \          \"regexp\":\n\
        \            \"^(?:(?:Parse\\\\s+)?(Warning|[Ee]rror)(?:\\\\s+\\\\d+)?:)?\\\\s+(.*)$\",\n\
        \          \"severity\": 1,\n\
        \          \"message\": 2,\n\
        \          \"loop\": true\n\
        \        }\n\
        \      ]\n\
        \    }\n\
        \  }\n\
         ")]) ;
    File  (".gitignore",
      ".DS_Store\n\
       .merlin\n\
       .bsb.lock\n\
       npm-debug.log\n\
       /lib/bs/\n\
       /node_modules/\n\
       ")]) ;
  Dir  ("generator", [
    Dir  ("src", [
      File  ("test.cpp.ml",
        "\n\
         (* \n\
         #define FS_VAL(name,ty) external name : ty = \"\" [@@bs.module \"fs\"]\n\
         \n\
         \n\
         FS_VAL(readdirSync, string -> string array)\n\
        \ *)\n\
         \n\
         \n\
        \ let ocaml = OCAML") ;
      File  ("demo.ml",
        "\n\
         \n\
         let () = Js.log \"Hello, BuckleScript\"")]) ;
    File  ("README.md",
      "\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Watch\n\
       \n\
       ```\n\
       npm run watch\n\
       ```\n\
       \n\
       \n\
       # Editor\n\
       If you use `vscode`, Press `Windows + Shift + B` it will build automatically") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"watch\": \"bsb -make-world -w\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bs-platform\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }") ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"sources\": {\n\
      \    \"dir\": \"src\",\n\
      \    \"generators\": [{\n\
      \      \"name\": \"cpp\",\n\
      \      \"edge\": [\"test.ml\", \":\", \"test.cpp.ml\"]\n\
      \    }],\n\
      \    \"subdirs\": true  \n\
      \  },\n\
      \  \"generators\": [{\n\
      \    \"name\" : \"cpp\",\n\
      \    \"command\": \"sed 's/OCAML/3/' $in > $out\"\n\
      \  }],\n\
      \  \"bs-dependencies\" : [\n\
      \  ]\n\
       }") ;
    File  (".gitignore",
      "*.exe\n\
       *.obj\n\
       *.out\n\
       *.compile\n\
       *.native\n\
       *.byte\n\
       *.cmo\n\
       *.annot\n\
       *.cmi\n\
       *.cmx\n\
       *.cmt\n\
       *.cmti\n\
       *.cma\n\
       *.a\n\
       *.cmxa\n\
       *.obj\n\
       *~\n\
       *.annot\n\
       *.cmj\n\
       *.bak\n\
       lib/bs\n\
       *.mlast\n\
       *.mliast\n\
       .vscode\n\
       .merlin\n\
       .bsb.lock")]) ;
  Dir  ("minimal", [
    Dir  ("src", [ File  ("main.ml", "")]) ;
    File  ("README.md",
      "\n\
      \  # ${bsb:name}") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"start\": \"bsb -make-world -w\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bs-platform\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }") ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"sources\": {\n\
      \      \"dir\": \"src\",\n\
      \      \"subdirs\": true\n\
      \  }\n\
       }") ;
    File  (".gitignore",
      ".DS_Store\n\
       .merlin\n\
       .bsb.lock\n\
       npm-debug.log\n\
       /lib/bs/\n\
       /node_modules/")]) ;
  Dir  ("node", [
    Dir  ("src", [
      File  ("demo.ml",
        "\n\
         \n\
         let () = Js.log \"Hello, BuckleScript\"")]) ;
    File  ("README.md",
      "\n\
       \n\
       # Build\n\
       ```\n\
       npm run build\n\
       ```\n\
       \n\
       # Watch\n\
       \n\
       ```\n\
       npm run watch\n\
       ```\n\
       \n\
       \n\
       # Editor\n\
       If you use `vscode`, Press `Windows + Shift + B` it will build automatically\n\
       ") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"watch\": \"bsb -make-world -w\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"devDependencies\": {\n\
      \    \"bs-platform\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }") ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"sources\": {\n\
      \      \"dir\": \"src\",\n\
      \      \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": {\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  },\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"bs-dependencies\": [\n\
      \   ]\n\
       }") ;
    File  (".gitignore",
      "*.exe\n\
       *.obj\n\
       *.out\n\
       *.compile\n\
       *.native\n\
       *.byte\n\
       *.cmo\n\
       *.annot\n\
       *.cmi\n\
       *.cmx\n\
       *.cmt\n\
       *.cmti\n\
       *.cma\n\
       *.a\n\
       *.cmxa\n\
       *.obj\n\
       *~\n\
       *.annot\n\
       *.cmj\n\
       *.bak\n\
       lib/bs\n\
       *.mlast\n\
       *.mliast\n\
       .vscode\n\
       .merlin\n\
       .bsb.lock")]) ;
  Dir  ("react", [
    File  ("webpack.config.js",
      "const path = require('path');\n\
       const outputDir = path.join(__dirname, \"build/\");\n\
       \n\
       const isProd = process.env.NODE_ENV === 'production';\n\
       \n\
       module.exports = {\n\
      \  entry: './src/Index.bs.js',\n\
      \  mode: isProd ? 'production' : 'development',\n\
      \  output: {\n\
      \    path: outputDir,\n\
      \    publicPath: outputDir,\n\
      \    filename: 'Index.js',\n\
      \  },\n\
       };\n\
       ") ;
    Dir  ("src", [
      File  ("Index.re",
        "ReactDOMRe.renderToElementWithId(<Component1 message=\"Hello!\" />, \"index1\");\n\
         \n\
         ReactDOMRe.renderToElementWithId(<Component2 greeting=\"Hello!\" />, \"index2\");\n\
         ") ;
      File  ("index.html",
        "<!DOCTYPE html>\n\
         <html lang=\"en\">\n\
         <head>\n\
        \  <meta charset=\"UTF-8\">\n\
        \  <title>ReasonReact Examples</title>\n\
         </head>\n\
         <body>\n\
        \  Component 1:\n\
        \  <div id=\"index1\"></div>\n\
        \  Component 2:\n\
        \  <div id=\"index2\"></div>\n\
         \n\
        \  <script src=\"../build/Index.js\"></script>\n\
         </body>\n\
         </html>\n\
         ") ;
      File  ("Component2.re",
        "/* State declaration */\n\
         type state = {\n\
        \  count: int,\n\
        \  show: bool,\n\
         };\n\
         \n\
         /* Action declaration */\n\
         type action =\n\
        \  | Click\n\
        \  | Toggle;\n\
         \n\
         /* Component template declaration.\n\
        \   Needs to be **after** state and action declarations! */\n\
         let component = ReasonReact.reducerComponent(\"Example\");\n\
         \n\
         /* greeting and children are props. `children` isn't used, therefore ignored.\n\
        \   We ignore it by prepending it with an underscore */\n\
         let make = (~greeting, _children) => {\n\
        \  /* spread the other default fields of component here and override a few */\n\
        \  ...component,\n\
         \n\
        \  initialState: () => {count: 0, show: true},\n\
         \n\
        \  /* State transitions */\n\
        \  reducer: (action, state) =>\n\
        \    switch (action) {\n\
        \    | Click => ReasonReact.Update({...state, count: state.count + 1})\n\
        \    | Toggle => ReasonReact.Update({...state, show: ! state.show})\n\
        \    },\n\
         \n\
        \  render: self => {\n\
        \    let message =\n\
        \      \"You've clicked this \" ++ string_of_int(self.state.count) ++ \" times(s)\";\n\
        \    <div>\n\
        \      <button onClick=(_event => self.send(Click))>\n\
        \        (ReasonReact.string(message))\n\
        \      </button>\n\
        \      <button onClick=(_event => self.send(Toggle))>\n\
        \        (ReasonReact.string(\"Toggle greeting\"))\n\
        \      </button>\n\
        \      (self.state.show ? ReasonReact.string(greeting) : ReasonReact.null)\n\
        \    </div>;\n\
        \  },\n\
         };\n\
         ") ;
      File  ("Component1.re",
        "/* This is the basic component. */\n\
         let component = ReasonReact.statelessComponent(\"Page\");\n\
         \n\
         /* Your familiar handleClick from ReactJS. This mandatorily takes the payload,\n\
        \   then the `self` record, which contains state (none here), `handle`, `reduce`\n\
        \   and other utilities */\n\
         let handleClick = (_event, _self) => Js.log(\"clicked!\");\n\
         \n\
         /* `make` is the function that mandatorily takes `children` (if you want to use\n\
        \   `JSX). `message` is a named argument, which simulates ReactJS props. Usage:\n\
         \n\
        \   `<Page message=\"hello\" />`\n\
         \n\
        \   Which desugars to\n\
         \n\
        \   `ReasonReact.element(Page.make(~message=\"hello\", [||]))` */\n\
         let make = (~message, _children) => {\n\
        \  ...component,\n\
        \  render: self =>\n\
        \    <div onClick=(self.handle(handleClick))>\n\
        \      (ReasonReact.string(message))\n\
        \    </div>,\n\
         };\n\
         ")]) ;
    File  ("README.md",
      "# ${bsb:name}\n\
       \n\
       ## Run Project\n\
       \n\
       ```sh\n\
       npm install\n\
       npm start\n\
       # in another tab\n\
       npm run webpack\n\
       ```\n\
       \n\
       After you see the webpack compilation succeed (the `npm run webpack` step), open up `src/index.html` (**no server needed!**). Then modify whichever `.re` file in `src` and refresh the page to see the changes.\n\
       \n\
       **For more elaborate ReasonReact examples**, please see https://github.com/reasonml-community/reason-react-example\n\
       \n\
       ## Build for Production\n\
       \n\
       ```sh\n\
       npm run build\n\
       npm run webpack:production\n\
       ```\n\
       \n\
       This will replace the development artifact `build/Index.js` for an optimized version.\n\
       \n\
       **To enable dead code elimination**, change `bsconfig.json`'s `package-specs` `module` from `\"commonjs\"` to `\"es6\"`. Then re-run the above 2 commands. This will allow Webpack to remove unused code.\n\
       ") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"start\": \"bsb -make-world -w\",\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\
      \    \"webpack\": \"webpack -w\",\n\
      \    \"webpack:production\": \"NODE_ENV=production webpack\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"dependencies\": {\n\
      \    \"react\": \"^16.2.0\",\n\
      \    \"react-dom\": \"^16.2.0\",\n\
      \    \"reason-react\": \">=0.4.0\"\n\
      \  },\n\
      \  \"devDependencies\": {\n\
      \    \"bs-platform\": \"^${bsb:bs-version}\",\n\
      \    \"webpack\": \"^4.0.1\",\n\
      \    \"webpack-cli\": \"^2.0.10\"\n\
      \  }\n\
       }\n\
       ") ;
    File  ("bsconfig.json",
      "/* This is the BuckleScript configuration file. Note that this is a comment;\n\
      \  BuckleScript comes with a JSON parser that supports comments and trailing\n\
      \  comma. If this screws with your editor highlighting, please tell us by filing\n\
      \  an issue! */\n\
       {\n\
      \  \"name\": \"react-template\",\n\
      \  \"reason\": {\n\
      \    \"react-jsx\": 2\n\
      \  },\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": [{\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  }],\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"namespace\": true,\n\
      \  \"bs-dependencies\": [\n\
      \    \"reason-react\"\n\
      \  ],\n\
      \  \"refmt\": 3\n\
       }\n\
       ") ;
    File  (".gitignore",
      ".DS_Store\n\
       .merlin\n\
       .bsb.lock\n\
       npm-debug.log\n\
       /lib/bs/\n\
       /node_modules/")]) ;
  Dir  ("react-lite", [
    File  ("watcher.js",
      "\n\
       \n\
       var wsReloader;\n\
       var LAST_SUCCESS_BUILD_STAMP = (localStorage.getItem('LAST_SUCCESS_BUILD_STAMP') || 0)\n\
       var WS_PORT = 9999; // configurable\n\
       \n\
       function setUpWebScoket() {\n\
      \    if (wsReloader == null || wsReloader.readyState !== 1) {\n\
      \        try {\n\
      \            wsReloader = new WebSocket(`ws://localhost:${WS_PORT}`)\n\
      \            wsReloader.onmessage = (msg) => {\n\
      \                var newData = JSON.parse(msg.data).LAST_SUCCESS_BUILD_STAMP\n\
      \                if (newData > LAST_SUCCESS_BUILD_STAMP) {\n\
      \                    LAST_SUCCESS_BUILD_STAMP = newData\n\
      \                    localStorage.setItem('LAST_SUCCESS_BUILD_STAMP', LAST_SUCCESS_BUILD_STAMP)\n\
      \                    location.reload(true)\n\
      \                }\n\
       \n\
      \            }\n\
      \        } catch (exn) {\n\
      \            console.error(\"web socket failed connect\")\n\
      \        }\n\
      \    }\n\
       }\n\
       \n\
       setInterval(setUpWebScoket, 4000)") ;
    Dir  ("src", [
      File  ("Index.re",
        "ReactDOMRe.renderToElementWithId(<Component1 message=\"Hello!\" />, \"index1\");\n\
         \n\
         ReactDOMRe.renderToElementWithId(<Component2 greeting=\"Hello!\" />, \"index2\");\n\
         ") ;
      File  ("Component2.re",
        "/* State declaration */\n\
         type state = {\n\
        \  count: int,\n\
        \  show: bool,\n\
         };\n\
         \n\
         /* Action declaration */\n\
         type action =\n\
        \  | Click\n\
        \  | Toggle;\n\
         \n\
         /* Component template declaration.\n\
        \   Needs to be **after** state and action declarations! */\n\
         let component = ReasonReact.reducerComponent(\"Example\");\n\
         \n\
         /* greeting and children are props. `children` isn't used, therefore ignored.\n\
        \   We ignore it by prepending it with an underscore */\n\
         let make = (~greeting, _children) => {\n\
        \  /* spread the other default fields of component here and override a few */\n\
        \  ...component,\n\
         \n\
        \  initialState: () => {count: 0, show: true},\n\
         \n\
        \  /* State transitions */\n\
        \  reducer: (action, state) =>\n\
        \    switch (action) {\n\
        \    | Click => ReasonReact.Update({...state, count: state.count + 1})\n\
        \    | Toggle => ReasonReact.Update({...state, show: ! state.show})\n\
        \    },\n\
         \n\
        \  render: self => {\n\
        \    let message =\n\
        \      \"You'ved this \" ++ string_of_int(self.state.count) ++ \" times(s)\";\n\
        \    <div>\n\
        \      <button onClick=(_event => self.send(Click))>\n\
        \        (ReasonReact.string(message))\n\
        \      </button>\n\
        \      <button onClick=(_event => self.send(Toggle))>\n\
        \        (ReasonReact.string(\"Toggle greeting\"))\n\
        \      </button>\n\
        \      (self.state.show ? ReasonReact.string(greeting) : ReasonReact.null)\n\
        \    </div>;\n\
        \  },\n\
         };\n\
         ") ;
      File  ("Component1.re",
        "/* This is the basic component. */\n\
         let component = ReasonReact.statelessComponent(\"Page\");\n\
         \n\
         /* Your familiar handleClick from ReactJS. This mandatorily takes the payload,\n\
        \   then the `self` record, which contains state (none here), `handle`, `reduce`\n\
        \   and other utilities */\n\
         let handleClick = (_event, _self) => Js.log(\"clicked!\");\n\
         \n\
         /* `make` is the function that mandatorily takes `children` (if you want to use\n\
        \   `JSX). `message` is a named argument, which simulates ReactJS props. Usage:\n\
         \n\
        \   `<Page message=\"hello\" />`\n\
         \n\
        \   Which desugars to\n\
         \n\
        \   `ReasonReact.element(Page.make(~message=\"hello\", [||]))` */\n\
         let make = (~message, _children) => {\n\
        \  ...component,\n\
        \  render: self =>\n\
        \    <div onClick=(self.handle(handleClick))>\n\
        \      (ReasonReact.string(message))\n\
        \    </div>,\n\
         };\n\
         ")]) ;
    File  ("README.md",
      "# react\n\
       \n\
       ## Run Project\n\
       \n\
       ```sh\n\
       npm install\n\
       npm start\n\
       ```\n\
       \n\
       Suppose you have a http-server running (try `npm i -g http-server`)\n\
       \n\
       \n\
       Then modify whichever `.re` file in `src` and refresh the page to see the changes.\n\
       \n\
       **For more elaborate ReasonReact examples**, please see https://github.com/reasonml-community/reason-react-example\n\
       \n\
       ") ;
    File  ("package.json",
      "{\n\
      \  \"name\": \"${bsb:name}\",\n\
      \  \"version\": \"${bsb:proj-version}\",\n\
      \  \"scripts\": {\n\
      \    \"build\": \"bsb -make-world\",\n\
      \    \"start\": \"bsb -make-world -w -ws _ \",\n\
      \    \"clean\": \"bsb -clean-world\",\n\
      \    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\
      \  },\n\
      \  \"keywords\": [\n\
      \    \"BuckleScript\"\n\
      \  ],\n\
      \  \"author\": \"\",\n\
      \  \"license\": \"MIT\",\n\
      \  \"dependencies\": {\n\
      \    \"react\": \"^16.2.0\",\n\
      \    \"react-dom\": \"^16.2.0\",\n\
      \    \"reason-react\": \">=0.4.0\"\n\
      \  },\n\
      \  \"devDependencies\": {\n\
      \    \"bs-platform\": \"^${bsb:bs-version}\"\n\
      \  }\n\
       }\n\
       ") ;
    File  ("loader.js",
      "/* Copyright (C) 2018 Authors of BuckleScript\n\
      \ * \n\
      \ * This program is free software: you can redistribute it and/or modify\n\
      \ * it under the terms of the GNU Lesser General Public License as published by\n\
      \ * the Free Software Foundation, either version 3 of the License, or\n\
      \ * (at your option) any later version.\n\
      \ *\n\
      \ * In addition to the permissions granted to you by the LGPL, you may combine\n\
      \ * or link a \"work that uses the Library\" with a publicly distributed version\n\
      \ * of this file to produce a combined library or application, then distribute\n\
      \ * that combined work under the terms of your choosing, with no requirement\n\
      \ * to comply with the obligations normally placed on you by section 4 of the\n\
      \ * LGPL version 3 (or the corresponding section of a later version of the LGPL\n\
      \ * should you choose to use a later version).\n\
      \ *\n\
      \ * This program is distributed in the hope that it will be useful,\n\
      \ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
      \ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\
      \ * GNU Lesser General Public License for more details.\n\
      \ * \n\
      \ * You should have received a copy of the GNU Lesser General Public License\n\
      \ * along with this program; if not, write to the Free Software\n\
      \ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */\n\
       \n\
       \n\
       \n\
       //@ts-check\n\
       \n\
       // @ts-ignore\n\
       window.process = { env: { NODE_ENV: 'dev' } }\n\
       \n\
       \n\
       // local to getPath\n\
       var relativeElement = document.createElement(\"a\");\n\
       var baseElement = document.createElement(\"base\");\n\
       document.head.appendChild(baseElement);\n\
       \n\
       export function BsGetPath(id, parent) {\n\
      \    var oldPath = baseElement.href\n\
      \    baseElement.href = parent\n\
      \    relativeElement.href = id\n\
      \    var result = relativeElement.href\n\
      \    baseElement.href = oldPath\n\
      \    return result\n\
       }\n\
       /**\n\
      \ * \n\
      \ * Given current link and its parent, return the new link\n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * @return {string}\n\
      \ */\n\
       function getPathWithJsSuffix(id, parent) {\n\
      \    var oldPath = baseElement.href\n\
      \    baseElement.href = parent\n\
      \    relativeElement.href = id\n\
      \    var result = addSuffixJsIfNot(relativeElement.href)\n\
      \    baseElement.href = oldPath\n\
      \    return result\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} x \n\
      \ */\n\
       function addSuffixJsIfNot(x) {\n\
      \    if (x.endsWith('.js')) {\n\
      \        return x\n\
      \    } else {\n\
      \        return x + '.js'\n\
      \    }\n\
       }\n\
       \n\
       \n\
       var falsePromise = Promise.resolve(false)\n\
       // package.json semantics\n\
       // a string to module object \n\
       // from url -> module object \n\
       // Modules : Map<string, Promise < boolean | string > \n\
       // fetch the link:\n\
       // - if it is already fetched before, return the stored promise\n\
       //   otherwise create the promise which will be filled with the text if successful\n\
       //   or filled with boolean false when failed\n\
       var MODULES = new Map()\n\
       function cachedFetch(link) {\n\
      \    // console.info(link)\n\
      \    var linkResult = MODULES.get(link)\n\
      \    if (linkResult) {\n\
      \        return linkResult\n\
      \    } else {\n\
      \        var p = fetch(link)\n\
      \            .then(resp => {\n\
      \                if (resp.ok) {\n\
      \                    return resp.text()\n\
      \                } else {\n\
      \                    return falsePromise\n\
      \                }\n\
      \            })\n\
       \n\
      \        MODULES.set(link, p)\n\
      \        return p\n\
      \    }\n\
       }\n\
       \n\
       // from location id -> url \n\
       // There are two rounds of caching:\n\
       // 1. if location and relative path is hit, no need to run \n\
       // 2. if location and relative path is not hit, but the resolved link is hit, no need \n\
       //     for network request\n\
       /**\n\
      \ * @type {Map<string, Map<string, Promise<any> > > }\n\
      \ */\n\
       var IDLocations = new Map()\n\
       \n\
       /**\n\
      \ * @type {Map<string, Map<string, any> > }\n\
      \ */\n\
       var SyncedIDLocations = new Map()\n\
       // Its value is an object \n\
       // { link : String }\n\
       // We will first mark it when visiting (to avoid duplicated computation)\n\
       // and populate its link later\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ */\n\
       function getIdLocation(id, location) {\n\
      \    var idMap = IDLocations.get(location)\n\
      \    if (idMap) {\n\
      \        return idMap.get(id)\n\
      \    }\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ */\n\
       function getIdLocationSync(id, location) {\n\
      \    var idMap = SyncedIDLocations.get(location)\n\
      \    if (idMap) {\n\
      \        return idMap.get(id)\n\
      \    }\n\
       }\n\
       \n\
       function countIDLocations() {\n\
      \    var count = 0\n\
      \    for (let [k, vv] of IDLocations) {\n\
      \        for (let [kv, v] of vv) {\n\
      \            count += 1\n\
      \        }\n\
      \    }\n\
      \    console.log(count, 'modules loaded')\n\
       }\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} location \n\
      \ * @param {Function} cb \n\
      \ * @returns Promise<any>\n\
      \ */\n\
       function visitIdLocation(id, location, cb) {\n\
      \    var result;\n\
      \    var idMap = IDLocations.get(location)\n\
      \    if (idMap && (result = idMap.get(id))) {\n\
      \        return result\n\
      \    }\n\
      \    else {\n\
      \        result = new Promise(resolve => {\n\
      \            return (cb()).then(res => {\n\
      \                var idMap = SyncedIDLocations.get(location)\n\
      \                if (idMap) {\n\
      \                    idMap.set(id, res)\n\
      \                } else {\n\
      \                    SyncedIDLocations.set(location, new Map([[id, res]]))\n\
      \                }\n\
      \                return resolve(res)\n\
      \            })\n\
      \        })\n\
      \        if (idMap) {\n\
      \            idMap.set(id, result)\n\
      \        }\n\
      \        else {\n\
      \            IDLocations.set(location, new Map([[id, result]]))\n\
      \        }\n\
      \        return result\n\
      \    }\n\
       }\n\
       \n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @return {string[]}\n\
      \ */\n\
       function getDeps(text) {\n\
      \    var deps = []\n\
      \    text.replace(/(\\/\\*[\\w\\W]*?\\*\\/|\\/\\/[^\\n]*|[.$]r)|\\brequire\\s*\\(\\s*[\"']([^\"']*)[\"']\\s*\\)/g, function (_, ignore, id) {\n\
      \        if (!ignore) deps.push(id);\n\
      \    });\n\
      \    return deps;\n\
       }\n\
       \n\
       \n\
       \n\
       // By using a named \"eval\" most browsers will execute in the global scope.\n\
       // http://www.davidflanagan.com/2010/12/global-eval-in.html\n\
       var globalEval = eval;\n\
       \n\
       // function parentURL(url) {\n\
       //     if (url.endsWith('/')) {\n\
       //         return url + '../'\n\
       //     } else {\n\
       //         return url + '/../'\n\
       //     }\n\
       // }\n\
       \n\
       \n\
       \n\
       // loader.js:23 http://localhost:8080/node_modules/react-dom/cjs/react-dom.development.js/..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//../ fbjs/lib/containsNode Promise\xC2\xA0{<pending>}\n\
       // 23:10:02.884 loader.js:23 http://localhost:8080/node_modules/react-dom/cjs/react-dom.development.js/..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//..//../ fbjs/lib/invariant Promise\xC2\xA0{<pending>}\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ */\n\
       function getParentModulePromise(id, parent) {\n\
      \    var parentLink = BsGetPath('..', parent)\n\
      \    if (parentLink === parent) {\n\
      \        return falsePromise\n\
      \    }\n\
      \    return getPackageJsPromise(id, parentLink)\n\
       }\n\
       // In the beginning\n\
       // it is `resolveModule('./main.js', '')\n\
       // return the promise of link and text \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ */\n\
       function getPackageName(id) {\n\
      \    var index = id.indexOf('/')\n\
      \    if (index === -1) {\n\
      \        return id\n\
      \    }\n\
      \    return id.substring(0, index)\n\
       }\n\
       function getPackageJsPromise(id, parent) {\n\
      \    var idNodeModulesPrefix = './node_modules/' + id\n\
      \    var link = getPathWithJsSuffix(idNodeModulesPrefix, parent)\n\
      \    if (parent.endsWith('node_modules/')) {\n\
      \        // impossible that `node_modules/node_modules/xx/x\n\
      \        // return falsePromise\n\
      \        return getParentModulePromise(id, parent)\n\
      \    }\n\
       \n\
      \    var packageJson = BsGetPath(`./node_modules/${getPackageName(id)}/package.json`, parent)\n\
       \n\
      \    return cachedFetch(packageJson)\n\
      \        .then(\n\
      \            function (text) {\n\
      \                if (text !== false) {\n\
      \                    // package indeed exist\n\
      \                    return cachedFetch(link).then(function (text) {\n\
      \                        if (text !== false) {\n\
      \                            return { text, link }\n\
      \                        } else if (!id.endsWith('.js')) {\n\
      \                            var linkNew = getPathWithJsSuffix(idNodeModulesPrefix + `/index.js`, parent)\n\
      \                            return cachedFetch(linkNew)\n\
      \                                .then(function (text) {\n\
      \                                    if (text !== false) {\n\
      \                                        return { text, link: linkNew }\n\
      \                                    } else {\n\
      \                                        return getParentModulePromise(id, parent)\n\
      \                                    }\n\
      \                                })\n\
       \n\
      \                        } else {\n\
      \                            return getParentModulePromise(id, parent)\n\
      \                        }\n\
      \                    })\n\
      \                }\n\
      \                else {\n\
      \                    return getParentModulePromise(id, parent)\n\
      \                }\n\
      \            }\n\
      \        )\n\
       \n\
       \n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * can return Promise <boolean | object>, false means\n\
      \ * this module can not be resolved\n\
      \ */\n\
       function getModulePromise(id, parent) {\n\
      \    var done = getIdLocation(id, parent)\n\
      \    if (!done) {\n\
      \        return visitIdLocation(id, parent, function () {\n\
      \            if (id[0] != '.') { // package path\n\
      \                return getPackageJsPromise(id, parent)\n\
      \            } else { // relative path, one shot resolve            \n\
      \                let link = getPathWithJsSuffix(id, parent)\n\
      \                return cachedFetch(link).then(\n\
      \                    function (text) {\n\
      \                        if (text !== false) {\n\
      \                            return { text, link }\n\
      \                        } else {\n\
      \                            throw new Error(` ${id} : ${parent} could not be resolved`)\n\
      \                        }\n\
      \                    }\n\
      \                )\n\
      \            }\n\
      \        })\n\
      \    } else {\n\
      \        return done\n\
      \    }\n\
       }\n\
       \n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} id \n\
      \ * @param {string} parent \n\
      \ * @returns {Promise<any>}\n\
      \ */\n\
       function getAll(id, parent) {\n\
      \    return getModulePromise(id, parent)\n\
      \        .then(function (obj) {\n\
      \            if (obj) {\n\
      \                var deps = getDeps(obj.text)\n\
      \                return Promise.all(deps.map(x => getAll(x, obj.link)))\n\
      \            } else {\n\
      \                throw new Error(`${id}@${parent} was not resolved successfully`)\n\
      \            }\n\
      \        })\n\
       };\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @param {string} parent \n\
      \ * @returns {Promise<any>}\n\
      \ */\n\
       function getAllFromText(text, parent) {\n\
      \    var deps = getDeps(text)\n\
      \    return Promise.all(deps.map(x => getAll(x, parent)))\n\
       }\n\
       \n\
       function loadSync(id, parent) {\n\
      \    var baseOrModule = getIdLocationSync(id, parent)\n\
      \    if (baseOrModule) {\n\
      \        if (!baseOrModule.exports) {\n\
      \            baseOrModule.exports = {}\n\
      \            globalEval(`(function(require,exports,module){${baseOrModule.text}\\n})//# sourceURL=${baseOrModule.link}`)(\n\
      \                function require(id) {\n\
      \                    return loadSync(id, baseOrModule.link);\n\
      \                }, // require\n\
      \                baseOrModule.exports = {}, // exports\n\
      \                baseOrModule // module\n\
      \            );\n\
      \        }\n\
      \        return baseOrModule.exports\n\
      \    } else {\n\
      \        throw new Error(`${id} : ${parent} could not be resolved`)\n\
      \    }\n\
       }\n\
       \n\
       \n\
       function genEvalName() {\n\
      \    return \"eval-\" + ((\"\" + Math.random()).substr(2, 5))\n\
       }\n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ * @param {string} link\n\
      \ * In this case [text] evaluated result will not be cached\n\
      \ */\n\
       function loadTextSync(text, link) {\n\
      \    var baseOrModule = { exports: {}, text, link }\n\
      \    globalEval(`(function(require,exports,module){${baseOrModule.text}\\n})//# sourceURL=${baseOrModule.link}/${genEvalName()}.js`)(\n\
      \        function require(id) {\n\
      \            return loadSync(id, baseOrModule.link);\n\
      \        }, // require\n\
      \        baseOrModule.exports, // exports\n\
      \        baseOrModule // module\n\
      \    );\n\
      \    return baseOrModule.exports\n\
       }\n\
       \n\
       /**\n\
      \ * \n\
      \ * @param {string} text \n\
      \ */\n\
       function BSloadText(text) {\n\
      \    console.time(\"Loading\")\n\
      \    var parent = BsGetPath(\".\", document.baseURI)\n\
      \    return getAllFromText(text, parent).then(function () {\n\
      \        var result = loadTextSync(text, parent)\n\
      \        console.timeEnd(\"Loading\")\n\
      \        return result\n\
      \    })\n\
       };\n\
       \n\
       \n\
       function load(id, parent) {\n\
      \    return getAll(id, parent).then(function () {\n\
      \        return loadSync(id, parent)\n\
      \    })\n\
       \n\
       };\n\
       \n\
       \n\
       export function BSload(id) {\n\
      \    var parent = BsGetPath(\".\", document.baseURI)\n\
      \    return load(id, parent)\n\
       }\n\
       \n\
       export var BSLoader = {\n\
      \    loadText: BSloadText,\n\
      \    load: BSload,\n\
      \    SyncedIDLocations: SyncedIDLocations\n\
       };\n\
       \n\
       window.BSLoader = BSLoader;\n\
       \n\
       var main = document.querySelector('script[data-main]')\n\
       if (main) {\n\
      \    BSload(main.dataset.main)\n\
       }\n\
       ") ;
    File  ("index.html",
      "<!DOCTYPE html>\n\
       <html lang=\"en\">\n\
       <head>\n\
      \  <meta charset=\"UTF-8\">\n\
      \  <title>ReasonReact Examples</title>\n\
       </head>\n\
       <body>\n\
      \  Component 1:\n\
      \  <div id=\"index1\"></div>\n\
      \  Component 2:\n\
      \  <div id=\"index2\"></div>\n\
       \n\
      \  <script src=\"./loader.js\" type=\"module\" data-main=\"./src/index.bs.js\"></script>\n\
      \  <script src=\"./watcher.js\" type=\"module\"></script>\n\
       </body>\n\
       </html>\n\
       ") ;
    File  ("bsconfig.json",
      "{\n\
      \  \"name\": \"react-template\",\n\
      \  \"reason\": {\n\
      \    \"react-jsx\": 2\n\
      \  },\n\
      \  \"sources\": {\n\
      \    \"dir\" : \"src\",\n\
      \    \"subdirs\" : true\n\
      \  },\n\
      \  \"package-specs\": [{\n\
      \    \"module\": \"commonjs\",\n\
      \    \"in-source\": true\n\
      \  }],\n\
      \  \"suffix\": \".bs.js\",\n\
      \  \"namespace\": true,\n\
      \  \"bs-dependencies\": [\n\
      \    \"reason-react\"\n\
      \  ],\n\
      \  \"refmt\": 3\n\
       }\n\
       ") ;
    File  (".gitignore",
      ".DS_Store\n\
       .merlin\n\
       .bsb.lock\n\
       npm-debug.log\n\
       /lib/bs/\n\
       /node_modules/") ;
    Dir  (".git", [
      Dir  ("objects", [
        Dir  ("eb", [
          File  ("f27895f616a8cdbe5830343e8bce2527337de8",
            "x\001\205V\219n\219F\016\2373\191b\202\023S\174\"\138\142\211\0046\130 Q\133Vh\226\024\146\157\160\b\004\131\151\149\188\246r\151\221\139\237 \213\191g\150\"ij\201\216\005\218\000\209\139\200\1579s\21933L\152H\224\224\249\139\232\1670\132\223\t'2\214$\131\2283\1889\159\252\249v\186\152\204g\167g\240a:_\204\222\159\192\211\209\193h<\132\211\183\211\215\139)L\127\155\157\193\199\217\217\0310y=\159z{F\017PZ\210T\239\029{\222M,\225\r\019\2335\188\004I\2546T\146\192O\212\147\130\197z%d\0302\154\132W*L\172\206\232J\249\131\227\01831R~~\004\147Z\157\022fN\226T\1831\210\030\212\022Q\170\004\239\211\193\227'\165j\168d\026\182\244*\219e@\169\200\011\193\t\183\014\218*\146d&%rR\139\003\127z\023\231\005#\214\175\1832<\213Tp\200\227k\018\172%!\154\242\245\016.\006\240\197\003\172\1366\146C\184\143O\169\144\025\236\135\159\240\184\254\225yF\018\179>\137s\130\162&\132O\142`\188\028\238\162\202l&,Vj\1985\145<f.\188W#r\237\\\198<#\217\251\213j\161\145\017\174\141\142\244\192\197\223R\198\230$%\244\134\156JQ(\215B\143\252\169k#\163\217;a\176\238n\001\238\207\015{0\231E\214\0192\026k\004\207\\\148\141\230\156\231}\206vE\191\246\"{\029\150\192Z\242\220\197\169Ka\216}D;\023\236\200^\184XI\240n$V%hH\022(\194V[f\213\020\178\255\182\007s\162T\188&H^\255/a\246n\176\189\245%U\224\195/\016,\176]\249\186D[j\169\234\178\163\165}K\171z\140\151\003\212\245AS\180\021\168\129\229w\219K\229'\214\233%z\177\145tmaN\183\024q\180t\161U#`c\165z\148\"95\1532\146c\187\005~Fo\252!\024\204vE9\201\134\182\253\186Z\137\209ZpT\180}\245\208O\240\t\163\233\245\017\180\234\214\173Y\159\133*\200r4\141.\162\251z\225M`V\200\\\219\201\165u|\029w\234\211\181\185\025<\024\236fX\223\219\224G\207\250L\172\215\204N\136\232\127I\219\175\236\213\019\211\199\002\228%\181^A}\006G\192\rc\142\191\205\192\153\133\148SMcVO\176\007o\253\145y\220\190\192vg\180=::\021\227\1814\164\247\170\157N\232D\143\017\197\150\245\189\227\211\021F\157\001^m'\188\151V\222\216=\184\146\134\219>\239R\159\174 \216\170te\237\149\213\012\210r\191\143..\002\252(\176=\223\187\203\218u\217>\183*XN\156\221a\243\173\1546\216\170\178?7\216f\184\244\022z\139[.\029\186\000l\1280\252d\233\142\141{2|\223Lq\170F\240\015\140\255m\198\2559\225\157\250t\024\167L\162RI\011\203\145\206\194v\133Qg]_\169jp\127\148qQ\224\154q\214v\143<:\\6!a?l<\143\220\021Bj5j\022\"n\148\230\249\184\017\219\143*\148\216\191c\175\164S\253\141v\"4\196P\024I \023\153)'\147\247\021\209\144\225\253")]) ;
        Dir  ("df", [
          File  ("4df9cf50ba93ba5872d3c7eb62845ebd3d8653",
            "x\001K\202\201OR045c\bJML.q\241\247\rJ\213+J\205KI-\n\201w\205I\205M\205+\t\207,\201\240L\209\176q\206\207-\200\207\003\n\024*\228\166\022\023'\166\167\218*y\164\230\228\228+*)\232\219\233((e\002\181U\024*iZsq\145`\154\145BzQjjIf^:6\227\140@\198\001\000\000u6Z")]) ;
        Dir  ("90", [
          File  ("2fcbcadb03d8b12f59d1a844abc182fa2791a6",
            "x\001e\146Qk\2190\020\133\247\236_q\150'\185\024\229\177\172m\242\210\183<\141\182c\027cT\138|\019\139\202R\144\228\150\176n\191}Wv\220\134\r\1401\150t\238w\206\209\214\133-./?}X^\224\161\179\t\252\228\142\176\213\201\026\152\208\031\130'\159%.\150\149\163\252\254\007+\220\145N\193\243\219d\153\178\206\228(\165\219\249\136X|\214{Z\212\215U\197\218\223\195\016\177\211\189uVGt\218\183\142n\1575O\216\197\208\023)\1477\247rb\232yY\231\016\173;\"\235'\154\144\014\250\232\130n\155\n(\136~\228T\137\220N!\146\t\177m\240\210Y\2111\164\207\218\250\132\145\n\194\179\007t\020\169n\160\166\217\138\191\"\181\131!U\244x \002\139F\012\153\017\179\229\153'\199\231\172+\136Gz\230<\026<\150\1935Vkl\146ta/\022\166\216\161\246\227lY\245\140\174\230@w\1317\217\134B\1733\254w\168Lg]\027\201+\b\187\1951\012x\209>#\007\012\137\n\163\218\220\127\171%T\207)s\178\163\178\134\215=\181\208q?\244#\215\148@\178\253\224\184\1454'\139C\012\135$\241\165\028\189\170F\189\155R\016Nr\171EG\206\133\005\150k5.\127\029\163l)\r{\029\185\1290\029:/\157\011/CE\209\145\197\173\248\243\143Z\131\031\175\175?\235Z\205i\150]|u\2226r\144\179\2411\204_L&\165|\187x\165m\014\165\165x\133\1468\007^\216q\211\218g\004?^\161\149(+r*J\156\245U\215\211f@\156c\167\028\173\223\139\019j]O\130KV\\7\213\239\235\234/-\212\004V")]) ;
        Dir  ("73", [
          File  ("e3721318e1d1c91ff0107ab338d412e1b6a869",
            "x\001\133R\193N\0021\016\245\188_1\018\019v\019\178`\194A0\144\160x\192\160\024\011\225\136\221e@biI[@\130\251\239v\022p]\204\198\185\181\153\247\222\204\155\023\t\021\193M\189q\225y\027\174ak^Q(>E}\155\190\251\0296\156\176\209\253\253\003c\147\187Q\175\223\157\176a\231\233\005Z\224\011\021s\193\172\210|\142\225\028m\207\226\210/\023!\202\001|}A-Hi\199l\2422x\029:\150\134\171[\168V!Vr\182\152\1755\143\004z\222l-c\187P\018\012\218\209j\140\017\139\213\007Z?\128\189\007\174\0223\240\179Y\161\213\002\185\022\130\020\178\223P#\159\238\152\229\022\225\210u\\\159\192D`\245\238HE/\170\012\232\198\146\184\005RU1\169\190mM\179ZM\247}W\1986\175\246\199\005\146\183 \029\231\192\240\155#Tr\137\1988k\200\170\165\153\007\208j\159)\018\138Lwb]n\185k|d\131\231p\197\181A\130\132S\247\027\132E\142\230\148\137\139L9q\181\161\b\246\219\005B\157\170\168\255\224\006\r\248G\144\160\185\020\184k\253\147\130J\241\\\133\244\020\004wL\202\165o\245\026\243\158\211\016\137\151\003'?\175\004bn\227w\240\241S\158/\238\018g\148\192\016\181V\218/m1\002\147\222\027f|!pJ\145\148\024\219R\166w N<\167G\171J\139z\195\133\159\015i\005\234\181Z-\248\006U\245\240Z")]) ;
        Dir  ("6d", [
          File  ("71417aeee96048383531cb82791b10d9570710",
            "x\001\237Zms\219\198\017\238g\254\138\179\234\tA\133\002$\165\205\184\138\165\170\174\229\140=~\201DI\243\129R\"\0168\138\176A\128\005\192\023\r\205\255\210\223\210_\214g\247\238\128\003\bR\178\211\151\233L\152\137I\225\246\246\246v\159}\185=\012\227t(\142\142\190\254\211\215\191\235t<\239\188\200\015\130\177\012>\208\031\130\254\138n\1474\147\157E\148\132\233\194\157fi \243\\\156\138\149\144\201\252\004_o\223=\191\248\229\226\237\223ND7\148\243\174X\139u\135g\199i\224\199\162H\197\173,\190\243\139qg\238g\"\147\177_Dsy\017\203\137L\n0\n\211`F?\221 \147~a\006\156=\127\175\247\rO\025\250\185y\186\131\156\168hF\201n,\253\208\245\167S\153\132\127\029Gq\232X|@\215\145\203i\154\021b4K\130\"J\019\241,\255V\201\233Da_L\253\0122\245\196\170#\240!\201\2118\164]@\004\139\145;\206\228\136I\154\015A\167x\240hc\219<\r\020QX\178\207d>\139I\031m\164\219V\2082\233%\138Y\150`:\241\233\172;\222\254~G\236\011\250\255[(<\017\193,\163=\1378J>\b?\tET\228Z\198>\166\241\236b,E\"\023LC3\207\177\007\127\"Vy\145E\201\237\026\0023\195\230c\181S5\1649\153)\224\226uJ%k(\252\020\021\227W\249\229l4\138\150\255cu\251a\168\228x\149\191\028\189M\011\167M\255\189\2071\128m\129\166\194\150\164+K/\027R,\r\244\162\145p\150.@\156\147\210\156\174\251>\239\246\204 aS\235{\201\"\174\133\140s\169Qk\143\138/\005OUT\128G\135}k\228\131\252\187,\157D\152u*\244/\023 J\227\185tx\184G\161`\234\007\031\252[\137\213\225*\185\156\248I\017\0059\141\248B\129\131<}\146\134\179X\138t\248^\006\133\160\209\017x\139Y\022\139\131\179\150\2097L\159\139\019\241\198\159>U|\250F\n\241T\012\2114\150~\">\1545\206\020SY\004cAX%,\159\208:\007\002\138\138\n\017\229\194\143\017H\194;1\"*\025\138\161\028!\130\213 \158\023x\018\nD3\2188\205\023\"\005\191lAzP\129\136\249k\n\177\024GXq\017\1971\216\137\017\1901}\001\1310U!\151Xy$\242Y@\209q4\1395\203\172Fjv\195Z\005K\248\228\200\143\192\137M\241\230\221\243\031__\\\194\n\228\128\208\135\211\171\252&\240i+/hG\014\237\217\000\000\146\007i\002cI7JF\169\026c\027S\200\"\202\239M\\\209\252]\184\160EF\240\170\200\012[\0119\213`;\192h\157)\132fm[\140\137\005}\\\1685\129S\229 :\179\128\169F\005\169\141G\221\180\220\148\0252\223\026\225\196\195%UC1f\200|o\224\222\012\208\183\158oc}\147A\237\201\186\215)\2556z\203\181\222\144\027\170\2455\235)S\175\201\173\012\230)\251q^A\200\004\246\201\005h\236\007\128L\n$\023Q,R\145\16538\182HG\130\012\140\b\203X>rI+%\003\n\213&(\193\015\1299\128|\028\021}\145\164\192\n\128\b\207\203f\t\243?~\192\220$-\212\252\225\172`\252jw\015UjhrWX\022\002^\132\229 v\246\001\242\252}&\243\194\132\184\243\226n\138\168c;\177\253[\135\149\167~rw&\232\1915G?\130\206\203\231\175\181\162\168\168\168\144\255@\206\154c\197\239\242.\td\184\141+\012\240\018Io\238\1993\201\161\"\177c\213J\237\255D\\r\182\131\148\160\255I*\183\031EY^\136\137\143\205#\204\176\243\206\163<*`4\225\192\000\254<\133\165\195\2174\142`x\024%H'\211Y\193\024\224\bJf\156\166\211\025\234\031\172\r)\200\179\004\253\149\0015U\178n\166\138-)\183\132G=\145\192\187_\134F\165\156Z\r\161\241m\210z\020\194<\208\183\165'\021\023\180-\020\192\2015\153\210L\181\156\137\159\243\156(T\212\n\253\255\145}\144Q\239\221\203\134\229\255=;*K\151\000\190ZX\ns\140VH\161<\b\133\030r  OqbY\136\193\135\190\152\207\175\201\193\173\153f\"\169\211\"\157\131\150I\231s\155\130\168\020\251/O\197Q\025\150\000y|\212\191&\005\196\233\173\195\164}\209U\169\024(K\253P\134\221\030\167\252_\007\179\178\026|\161k\230\181\b\134v\209\151\155\212\205\158^\007&;\203\022h\246\193\199l\153\180\137x\132\026\246\027\222\225g\192U|\241\005\231\020UO\215\144\218V9\169\213,un\148P\1862\167\232\164C\025\165,\170\1446s\154\206\bN0tz\1892\249m\210\145\245\236\189=\004\1904\199|Z\157\211\012\210\183\2187e-:\207@\222*k\025\178\157YsS \206\128:B \249\232*e0\208\252\175\175{-K\148\1285\139V\217\156K\204\r\193\144{\r\169\245s\235v7\182\t\171[\028J^\r\163\210\018\150K\186\247\236\rLk\219S~GL\170\237\128F\131\136\170\235]!\157\235E\184\1358\215\179\245aip\173\018Y\025s\016\205\159\203i\238\208\004\219AB<D\180\025\\\243\1304\138\146}\026\251\129t<\231\202\187\218\031\\-\174~\186\222\255\243\213\254\149\247\017\015\188\193\207W\201\245\254\199\129\251\248:\235}\188\026R\002\1432y\149\239_9\248g\176\215\189v\006?\227\223\253\030\253\166\231=\239\182_\029\143\157_\250B\245\002\240\029\026aH\003d\154Gj\168'H2w:\203\199@\029N\2174\190\214\223z\175D\241\rG#J\175\207\238\196,\167\028\234\139\196\159 m\238Id\231=\156\021\144m\135Y\186\200e\150\171\012,\1512\152Q\238L\184h\185E\231\002\253\133<H\167\210%V\227\162\152\158x\222b\177pC\127\030\133\163\216O\252[?q\145\137\189\227\195\163C\239\232\216S\179\014h\145\131(q\199\197$\230\234[=\191\192c\232\149F\209!\000\207\210\018\234\132\251\227\247\175\029Tr\180{\012\210\1356\143'\214\001\205S\1993=N4z\227T\002\210)\204\245\186fv\233\128[\169\189\0269\205S\224\242T`\207p ;9\254\202\236\157r}<\134\234N\158\028>9\244\1464\148\191\232D\224\225P\020\020\007!t\017\188\207\171\191\\4md\156N\185\005\131\001\172\247\219\255\255\191:\016\163!\140\024GC\015EA\225GI\254\022 0i\235\159\255X=\165\134\024\028\238\140\171\219\227\175N\142\014O\014\143\221'O\254\240\027\162~C~\139\247W\136\138\018\020,\017:?\237p\218\153\242\182\156b\170\198\161\213\012\227&!\181*U{\200\148\\\237mY\197\2255\157\165N\173\030.\194l\183\236\226r\026\162Hm\019\159\154\006\173\157\203t\168\222h\021\168|\175GY>n\135\189\2027\133#Q\168\218F\168~\1692\213P\222FI\002\159\163g\170Gu\163\235G\181Ct\245\188\t|\149z{(\221Q\172\131P/F]\174\169n\208\225\024\193\135F:J\170\026bW\149\161T\222\212+\203\253\022\169\150\018\180\213\222F\127_.\161\194(D'\t?\223\141\156.RY\169:=\014\173\029\028\153yVr\211\157\236\154\158\192*\159\rUW\2079D\217@|I5eV\221\173I\179\140*\147)\142)uA\233\018\141c\b\011\189\213r\\\023\t\214\234\169\179\178N\205\253C\163\233\188\193o\027\\\172\220^_\172v\152 \211N\166i\158GCt@\139\177_\136\155\026y\237\143\229\210S\r[Rae\236\r\220Y\026\190\223+T\181\165:W\1643\221\179}E-[\2197n\026Z{\188\170\236`\144\177\246\236\142\239M\165\027^Dc\211\238JZ\139U\229\183:\255\240\020\218\t}J\219\215\138Z5\166\254%Get?\002\216X#\006\b6\021\253\134\226\244\178\140-T\143r\025\161+\213\164\163\191[D&x\232#\218\253R\025\158\015\151\206\204\208+\175\216e\251\202\131\149\159\024\n\251[\151\132\180\204#8\208\142\198\191=\203\252&\179\211\182\222\226p\246`\224\195in<vN\004 \203\212\134i\219\247\022ub\221\202\250m\243\232\153B\197\195Un\243\249t\245\219\179[LqR\234k\187Ml\022e\201n?\220\245[\175\249@\247\221\197\137\198\238\023\210\238]7\185=H\248_/p\187\144\214i\222\200\181I\216rL7\196\159/W}\153\234/t\249\233 \250\233]\177\170lA\227\158\238\\\249\242T\215\002\226\169\185\232\249\168\187\203g8G\211E\155\152\2242+\167\131\1271F\151]\157\204\152\003\181\228q\177\164\171\002\220\n\219\151\131\128\206C*\1610M\232\014\015\212\1416\155\146\182J\229\143\136\210\142\169Z\254\182\022\157\154k\247\001\236\137d\026\242\200(\028\028^\139G\148\144\187\024\183\0033]Xl\004d\219\148[\011\169z 1\208U\217R\189D\192\183!}A\251\206\199\208\160V\159\001\012}o,Mm\217\157uA\149\234l>\244[Kmg=+\133l\172DS\030\030\228>=\176iq>-\175\168\247\025H\180\182O1F\199\133;{\023Y\150f\206\141x\188\138\1945\238g\031\175\020\018\208\242Mgq\136\171\167\026`o\234\198\178yW\238\182\251i\157C5K\135\rc\255R\205z\251\132e~\198\247\015\191\206\151\207\021\207\\\172\180+s\031\027\1624\188\241/q\204MU\237X\186\138\214\002\237\242\214R\248f\n\196\141y\155_\181<&%R\150\215-@\172\246\156:\132\160\228\187\209\186\022\137X\139\165w\228\250\144\157\155t\019\2200\163\134>\163\128A\027Z\194\145\192\132\017\221h\228n\232\158\248\210g\003/\012\151\243\n,\011?g\168\152\192f]\145\199w\r\208\212L\190\166\254\219\246\203$u\250iyAE\153\164~)q\1915_\224\128\245\003\221,\019\2232\000X\167\163\134\182\137Li\250\019\180\171\209\002\221\"\231\148\129\129\238g\202\251\173:\160\200\204\244Z\209\187L\133\255fpoNctQ\028\177'\217\176\162\177G\246\160\171^\130\202m\"\178k\027\rV_U&\"\170\170g\234\2208fC\184\025\225\206r_\179\238\171,\215[=^\213\184\146\n\215W\201\186\231y\191\023y:\203\002\137\238\234i\131\138\208\184\190\2339\165\227\208\186\2441\203\001\222\188\156u\154U\004\213\191\218D5E\215Da\200\171^u5\011\165V_\229\026\230\191!@\141\131\222+\171\136g\233\007;g\017w\165\156\026\153\238\150\147$\149\186\245\030\218\022\229\201\027\030\218\238\153\015\014\228*\152\150J\190\149\t\181\198\249ph\176\162E\226~\253\193\030\206\016\142\179G_o\144\240\221\012-\138tB7`\170\003\224\028\247\197\031\025\249\159\227\212d \170\154\184\159\130\194)\128S\136\001!\232\154{\2453\190pG\140\161\027?~IG\167'\149\170\235\241\155p\240\003\166\178\247\016\015u$3\219jq:\188\234\200\239\n\230x\221\017\160\168\230h\003\253\183\252\192\163\131\186e\1365\029\215,\223(\205\181\221'>\213\023\218}\160\r\134\173\176\183\t\027p\175_\n\217\132&(\221S\154\147\025\026o\209=\1874\198\1735\023\204\245x\017\161\235\181\247\026\246G/nO\197o2\183\206\025v\139d\207\221\235Wo\166\146t?~\255\178\022\241U\214lO\028\205\236n\176E>M\011j\164\158r\199\189\129E\157\002\202\144`\011\127\145\132M\249\137\1656\170\226\170\194\001r\012\018h=\203\236,Y\026%\205\174\029\180a\200\150\154\014\160\188\186\242\154*T+\243X\145\250\179\149Of\182\183CP\209\171\017\207g\151dd\153Q<f}\024X\156`\200\252\238\151#\230\169z\178q\239\141\247\129\154/\021\241\254\244+\209\214b\230'TObPK\023\"\148o$\227\149\169\236\238R\198x7\018\181u7\015\178hZ\012B\191\240\015\136\244\026\221V\202\208\244\219 F\171\140\155\195D\136kj\151\199\177\227\127\001\184\219\024\212")]) ;
        Dir  ("64", [
          File  ("193782278fec0878dfc88a2052028dc7610e4f",
            "x\001mTQO\2190\016\222s~\197\173\154D\138JB\128\177i\213\030XVm\213\024T-\140\007\132\144\227\\\193\224\216\153\237tC\019\255}v\218\166\169\155\190$\245w\223w\206\221w\151q\153Ar\154\156\190\137c\248\134\002\0211\152C\246\002_\174\211\031\231\163Y:\029O\174\224\215h:\027_^\192qt\020\029\014`r>:\155\141`\244u|\0057\227\171\239\144\158MG\193^\165\017\180Q\140\154\189a\016,\136\130\180R\234\005>\131\194\223\021S\024\2462}Prb\230R\0211gY\252\164c\234b\162'\221\235\015k\206\020\t5m\142r\007-TK\209\021c\143\015\234\208X+\026\219\136u\220J\187\022\167\178(\165@\225\018\180C\180\177\223\205Q\235t\029\016\246&\228\001]\218`^\tj\152\020\240HD\2061\229\140>\135\247\003\184\127\151\244\225_\000@\165\208\146c\196\229C\216\163\014\198\252\173\163\130\253rS)\001\241>\132}\216\143\015\135\193kK\176 \207\024\0226\173Me\245\150j\027\138B*Uni\183Vi\253\179R9f\213\195\005)\208B\205\023\221z\192\225\221`\155U\023'\229D\235\1770\168\004\225>\1893\"\241u\\\0210\191\156\207g\174h\190\198\014z\228\243\2550\206\167H\145-p\162d\169}\133\014\252\216\215\200Y\254SV\182\141~\0016\231'\029\156\2352\239\184\178\021k\128\247>\203\221\230Z\020]\201\182\161\211Nfg\194\154\184F>\248<\253(+\190\185\209V\131=\236\163\207Uh{\163lU\194\198\180\161F>_:km!\247\\\185\204\014\0015\017\181\15778\226X\216\209\b{9[\244\006\181\179\219\140\246\187\020\245\020|ZNxt\159\212Y\156\005\1513bo`\253\215\030\152~\203\140m%\128\215\001\172F\160\158\152\r\248\218\247\028\204\0043\140\240N\223yX\210a\127C\152\192\188\211s\182\026[`\178\227z\133yE\235\210n5ds\156\236\024]W\153\166\138\149nw\236\184\220\007\147\029\143?\233UCn\020)K\187\149=\175w\224\201\201]S\230\187z\213\224\223R*\163\163\230\210v\2415\239\195`\r\1836\155\rh\253\219\132\184]e1\247\024\006\182\209\141\n\\H\003\004\202J!\0202\175\184\219\t\193\127W\016\230\221")]) ;
        Dir  ("60", [
          File  ("576d5f35ea435f9ab3be15325cae0b26daf22f",
            "x\001m\144MO\1950\012\1349\247W\152\220\215hEH\b%\189\140q\005\161q\224\232&\214\026\148\143\1701\176\253{\146VBLpI$\191\143\031\203\030|\026\224\230\182\187R\215\015O\187\195\219\243\030F\014\190oT\253\192c<jAQ\212\002\161\237\027\000\021\136\017\204\136s&\214\226\245\240\184\185+y\t\216\177\167\254\1330\167X^\195\176?a\152<e%\215\172Qr\213\168!\217sm\218\1650\165H\145a{_\029\214}\130\179Z\184h\233\180\021\189\146\165r\tv\127\193\238\007\172\142lf71\228\217h\209J\159\208\210\220\190g\001|\158H\139\144\236\135'\001\022\0257\001]\172T\129\2292\179\029re\203\224U\179lvi\252B6\227\127\202_MJ\174\027\150\133\151{~\003\025\031q\192")]) ;
        Dir  ("5a", [
          File  ("31f30c92e07a47b27b62ae7e2f557a625cf6dd",
            "x\001\181\144AO\131@\016\133=\243+FbRh\234\174Ecb\026\015\149n,\177\182\r\160=\024\015\011L\"\n,.Kc\255\189[L\133\026\019{\241\180\153\204{\179\223{Q&\"\184\188\184:\162\020n\177@\201\021&\016m\224\230\193\189\155\177\192\245\189e\b\143\204\015\188\197\028\206\137C\206\006\176\156\177q\192\128M\188\016V^8\005w\2363\163WW\b\149\146i\172z#\195Xs\t>\242XM\022\247>\1945H|\175S\137\150)\145W\1628\213O\172h%c\218\202\200ke\218\163\157W\171\154\213_\230\157\174\227vE^\138\002\0115<iN\132\152\151\153\206\214=Eh\171\"Q\245\155\2199\200\237\180n\163\147Eb\145\160\012\005\2030\215$\171T\189x\137\165\005\223\188\248\181\177h\031\230\154\022\250T\183\1877\180\132\251$$\231o\186\202)f\15386\027\019\151\146o\244\137\167g\219\030\128\153\234\207?\134\2196\255\141\233G;\00729\r\147N\1693+\224P\214\018!\023I\157m\0110>\001\142\155\210\241")]) ;
        Dir  ("55", [
          File  ("e500e2f13d1a57e629850a8e80ccdd0aa984c3",
            "x\001K\202\201OR03e\208s\t\142\015.\201/J\229\210\203M-\202\201\204\227\210K*N\210\203\201O\206\230\202+\200\213MIM*M\007r\211\185\244s2\147\244\147\138\245\185\244\243\242SR\227s\243SJsR\139\245\001k\028\024c")]) ;
        Dir  ("52", [
          File  ("c549724cd9ab62af6549a659d61bb9a15be458",
            "x\001E\144\205\014\194 \016\132=\247)\bg1\198\158\244U\026\015\252l\r\181@\195Bbb\250\238.\208\214#\179\223\204\206\162\230\160X\127\189\159\190\029c\220K\007\252\193x\004\169\147H\224\150Y&\224\2312#\r\131\167i!\219\155\152\t?$\221HZ+\133!G\r\248\199\140\141\156Q$F]s\200\137Y\145\138EN1\195\225]\164~\203\023\b\\@\151\132a\219\228\130\201s\237\165\131s\193O\184'Y/\218B\162\247\168g\235\145\199\209\150j\252\162\240\1789\234}HkJX\225+\170P\024X\192\027\240\218\214\234\195q!],\234gp\146Zr\132\209%\242\247\221\218\253\000\011\017X\203")]) ;
        Dir  ("51", [
          File  ("9b2eaacd06bfb0db3d94a699ba141b38403b9f",
            "x\001\141TMo\0191\020\228\156_1\221Kw\211\213\134\"q m@\168\226\202\129\015!N\169\179~\155Xu\236\149\237M\169\218\242\219y\182w\171\128@\229\146\196\031of\222\188q6\218np\254\234\245\155\023\1399>\007\017\b\146Z-\156\b\202\026\204\023\179p\215\019|:Y\225~\006\180v0a\teB\205+\191\179\183Kl\172\213\245\236\241b6c\152\247m\170\253\027\142\200G+.|\192\149V\237M\250\245\197n\183\154r\245\149\221\247\214\144\t\b\180\239\245\031\138\026\190\143\143D\210#Xl\b\243\185\232\002\185\249|\212(\140\196\200r$\192\159\196V4\005V?\193\175\240\137\132\183\134?\219\2088\146CK\238\137\189,>\252\016\204OE\149um\029QPf\139\200\208\238\148\150\142\012\132#\244\206\246\190\193\245\180y\r\229\205i\192\224I\214\b;r\212Y\190\167\182\134\191dj\225\219\180\132\n\216\2201\006\245dd\196\231\141[\021v\204\131\193Hr\190\141\197\163\252\189\184!\172P\254\156\228\212XO\188\021Vo\211\132x\006\158\001\133\140\228\176Q\001O\181\019\131\014\232\020i6\207vGND\133\169-{ \231\148\228\005:\186\141\156@\2114O\158\2133\222PF\005%t\n\203\018ef\029C\241\178\030\003\017\220@\143\233:\139\201\185\nN\024\207\165\214\248\140<Z\206\024y`\\\027c\022\001\227\148\225\217\134v7\157V\169\181\167\220\196^\143\231\247\181\151\\[\222\179\220\132RO9M+n\129C\1393\156?V\t\251\0019s\207\195\228\128\159dmM\\\141\016\185=\014\001\207h\tO\186\155\252\007b\210\246\228\189\216\242\180\018!P|\183\195\233\129\226P\148G\129\1793\198t<\241\181\237\214\252\154\202\b\145\197g\185U\188R (F*}U\\$\160K\169\014\217\031\224r3\132\192\207\212\154\244\150V\229\154\014\241\229\1767\025\140\197\149\233\168\170\166\026\160<\246-K(G\177Uv\135\145\023\025z\170\250/\166l\233sT\197\232\252\148\224\226\159\164\199\142D\227\241\238\183\145\143\210'\156\n\203\223\142\205\160un\231r\017=\139\246\241\204\248O\234\023\201\025\147\154")]) ;
        Dir  ("09", [
          File  ("2515d6f70a8e7a7c2d4a4e5ac41fd32007a12b",
            "x\001MP\203N\1960\012\228\156\175\024\169\023\168h+\193\005\241\001{F\011\031\144\180\235m\130\242\146\227,\244\239I\171=p\177=\182g\252\152}\154\241\250\242\246\208\129\201,\162T\215\225\\#>8}\211\142\181\214\197\170\152\003\\,b\188?\226\022\177\2365\165>k\206\169\016\182Ta\205\141``E\242P\136o\196\224\026\163\139+\030\1337\232C\007\195\250\191E?)\165\190,E\132tq\215\r?\214-\150v\178\030\1534\174\206S\155\014]x\2090\241\210v\1892\021\011\177\132lV\130$\020j\174\225\197\154\184R\025\149\234\251S\226&\202\004\242fNl\132p&SRlv\017\208\175\t\217S\233\251g4o\218\021\187\202\190~y\159\166\213\137\173\243\184\1640\181\2314V\240C\003\161F'\219=5\028o\027\238JJ\253\001\255?t\164")]) ;
        Dir  ("00", [
          File  ("30b81b1fb99bbace4b812b672e40bb0f75418a",
            "x\001mP\177N\1950\020d\206W<y\232\132\163\004\170\nU\130\001\193\192\192\004\027\005\228\216\175\170\021\199\142l\167\005\161\254;~6TTT\242\226{w\247\238]g\\\007\243\197\213\217W\005\192\172\024\144-\129y\0202\178s\130\182\232\131v\150\208\166n\235\166\160Az=\198\144P\210%Z7i\163\136\212\133\014\248 z\228;\231\019D&i\030\162\240\241\196\028\248.\189\000\239\240\203\148\006E^\151\157\242\239\216*b\200N(7\014V\236\222{\231\151`\029\208\000\194\136R\1755\170\021\131\217\012\240CGhY\n\177\207\231\244\248\153r)J\254R\146\221N\1787\248\148\015\"\222k\230\137)n\156\167\192\229`\163%\218\144\203y|x.\152\194\017\173B+5\254i\162t\151\132o\237\162\190\248),5\144q\174\220@\166\255g\193Y~\144\222\\7\245<I\015\177\021n\239Nn\235\002\031\141\136k\231\139\239e^I\186j_}\003o\246\129\025")])]) ;
      Dir  ("info", [
        File  ("exclude",
          "# git ls-files --others --exclude-from=.git/info/exclude\n\
           # Lines that start with '#' are comments.\n\
           # For a project mostly in C, the following would be a good set of\n\
           # exclude patterns (uncomment them if you want to use them):\n\
           # *.[oa]\n\
           # *~\n\
           ")]) ;
      File  ("index",
        "DIRC\000\000\000\002\000\000\000\r[\014\195\151\000\000\000\000[\014\195\151\000\000\000\000\001\000\000\004\003\201\211\004\000\000\129\164\000\000\001\245\000\000\000\020\000\000\000AU\229\000\226\241=\026W\230)\133\n\142\128\204\221\n\169\132\195\000\n.gitignore\000\000\000\000\000\000\000\000[\019~\160\000\000\000\000[\019~\160\000\000\000\000\001\000\000\004\003\201\211\001\000\000\129\164\000\000\001\245\000\000\000\020\000\000\001H\t%\021\214\247\n\142z|-JNZ\196\031\211 \007\161+\000\tREADME.md\000[\019\127.\000\000\000\000[\019\127.\000\000\000\000\001\000\000\004\003\201\211\003\000\000\129\164\000\000\001\245\000\000\000\020\000\000\0015R\197IrL\217\171b\175eI\166Y\214\027\185\161[\228X\000\rbsconfig.json\000\000\000\000\000[\019|z\000\000\000\000[\019|z\000\000\000\000\001\000\000\004\003\201\210\254\000\000\129\164\000\000\001\245\000\000\000\020\000\000\001``Wm_5\234C_\154\179\190\0212\\\174\011&\218\242/\000\nindex.html\000\000\000\000\000\000\000\000[\019|\220\000\000\000\000[\019|\220\000\000\000\000\001\000\000\004\003\202b\233\000\000\129\164\000\000\001\245\000\000\000\020\000\000-\176mqAz\238\233`H851\203\130y\027\016\217W\007\016\000\tloader.js\000[\019\127f\000\000\000\000[\019\127f\000\000\000\000\001\000\000\004\003\201\211\002\000\000\129\164\000\000\001\245\000\000\000\020\000\000\001\212\0000\184\027\031\185\155\186\206K\129+g.@\187\015uA\138\000\012package.json\000\000\000\000\000\000[\019}\129\000\000\000\000[\019}\129\000\000\000\000\001\000\000\004\003\204\000\226\000\000\129\164\000\000\001\245\000\000\000\020\000\000\006Pd\0257\130'\143\236\bx\223\200\138 R\002\141\199a\014O\000\020src/Component1.bs.js\000\000\000\000\000\000[\014\195\151\000\000\000\000[\014\195\151\000\000\000\000\001\000\000\004\003\201\211\000\000\000\129\164\000\000\001\245\000\000\000\020\000\000\003\011\144/\203\202\219\003\216\177/Y\209\168D\171\193\130\250'\145\166\000\017src/Component1.re\000[\019~\020\000\000\000\000[\019~\020\000\000\000\000\001\000\000\004\003\204\000\231\000\000\129\164\000\000\001\245\000\000\000\020\000\000\n\221\235\242x\149\246\022\168\205\190X04>\139\206%'3}\232\000\020src/Component2.bs.js\000\000\000\000\000\000[\019~\020\000\000\000\000[\019~\020\000\000\000\000\001\000\000\004\003\201\210\255\000\000\129\164\000\000\001\245\000\000\000\020\000\000\004\235Q\155.\170\205\006\191\176\219=\148\166\153\186\020\0278@;\159\000\017src/Component2.re\000[\019~\020\000\000\000\000[\019~\020\000\000\000\000\001\000\000\004\003\204\000\236\000\000\129\164\000\000\001\245\000\000\000\020\000\000\002\137Z1\243\012\146\224zG\178{b\174~/Uzb\\\246\221\000\015src/Index.bs.js\000\000\000[\014\195\151\000\000\000\000[\014\195\151\000\000\000\000\001\000\000\004\003\201\210\253\000\000\129\164\000\000\001\245\000\000\000\020\000\000\000\156\223M\249\207P\186\147\186Xr\211\199\235b\132^\189=\134S\000\012src/Index.re\000\000\000\000\000\000[\019}N\000\000\000\000[\019}N\000\000\000\000\001\000\000\004\003\204\000b\000\000\129\164\000\000\001\245\000\000\000\020\000\000\003Qs\227r\019\024\225\209\201\031\240\016z\1798\212\018\225\182\168i\000\nwatcher.js\000\000\000\000\000\000\000\000\165\244.\199\000B-\140\190\142\161\000\146\152[\183H\146\132u") ;
      Dir  ("hooks", [
        File  ("update.sample",
          "#!/bin/sh\n\
           #\n\
           # An example hook script to blocks unannotated tags from entering.\n\
           # Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n\
           #\n\
           # To enable this hook, rename this file to \"update\".\n\
           #\n\
           # Config\n\
           # ------\n\
           # hooks.allowunannotated\n\
           #   This boolean sets whether unannotated tags will be allowed into the\n\
           #   repository.  By default they won't be.\n\
           # hooks.allowdeletetag\n\
           #   This boolean sets whether deleting tags will be allowed in the\n\
           #   repository.  By default they won't be.\n\
           # hooks.allowmodifytag\n\
           #   This boolean sets whether a tag may be modified after creation. By default\n\
           #   it won't be.\n\
           # hooks.allowdeletebranch\n\
           #   This boolean sets whether deleting branches will be allowed in the\n\
           #   repository.  By default they won't be.\n\
           # hooks.denycreatebranch\n\
           #   This boolean sets whether remotely creating branches will be denied\n\
           #   in the repository.  By default this is allowed.\n\
           #\n\
           \n\
           # --- Command line\n\
           refname=\"$1\"\n\
           oldrev=\"$2\"\n\
           newrev=\"$3\"\n\
           \n\
           # --- Safety check\n\
           if [ -z \"$GIT_DIR\" ]; then\n\
           \techo \"Don't run this script from the command line.\" >&2\n\
           \techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\
           \techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\
           \texit 1\n\
           fi\n\
           \n\
           if [ -z \"$refname\" -o -z \"$oldrev\" -o -z \"$newrev\" ]; then\n\
           \techo \"usage: $0 <ref> <oldrev> <newrev>\" >&2\n\
           \texit 1\n\
           fi\n\
           \n\
           # --- Config\n\
           allowunannotated=$(git config --bool hooks.allowunannotated)\n\
           allowdeletebranch=$(git config --bool hooks.allowdeletebranch)\n\
           denycreatebranch=$(git config --bool hooks.denycreatebranch)\n\
           allowdeletetag=$(git config --bool hooks.allowdeletetag)\n\
           allowmodifytag=$(git config --bool hooks.allowmodifytag)\n\
           \n\
           # check for no description\n\
           projectdesc=$(sed -e '1q' \"$GIT_DIR/description\")\n\
           case \"$projectdesc\" in\n\
           \"Unnamed repository\"* | \"\")\n\
           \techo \"*** Project description file hasn't been set\" >&2\n\
           \texit 1\n\
           \t;;\n\
           esac\n\
           \n\
           # --- Check types\n\
           # if $newrev is 0000...0000, it's a commit to delete a ref.\n\
           zero=\"0000000000000000000000000000000000000000\"\n\
           if [ \"$newrev\" = \"$zero\" ]; then\n\
           \tnewrev_type=delete\n\
           else\n\
           \tnewrev_type=$(git cat-file -t $newrev)\n\
           fi\n\
           \n\
           case \"$refname\",\"$newrev_type\" in\n\
           \trefs/tags/*,commit)\n\
           \t\t# un-annotated tag\n\
           \t\tshort_refname=${refname##refs/tags/}\n\
           \t\tif [ \"$allowunannotated\" != \"true\" ]; then\n\
           \t\t\techo \"*** The un-annotated tag, $short_refname, is not allowed in this repository\" >&2\n\
           \t\t\techo \"*** Use 'git tag [ -a | -s ]' for tags you want to propagate.\" >&2\n\
           \t\t\texit 1\n\
           \t\tfi\n\
           \t\t;;\n\
           \trefs/tags/*,delete)\n\
           \t\t# delete tag\n\
           \t\tif [ \"$allowdeletetag\" != \"true\" ]; then\n\
           \t\t\techo \"*** Deleting a tag is not allowed in this repository\" >&2\n\
           \t\t\texit 1\n\
           \t\tfi\n\
           \t\t;;\n\
           \trefs/tags/*,tag)\n\
           \t\t# annotated tag\n\
           \t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\
           \t\tthen\n\
           \t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\
           \t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n\
           \t\t\texit 1\n\
           \t\tfi\n\
           \t\t;;\n\
           \trefs/heads/*,commit)\n\
           \t\t# branch\n\
           \t\tif [ \"$oldrev\" = \"$zero\" -a \"$denycreatebranch\" = \"true\" ]; then\n\
           \t\t\techo \"*** Creating a branch is not allowed in this repository\" >&2\n\
           \t\t\texit 1\n\
           \t\tfi\n\
           \t\t;;\n\
           \trefs/heads/*,delete)\n\
           \t\t# delete branch\n\
           \t\tif [ \"$allowdeletebranch\" != \"true\" ]; then\n\
           \t\t\techo \"*** Deleting a branch is not allowed in this repository\" >&2\n\
           \t\t\texit 1\n\
           \t\tfi\n\
           \t\t;;\n\
           \trefs/remotes/*,commit)\n\
           \t\t# tracking branch\n\
           \t\t;;\n\
           \trefs/remotes/*,delete)\n\
           \t\t# delete tracking branch\n\
           \t\tif [ \"$allowdeletebranch\" != \"true\" ]; then\n\
           \t\t\techo \"*** Deleting a tracking branch is not allowed in this repository\" >&2\n\
           \t\t\texit 1\n\
           \t\tfi\n\
           \t\t;;\n\
           \t*)\n\
           \t\t# Anything else (is there anything else?)\n\
           \t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\
           \t\texit 1\n\
           \t\t;;\n\
           esac\n\
           \n\
           # --- Finished\n\
           exit 0\n\
           ") ;
        File  ("prepare-commit-msg.sample",
          "#!/bin/sh\n\
           #\n\
           # An example hook script to prepare the commit log message.\n\
           # Called by \"git commit\" with the name of the file that has the\n\
           # commit message, followed by the description of the commit\n\
           # message's source.  The hook's purpose is to edit the commit\n\
           # message file.  If the hook fails with a non-zero status,\n\
           # the commit is aborted.\n\
           #\n\
           # To enable this hook, rename this file to \"prepare-commit-msg\".\n\
           \n\
           # This hook includes three examples.  The first comments out the\n\
           # \"Conflicts:\" part of a merge commit.\n\
           #\n\
           # The second includes the output of \"git diff --name-status -r\"\n\
           # into the message, just before the \"git status\" output.  It is\n\
           # commented because it doesn't cope with --amend or with squashed\n\
           # commits.\n\
           #\n\
           # The third example adds a Signed-off-by line to the message, that can\n\
           # still be edited.  This is rarely a good idea.\n\
           \n\
           case \"$2,$3\" in\n\
          \  merge,)\n\
          \    /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' \"$1\" ;;\n\
           \n\
           # ,|template,)\n\
           #   /usr/bin/perl -i.bak -pe '\n\
           #      print \"\\n\" . `git diff --cached --name-status -r`\n\
           #\t if /^#/ && $first++ == 0' \"$1\" ;;\n\
           \n\
          \  *) ;;\n\
           esac\n\
           \n\
           # SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n\
           # grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\
           ") ;
        File  ("pre-rebase.sample",
          "#!/bin/sh\n\
           #\n\
           # Copyright (c) 2006, 2008 Junio C Hamano\n\
           #\n\
           # The \"pre-rebase\" hook is run just before \"git rebase\" starts doing\n\
           # its job, and can prevent the command from running by exiting with\n\
           # non-zero status.\n\
           #\n\
           # The hook is called with the following parameters:\n\
           #\n\
           # $1 -- the upstream the series was forked from.\n\
           # $2 -- the branch being rebased (or empty when rebasing the current branch).\n\
           #\n\
           # This sample shows how to prevent topic branches that are already\n\
           # merged to 'next' branch from getting rebased, because allowing it\n\
           # would result in rebasing already published history.\n\
           \n\
           publish=next\n\
           basebranch=\"$1\"\n\
           if test \"$#\" = 2\n\
           then\n\
           \ttopic=\"refs/heads/$2\"\n\
           else\n\
           \ttopic=`git symbolic-ref HEAD` ||\n\
           \texit 0 ;# we do not interrupt rebasing detached HEAD\n\
           fi\n\
           \n\
           case \"$topic\" in\n\
           refs/heads/??/*)\n\
           \t;;\n\
           *)\n\
           \texit 0 ;# we do not interrupt others.\n\
           \t;;\n\
           esac\n\
           \n\
           # Now we are dealing with a topic branch being rebased\n\
           # on top of master.  Is it OK to rebase it?\n\
           \n\
           # Does the topic really exist?\n\
           git show-ref -q \"$topic\" || {\n\
           \techo >&2 \"No such branch $topic\"\n\
           \texit 1\n\
           }\n\
           \n\
           # Is topic fully merged to master?\n\
           not_in_master=`git rev-list --pretty=oneline ^master \"$topic\"`\n\
           if test -z \"$not_in_master\"\n\
           then\n\
           \techo >&2 \"$topic is fully merged to master; better remove it.\"\n\
           \texit 1 ;# we could allow it, but there is no point.\n\
           fi\n\
           \n\
           # Is topic ever merged to next?  If so you should not be rebasing it.\n\
           only_next_1=`git rev-list ^master \"^$topic\" ${publish} | sort`\n\
           only_next_2=`git rev-list ^master           ${publish} | sort`\n\
           if test \"$only_next_1\" = \"$only_next_2\"\n\
           then\n\
           \tnot_in_topic=`git rev-list \"^$topic\" master`\n\
           \tif test -z \"$not_in_topic\"\n\
           \tthen\n\
           \t\techo >&2 \"$topic is already up-to-date with master\"\n\
           \t\texit 1 ;# we could allow it, but there is no point.\n\
           \telse\n\
           \t\texit 0\n\
           \tfi\n\
           else\n\
           \tnot_in_next=`git rev-list --pretty=oneline ^${publish} \"$topic\"`\n\
           \t/usr/bin/perl -e '\n\
           \t\tmy $topic = $ARGV[0];\n\
           \t\tmy $msg = \"* $topic has commits already merged to public branch:\\n\";\n\
           \t\tmy (%not_in_next) = map {\n\
           \t\t\t/^([0-9a-f]+) /;\n\
           \t\t\t($1 => 1);\n\
           \t\t} split(/\\n/, $ARGV[1]);\n\
           \t\tfor my $elem (map {\n\
           \t\t\t\t/^([0-9a-f]+) (.*)$/;\n\
           \t\t\t\t[$1 => $2];\n\
           \t\t\t} split(/\\n/, $ARGV[2])) {\n\
           \t\t\tif (!exists $not_in_next{$elem->[0]}) {\n\
           \t\t\t\tif ($msg) {\n\
           \t\t\t\t\tprint STDERR $msg;\n\
           \t\t\t\t\tundef $msg;\n\
           \t\t\t\t}\n\
           \t\t\t\tprint STDERR \" $elem->[1]\\n\";\n\
           \t\t\t}\n\
           \t\t}\n\
           \t' \"$topic\" \"$not_in_next\" \"$not_in_master\"\n\
           \texit 1\n\
           fi\n\
           \n\
           exit 0\n\
           \n\
           ################################################################\n\
           \n\
           This sample hook safeguards topic branches that have been\n\
           published from being rewound.\n\
           \n\
           The workflow assumed here is:\n\
           \n\
          \ * Once a topic branch forks from \"master\", \"master\" is never\n\
          \   merged into it again (either directly or indirectly).\n\
           \n\
          \ * Once a topic branch is fully cooked and merged into \"master\",\n\
          \   it is deleted.  If you need to build on top of it to correct\n\
          \   earlier mistakes, a new topic branch is created by forking at\n\
          \   the tip of the \"master\".  This is not strictly necessary, but\n\
          \   it makes it easier to keep your history simple.\n\
           \n\
          \ * Whenever you need to test or publish your changes to topic\n\
          \   branches, merge them into \"next\" branch.\n\
           \n\
           The script, being an example, hardcodes the publish branch name\n\
           to be \"next\", but it is trivial to make it configurable via\n\
           $GIT_DIR/config mechanism.\n\
           \n\
           With this workflow, you would want to know:\n\
           \n\
           (1) ... if a topic branch has ever been merged to \"next\".  Young\n\
          \    topic branches can have stupid mistakes you would rather\n\
          \    clean up before publishing, and things that have not been\n\
          \    merged into other branches can be easily rebased without\n\
          \    affecting other people.  But once it is published, you would\n\
          \    not want to rewind it.\n\
           \n\
           (2) ... if a topic branch has been fully merged to \"master\".\n\
          \    Then you can delete it.  More importantly, you should not\n\
          \    build on top of it -- other people may already want to\n\
          \    change things related to the topic as patches against your\n\
          \    \"master\", so if you need further changes, it is better to\n\
          \    fork the topic (perhaps with the same name) afresh from the\n\
          \    tip of \"master\".\n\
           \n\
           Let's look at this example:\n\
           \n\
           \t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\
           \t\t  /       /           /           /\n\
           \t\t /   a---a---b A     /           /\n\
           \t\t/   /               /           /\n\
           \t       /   /   c---c---c---c B         /\n\
           \t      /   /   /             \\         /\n\
           \t     /   /   /   b---b C     \\       /\n\
           \t    /   /   /   /             \\     /\n\
          \    ---o---o---o---o---o---o---o---o---o---o---o \"master\"\n\
           \n\
           \n\
           A, B and C are topic branches.\n\
           \n\
          \ * A has one fix since it was merged up to \"next\".\n\
           \n\
          \ * B has finished.  It has been fully merged up to \"master\" and \"next\",\n\
          \   and is ready to be deleted.\n\
           \n\
          \ * C has not merged to \"next\" at all.\n\
           \n\
           We would want to allow C to be rebased, refuse A, and encourage\n\
           B to be deleted.\n\
           \n\
           To compute (1):\n\
           \n\
           \tgit rev-list ^master ^topic next\n\
           \tgit rev-list ^master        next\n\
           \n\
           \tif these match, topic has not merged in next at all.\n\
           \n\
           To compute (2):\n\
           \n\
           \tgit rev-list master..topic\n\
           \n\
           \tif this is empty, it is fully merged to \"master\".\n\
           ") ;
        File  ("pre-push.sample",
          "#!/bin/sh\n\
           \n\
           # An example hook script to verify what is about to be pushed.  Called by \"git\n\
           # push\" after it has checked the remote status, but before anything has been\n\
           # pushed.  If this script exits with a non-zero status nothing will be pushed.\n\
           #\n\
           # This hook is called with the following parameters:\n\
           #\n\
           # $1 -- Name of the remote to which the push is being done\n\
           # $2 -- URL to which the push is being done\n\
           #\n\
           # If pushing without using a named remote those arguments will be equal.\n\
           #\n\
           # Information about the commits which are being pushed is supplied as lines to\n\
           # the standard input in the form:\n\
           #\n\
           #   <local ref> <local sha1> <remote ref> <remote sha1>\n\
           #\n\
           # This sample shows how to prevent push of commits where the log message starts\n\
           # with \"WIP\" (work in progress).\n\
           \n\
           remote=\"$1\"\n\
           url=\"$2\"\n\
           \n\
           z40=0000000000000000000000000000000000000000\n\
           \n\
           while read local_ref local_sha remote_ref remote_sha\n\
           do\n\
           \tif [ \"$local_sha\" = $z40 ]\n\
           \tthen\n\
           \t\t# Handle delete\n\
           \t\t:\n\
           \telse\n\
           \t\tif [ \"$remote_sha\" = $z40 ]\n\
           \t\tthen\n\
           \t\t\t# New branch, examine all commits\n\
           \t\t\trange=\"$local_sha\"\n\
           \t\telse\n\
           \t\t\t# Update to existing branch, examine new commits\n\
           \t\t\trange=\"$remote_sha..$local_sha\"\n\
           \t\tfi\n\
           \n\
           \t\t# Check for WIP commit\n\
           \t\tcommit=`git rev-list -n 1 --grep '^WIP' \"$range\"`\n\
           \t\tif [ -n \"$commit\" ]\n\
           \t\tthen\n\
           \t\t\techo >&2 \"Found WIP commit in $local_ref, not pushing\"\n\
           \t\t\texit 1\n\
           \t\tfi\n\
           \tfi\n\
           done\n\
           \n\
           exit 0\n\
           ") ;
        File  ("pre-commit.sample",
          "#!/bin/sh\n\
           #\n\
           # An example hook script to verify what is about to be committed.\n\
           # Called by \"git commit\" with no arguments.  The hook should\n\
           # exit with non-zero status after issuing an appropriate message if\n\
           # it wants to stop the commit.\n\
           #\n\
           # To enable this hook, rename this file to \"pre-commit\".\n\
           \n\
           if git rev-parse --verify HEAD >/dev/null 2>&1\n\
           then\n\
           \tagainst=HEAD\n\
           else\n\
           \t# Initial commit: diff against an empty tree object\n\
           \tagainst=4b825dc642cb6eb9a060e54bf8d69288fbee4904\n\
           fi\n\
           \n\
           # If you want to allow non-ASCII filenames set this variable to true.\n\
           allownonascii=$(git config --bool hooks.allownonascii)\n\
           \n\
           # Redirect output to stderr.\n\
           exec 1>&2\n\
           \n\
           # Cross platform projects tend to avoid non-ASCII filenames; prevent\n\
           # them from being added to the repository. We exploit the fact that the\n\
           # printable range starts at the space character and ends with tilde.\n\
           if [ \"$allownonascii\" != \"true\" ] &&\n\
           \t# Note that the use of brackets around a tr range is ok here, (it's\n\
           \t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\
           \t# the square bracket bytes happen to fall in the designated range.\n\
           \ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\
           \t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\n\
           then\n\
           \tcat <<\\EOF\n\
           Error: Attempt to add a non-ASCII file name.\n\
           \n\
           This can cause problems if you want to work with people on other platforms.\n\
           \n\
           To be portable it is advisable to rename the file.\n\
           \n\
           If you know what you are doing you can disable this check using:\n\
           \n\
          \  git config hooks.allownonascii true\n\
           EOF\n\
           \texit 1\n\
           fi\n\
           \n\
           # If there are whitespace errors, print the offending file names and fail.\n\
           exec git diff-index --check --cached $against --\n\
           ") ;
        File  ("pre-applypatch.sample",
          "#!/bin/sh\n\
           #\n\
           # An example hook script to verify what is about to be committed\n\
           # by applypatch from an e-mail message.\n\
           #\n\
           # The hook should exit with non-zero status after issuing an\n\
           # appropriate message if it wants to stop the commit.\n\
           #\n\
           # To enable this hook, rename this file to \"pre-applypatch\".\n\
           \n\
           . git-sh-setup\n\
           precommit=\"$(git rev-parse --git-path hooks/pre-commit)\"\n\
           test -x \"$precommit\" && exec \"$precommit\" ${1+\"$@\"}\n\
           :\n\
           ") ;
        File  ("post-update.sample",
          "#!/bin/sh\n\
           #\n\
           # An example hook script to prepare a packed repository for use over\n\
           # dumb transports.\n\
           #\n\
           # To enable this hook, rename this file to \"post-update\".\n\
           \n\
           exec git update-server-info\n\
           ") ;
        File  ("commit-msg.sample",
          "#!/bin/sh\n\
           #\n\
           # An example hook script to check the commit log message.\n\
           # Called by \"git commit\" with one argument, the name of the file\n\
           # that has the commit message.  The hook should exit with non-zero\n\
           # status after issuing an appropriate message if it wants to stop the\n\
           # commit.  The hook is allowed to edit the commit message file.\n\
           #\n\
           # To enable this hook, rename this file to \"commit-msg\".\n\
           \n\
           # Uncomment the below to add a Signed-off-by line to the message.\n\
           # Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n\
           # hook is more suited to it.\n\
           #\n\
           # SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n\
           # grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\
           \n\
           # This example catches duplicate Signed-off-by lines.\n\
           \n\
           test \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\
           \t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\
           \techo >&2 Duplicate Signed-off-by lines.\n\
           \texit 1\n\
           }\n\
           ") ;
        File  ("applypatch-msg.sample",
          "#!/bin/sh\n\
           #\n\
           # An example hook script to check the commit log message taken by\n\
           # applypatch from an e-mail message.\n\
           #\n\
           # The hook should exit with non-zero status after issuing an\n\
           # appropriate message if it wants to stop the commit.  The hook is\n\
           # allowed to edit the commit message file.\n\
           #\n\
           # To enable this hook, rename this file to \"applypatch-msg\".\n\
           \n\
           . git-sh-setup\n\
           commitmsg=\"$(git rev-parse --git-path hooks/commit-msg)\"\n\
           test -x \"$commitmsg\" && exec \"$commitmsg\" ${1+\"$@\"}\n\
           :\n\
           ")]) ;
      File  ("HEAD",
        "ref: refs/heads/master\n\
         ") ;
      File  ("description",
        "Unnamed repository; edit this file 'description' to name the repository.\n\
         ") ;
      File  ("config",
        "[core]\n\
         \trepositoryformatversion = 0\n\
         \tfilemode = true\n\
         \tbare = false\n\
         \tlogallrefupdates = true\n\
         \tignorecase = true\n\
         \tprecomposeunicode = true\n\
         ")])])
])
